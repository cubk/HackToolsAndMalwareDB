using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;

namespace Ionic.Zip
{
	// Token: 0x02000072 RID: 114
	internal class SharedUtilities
	{
		// Token: 0x06000353 RID: 851 RVA: 0x000146B0 File Offset: 0x000128B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private SharedUtilities()
		{
		}

		// Token: 0x06000354 RID: 852 RVA: 0x000146B8 File Offset: 0x000128B8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static long GetFileLength(string fileName)
		{
			if (!delegate0d2.f0000c1(fileName))
			{
				throw new FileNotFoundException(fileName);
			}
			long result = 0L;
			FileShare fileShare = FileShare.ReadWrite;
			fileShare |= FileShare.Delete;
			FileStream p = delegate0134.f000170(fileName, FileMode.Open, FileAccess.Read, fileShare);
			result = delegate0e3.f0000e7(p);
			return result;
		}

		// Token: 0x06000355 RID: 853 RVA: 0x00014700 File Offset: 0x00012900
		[Conditional("NETCF")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void Workaround_Ladybug318918(Stream p0)
		{
			delegate0c9.f000099(p0);
		}

		// Token: 0x06000356 RID: 854 RVA: 0x00014718 File Offset: 0x00012918
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static string SimplifyFwdSlashPath(string path)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						path = path.Substring(2);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B8;
					case 2:
						goto IL_36;
					case 3:
						if (path.StartsWith(c0000c0.m00000f("¿.")))
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					path = path.Replace(c0000c0.m00000f("¾/b"), c0000c0.m00000f("¾"));
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_B8:
			Regex p = new Regex(c0000c0.m00000f("Ï)cN\u0089@\f\u001f÷,apT¹\u0010L¹Þ2Hq\u00984\u0082z\u0096Yõ>\u009c"));
			path = delegate013b.f000179(p, path, c0000c0.m00000f("µ0iW"));
			return path;
		}

		// Token: 0x06000357 RID: 855 RVA: 0x00014808 File Offset: 0x00012A08
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string NormalizePathForUseInZipFile(string pathName)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_72;
					case 1:
						goto IL_A6;
					case 2:
						if (pathName[2] == '\\')
						{
							pathName = pathName.Substring(3);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A6;
					case 3:
						if (string.IsNullOrEmpty(pathName))
						{
							return pathName;
						}
						goto IL_72;
					}
					break;
					IL_72:
					if (pathName.Length < 2 || pathName[1] != ':')
					{
						goto IL_A6;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			return pathName;
			IL_A6:
			pathName = pathName.Replace('\\', '/');
			while (pathName.StartsWith(c0000c0.m00000f("¾")))
			{
				pathName = pathName.Substring(1);
			}
			return SharedUtilities.SimplifyFwdSlashPath(pathName);
		}

		// Token: 0x06000358 RID: 856 RVA: 0x000148F0 File Offset: 0x00012AF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static byte[] StringToByteArray(string value, Encoding encoding)
		{
			return delegate0d7.f0000d2(encoding, value);
		}

		// Token: 0x06000359 RID: 857 RVA: 0x0001490C File Offset: 0x00012B0C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static byte[] StringToByteArray(string value)
		{
			return SharedUtilities.StringToByteArray(value, SharedUtilities.ibm437);
		}

		// Token: 0x0600035A RID: 858 RVA: 0x00014924 File Offset: 0x00012B24
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static string Utf8StringFromBuffer(byte[] buf)
		{
			return SharedUtilities.StringFromBuffer(buf, SharedUtilities.utf8);
		}

		// Token: 0x0600035B RID: 859 RVA: 0x0001493C File Offset: 0x00012B3C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static string StringFromBuffer(byte[] buf, Encoding encoding)
		{
			return delegate0115.f000145(encoding, buf, 0, buf.Length);
		}

		// Token: 0x0600035C RID: 860 RVA: 0x0001495C File Offset: 0x00012B5C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int ReadSignature(Stream p0)
		{
			int result = 0;
			result = SharedUtilities._ReadFourBytes(p0, c0000c0.m00000f("ÿt!"));
			return result;
		}

		// Token: 0x0600035D RID: 861 RVA: 0x00014980 File Offset: 0x00012B80
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int ReadEntrySignature(Stream p0)
		{
			int num = 0;
			num = SharedUtilities._ReadFourBytes(p0, c0000c0.m00000f("ÿt!"));
			if (num == 134695760)
			{
				delegate0149.f00018c(p0, 12L, SeekOrigin.Current);
				num = SharedUtilities._ReadFourBytes(p0, c0000c0.m00000f("ÿt!"));
				if (num != 67324752)
				{
					delegate0149.f00018c(p0, 8L, SeekOrigin.Current);
					num = SharedUtilities._ReadFourBytes(p0, c0000c0.m00000f("ÿt!"));
					if (num != 67324752)
					{
						delegate0149.f00018c(p0, -24L, SeekOrigin.Current);
						num = SharedUtilities._ReadFourBytes(p0, c0000c0.m00000f("ÿt!"));
					}
				}
			}
			return num;
		}

		// Token: 0x0600035E RID: 862 RVA: 0x00014A30 File Offset: 0x00012C30
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int ReadInt(Stream p0)
		{
			return SharedUtilities._ReadFourBytes(p0, c0000c0.m00000f("Òn8\bÂI]XØR<Iióm\u0005úí\r\r\ré:Ã<\u009e\u0013¿cÙÂ\u0096=\u001f:\u0003ëäT\u0099Q\u0003è¥ãB\u0092\u000f¬Àdþ"));
		}

		// Token: 0x0600035F RID: 863 RVA: 0x00014A50 File Offset: 0x00012C50
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static int _ReadFourBytes(Stream p0, string message)
		{
			byte[] array;
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						array = new byte[4];
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_93;
					case 2:
						num2 = p0.Read(array, 0, array.Length);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num2 = 0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_93:
			if (num2 != array.Length)
			{
				throw new BadReadException(delegate0101.f000127(message, delegate0e3.f0000e5(p0)));
			}
			return (((int)array[3] * 256 + (int)array[2]) * 256 + (int)array[1]) * 256 + (int)array[0];
		}

		// Token: 0x06000360 RID: 864 RVA: 0x00014B40 File Offset: 0x00012D40
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected internal static long FindSignature(Stream stream, int SignatureToFind)
		{
			bool flag;
			long position;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					byte[] array;
					int num3;
					int num4;
					switch (num)
					{
					case 0:
					{
						int num2;
						array = new byte[num2];
						num3 = 0;
						flag = false;
						goto IL_106;
					}
					case 1:
						goto IL_127;
					case 2:
					{
						IL_36:
						byte[] array2;
						if (array[num4] != array2[3])
						{
							goto IL_127;
						}
						long p = delegate0e3.f0000e5(stream);
						delegate0149.f00018c(stream, (long)(num4 - num3), SeekOrigin.Current);
						int num5 = SharedUtilities.ReadSignature(stream);
						flag = (num5 == SignatureToFind);
						if (!flag)
						{
							delegate0149.f00018c(stream, p, SeekOrigin.Begin);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_138;
					}
					case 3:
					{
						position = stream.Position;
						int num2 = 65536;
						byte[] array2 = new byte[]
						{
							(byte)(SignatureToFind >> 24),
							(byte)((SignatureToFind & 16711680) >> 16),
							(byte)((SignatureToFind & 65280) >> 8),
							(byte)(SignatureToFind & 255)
						};
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_12D:
					if (num4 >= num3)
					{
						goto IL_138;
					}
					goto IL_36;
					IL_127:
					num4++;
					goto IL_12D;
					IL_106:
					num3 = delegate0144.f000185(stream, array, 0, array.Length);
					if (num3 != 0)
					{
						num4 = 0;
						goto IL_12D;
					}
					goto IL_13F;
					IL_138:
					if (flag)
					{
						goto IL_13F;
					}
					goto IL_106;
				}
			}
			IL_13F:
			if (!flag)
			{
				delegate0149.f00018c(stream, position, SeekOrigin.Begin);
				return -1L;
			}
			return stream.Position - position - 4L;
		}

		// Token: 0x06000361 RID: 865 RVA: 0x00014CB4 File Offset: 0x00012EB4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static DateTime AdjustTime_Reverse(DateTime time)
		{
			DateTime dateTime;
			DateTime result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (DateTime.Now.IsDaylightSavingTime() && !time.IsDaylightSavingTime())
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						dateTime = delegate0cf.f0000b8();
						num = delegate0da.f0000d7(-1);
						continue;
					case 1:
						goto IL_CC;
					case 2:
						goto IL_36;
					case 3:
						if (time.Kind == DateTimeKind.Utc)
						{
							return time;
						}
						result = time;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			return time - new TimeSpan(1, 0, 0);
			IL_CC:
			if (!dateTime.IsDaylightSavingTime() && time.IsDaylightSavingTime())
			{
				result = delegate014a.f00018d(time, new TimeSpan(1, 0, 0));
			}
			return result;
		}

		// Token: 0x06000362 RID: 866 RVA: 0x00014DBC File Offset: 0x00012FBC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static DateTime AdjustTime_Forward(DateTime time)
		{
			DateTime dateTime;
			DateTime result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (DateTime.Now.IsDaylightSavingTime() && !time.IsDaylightSavingTime())
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						dateTime = delegate0cf.f0000b8();
						num = delegate0da.f0000d7(-1);
						continue;
					case 1:
						goto IL_CC;
					case 2:
						goto IL_36;
					case 3:
						if (time.Kind == DateTimeKind.Utc)
						{
							return time;
						}
						result = time;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			return time + new TimeSpan(1, 0, 0);
			IL_CC:
			if (!dateTime.IsDaylightSavingTime() && time.IsDaylightSavingTime())
			{
				result = delegate014a.f00018e(time, new TimeSpan(1, 0, 0));
			}
			return result;
		}

		// Token: 0x06000363 RID: 867 RVA: 0x00014EC4 File Offset: 0x000130C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static DateTime PackedToDateTime(int packedDateTime)
		{
			if (packedDateTime == 65535 || packedDateTime == 0)
			{
				return new DateTime(1995, 1, 1, 0, 0, 0, 0);
			}
			short num = (short)(packedDateTime & 65535);
			short num2 = (short)(((long)packedDateTime & (long)((ulong)-65536)) >> 16);
			int year = 1980 + (((int)num2 & 65024) >> 9);
			int month = (num2 & 480) >> 5;
			int num3 = (int)(num2 & 31);
			int num4 = ((int)num & 63488) >> 11;
			int num5 = (num & 2016) >> 5;
			int num6 = (int)((num & 31) * 2);
			if (num6 >= 60)
			{
				num5++;
				num6 = 0;
			}
			if (num5 >= 60)
			{
				num4++;
				num5 = 0;
			}
			if (num4 >= 24)
			{
				num3++;
				num4 = 0;
			}
			DateTime value = DateTime.Now;
			value = new DateTime(year, month, num3, num4, num5, num6, 0);
			return DateTime.SpecifyKind(value, DateTimeKind.Local);
		}

		// Token: 0x06000364 RID: 868 RVA: 0x00014FB0 File Offset: 0x000131B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int DateTimeToPacked(DateTime time)
		{
			ushort num2;
			ushort num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						num2 = (ushort)((time.Day & 31) | (time.Month << 5 & 480) | (time.Year - 1980 << 9 & 65024));
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_E9;
					case 2:
						num3 = (ushort)((time.Second / 2 & 31) | (time.Minute << 5 & 2016) | (time.Hour << 11 & 63488));
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						time = time.ToLocalTime();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_E9:
			return (int)num2 << 16 | (int)num3;
		}

		// Token: 0x06000365 RID: 869 RVA: 0x000150B0 File Offset: 0x000132B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void CreateAndOpenUniqueTempFile(string dir, out Stream p1, out string filename)
		{
			int num = 0;
			if (num >= 3)
			{
				throw new IOException();
			}
			filename = delegate0d0.f0000bb(dir, SharedUtilities.InternalGetTempFileName());
			p1 = new FileStream(filename, FileMode.CreateNew);
		}

		// Token: 0x06000366 RID: 870 RVA: 0x000150F0 File Offset: 0x000132F0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string InternalGetTempFileName()
		{
			return delegate0ff.f000123(c0000c0.m00000f("Õn9*Ã\u001di^Ü_"), delegate0cb.f0000a0().Substring(0, 8), c0000c0.m00000f("¿u \u0014"));
		}

		// Token: 0x06000367 RID: 871 RVA: 0x0001512C File Offset: 0x0001332C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int ReadWithRetry(Stream p0, byte[] buffer, int offset, int count, string FileName)
		{
			return delegate0144.f000185(p0, buffer, offset, count);
		}

		// Token: 0x06000368 RID: 872 RVA: 0x00015150 File Offset: 0x00013350
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static uint _HRForException(Exception ex1)
		{
			return (uint)delegate014b.f00018f(ex1);
		}

		// Token: 0x06000369 RID: 873 RVA: 0x00015168 File Offset: 0x00013368
		// Note: this type is marked as 'beforefieldinit'.
		static SharedUtilities()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			SharedUtilities.ibm437 = delegate0c7.f000090(c0000c0.m00000f("ØC\0P\u0095^"));
			SharedUtilities.utf8 = delegate0c7.f000090(c0000c0.m00000f("ÄU\vI\u009e"));
		}

		// Token: 0x04000156 RID: 342
		private static Encoding ibm437;

		// Token: 0x04000157 RID: 343
		private static Encoding utf8;
	}
}
