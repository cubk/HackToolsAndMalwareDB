using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using Ionic.Zip;
using Ionic.Zlib;

namespace Application
{
	// Token: 0x02000003 RID: 3
	internal class Archive
	{
		// Token: 0x0600000C RID: 12 RVA: 0x00002164 File Offset: 0x00000364
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] Create(List<FileObject> files)
		{
			ZipFile zipFile = new ZipFile(delegate0c7.f00008f(c0000c0.m00000f("Æh#\0É\u001e@\u001a\u009d@{\u001e")));
			foreach (FileObject fileObject in files)
			{
				zipFile.AddEntry(fileObject.Name, fileObject.StringContent, delegate0c7.f00008f(c0000c0.m00000f("Æh#\0É\u001e@\u001a\u009d@{\u001e")));
			}
			zipFile.ParallelDeflateThreshold = -1L;
			zipFile.UseZip64WhenSaving = Zip64Option.Always;
			zipFile.CompressionLevel = CompressionLevel.BestCompression;
			MemoryStream memoryStream = new MemoryStream();
			zipFile.Save(memoryStream);
			byte[] result = delegate0c8.f000091(memoryStream);
			delegate0c9.f000093(memoryStream);
			zipFile.Dispose();
			return result;
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002218 File Offset: 0x00000418
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Archive()
		{
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00002220 File Offset: 0x00000420
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static Archive()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}
	}
}
