using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x0200009C RID: 156
	internal sealed class DeflateManager
	{
		// Token: 0x0600060C RID: 1548 RVA: 0x00027EC0 File Offset: 0x000260C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal DeflateManager()
		{
			this.dyn_ltree = new short[DeflateManager.HEAP_SIZE * 2];
			this.dyn_dtree = new short[(2 * InternalConstants.D_CODES + 1) * 2];
			this.bl_tree = new short[(2 * InternalConstants.BL_CODES + 1) * 2];
		}

		// Token: 0x0600060D RID: 1549 RVA: 0x00027F7C File Offset: 0x0002617C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _InitializeLazyMatch()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.config = DeflateManager.Config.Lookup(this.compressionLevel);
						this.SetDeflater();
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_CB;
					case 2:
						this.f00006a = 0;
						this.block_start = 0;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this.window_size = 2 * this.w_size;
						delegate0100.f000125(this.head, 0, this.hash_size);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_CB:
			this.lookahead = 0;
			this.match_length = (this.prev_length = DeflateManager.MIN_MATCH - 1);
			this.match_available = 0;
			this.ins_h = 0;
		}

		// Token: 0x0600060E RID: 1550 RVA: 0x00028080 File Offset: 0x00026280
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _InitializeTreeData()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.treeDistances.dyn_tree = this.dyn_dtree;
						this.treeDistances.staticTree = StaticTree.Distances;
						this.treeBitLengths.dyn_tree = this.bl_tree;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_F0;
					case 2:
						this.treeBitLengths.staticTree = StaticTree.BitLengths;
						this.bi_buf = 0;
						this.bi_valid = 0;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this.treeLiterals.dyn_tree = this.dyn_ltree;
						this.treeLiterals.staticTree = StaticTree.Literals;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_F0:
			this.last_eob_len = 8;
			this._InitializeBlocks();
		}

		// Token: 0x0600060F RID: 1551 RVA: 0x0002818C File Offset: 0x0002638C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void _InitializeBlocks()
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_53;
					case 1:
						goto IL_B3;
					case 2:
						num2++;
						goto IL_3A;
					case 3:
						num2 = 0;
						goto IL_53;
					}
					break;
					IL_53:
					if (num2 < InternalConstants.L_CODES)
					{
						this.dyn_ltree[num2 * 2] = 0;
						num2++;
						num = delegate0da.f0000d7(0);
						continue;
					}
					num2 = 0;
					IL_3A:
					if (num2 >= InternalConstants.D_CODES)
					{
						goto Block_1;
					}
					this.dyn_dtree[num2 * 2] = 0;
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_1:
			num2 = 0;
			goto IL_C2;
			IL_B3:
			this.bl_tree[num2 * 2] = 0;
			num2++;
			IL_C2:
			if (num2 >= InternalConstants.BL_CODES)
			{
				this.dyn_ltree[DeflateManager.END_BLOCK * 2] = 1;
				this.opt_len = (this.static_len = 0);
				this.last_lit = (this.matches = 0);
				return;
			}
			goto IL_B3;
		}

		// Token: 0x06000610 RID: 1552 RVA: 0x0002829C File Offset: 0x0002649C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void pqdownheap(short[] tree, int p1)
		{
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						if (num2 < this.heap_len && DeflateManager._IsSmaller(tree, this.heap[num2 + 1], this.heap[num2], this.depth))
						{
							num2++;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_37;
					case 1:
						p1 = num2;
						num2 <<= 1;
						goto IL_10B;
					case 2:
						goto IL_37;
					case 3:
						num3 = this.heap[p1];
						num2 = p1 << 1;
						goto IL_10B;
					}
					break;
					IL_37:
					if (DeflateManager._IsSmaller(tree, num3, this.heap[num2], this.depth))
					{
						goto Block_1;
					}
					this.heap[p1] = this.heap[num2];
					num = delegate0da.f0000d7(-1);
					continue;
					IL_10B:
					if (num2 > this.heap_len)
					{
						goto IL_11E;
					}
					num = delegate0da.f0000d7(0);
				}
			}
			Block_1:
			IL_11E:
			this.heap[p1] = num3;
		}

		// Token: 0x06000611 RID: 1553 RVA: 0x000283D0 File Offset: 0x000265D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static bool _IsSmaller(short[] tree, int p1, int p2, sbyte[] depth)
		{
			bool result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
					{
						short num2 = tree[p2 * 2];
						short num3;
						if (num3 >= num2)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						flag = true;
						goto IL_54;
					}
					case 1:
						return result;
					case 2:
					{
						short num2;
						short num3;
						flag = (num3 == num2 && depth[p1] <= depth[p2]);
						goto IL_54;
					}
					case 3:
					{
						short num3 = tree[p1 * 2];
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_54:
					result = flag;
					num = delegate0da.f0000d7(-1);
				}
			}
			return result;
		}

		// Token: 0x06000612 RID: 1554 RVA: 0x00028494 File Offset: 0x00026694
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void scan_tree(short[] tree, int max_code)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num3;
					int num4;
					int num5;
					int num6;
					int num7;
					int num12;
					switch (num)
					{
					case 0:
					{
						if (++num2 < num3 && num4 == num5)
						{
							goto IL_1F5;
						}
						if (num2 < num6)
						{
							this.bl_tree[num4 * 2] = (short)((int)this.bl_tree[num4 * 2] + num2);
							goto IL_7F;
						}
						if (num4 != 0)
						{
							if (num4 != num7)
							{
								short[] array = this.bl_tree;
								int num8 = num4 * 2;
								array[num8] += 1;
							}
							short[] array2 = this.bl_tree;
							int num9 = InternalConstants.REP_3_6 * 2;
							array2[num9] += 1;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						if (num2 <= 10)
						{
							short[] array3 = this.bl_tree;
							int num10 = InternalConstants.REPZ_3_10 * 2;
							array3[num10] += 1;
							goto IL_7F;
						}
						short[] array4 = this.bl_tree;
						int num11 = InternalConstants.REPZ_11_138 * 2;
						array4[num11] += 1;
						goto IL_7F;
					}
					case 1:
						goto IL_1F5;
					case 2:
						goto IL_7F;
					case 3:
						num7 = -1;
						num5 = (int)tree[1];
						num2 = 0;
						num3 = 7;
						num6 = 4;
						if (num5 == 0)
						{
							num3 = 138;
							num6 = 3;
						}
						tree[(max_code + 1) * 2 + 1] = short.MaxValue;
						num12 = 0;
						goto IL_1FB;
					}
					break;
					IL_7F:
					num2 = 0;
					num7 = num4;
					if (num5 == 0)
					{
						num3 = 138;
						num6 = 3;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					if (num4 == num5)
					{
						num3 = 6;
						num6 = 3;
						goto IL_1F5;
					}
					num3 = 7;
					num6 = 4;
					goto IL_1F5;
					IL_1FB:
					if (num12 > max_code)
					{
						return;
					}
					num4 = num5;
					num5 = (int)tree[(num12 + 1) * 2 + 1];
					num = delegate0da.f0000d7(0);
					continue;
					IL_1F5:
					num12++;
					goto IL_1FB;
				}
			}
		}

		// Token: 0x06000613 RID: 1555 RVA: 0x000286B0 File Offset: 0x000268B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int build_bl_tree()
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.treeBitLengths.build_tree(this);
						num2 = InternalConstants.BL_CODES - 1;
						goto IL_CE;
					case 1:
						goto IL_CE;
					case 2:
						if (this.bl_tree[(int)(Tree.bl_order[num2] * 2 + 1)] != 0)
						{
							goto Block_1;
						}
						num2--;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this.scan_tree(this.dyn_ltree, this.treeLiterals.max_code);
						this.scan_tree(this.dyn_dtree, this.treeDistances.max_code);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_CE:
					if (num2 < 3)
					{
						goto IL_DC;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_1:
			IL_DC:
			this.opt_len += 3 * (num2 + 1) + 5 + 5 + 4;
			return num2;
		}

		// Token: 0x06000614 RID: 1556 RVA: 0x000287CC File Offset: 0x000269CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void send_all_trees(int lcodes, int dcodes, int blcodes)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					bool flag;
					switch (num)
					{
					case 0:
						this.send_bits(blcodes - 4, 4);
						num2 = 0;
						goto IL_53;
					case 1:
						if (!flag)
						{
							goto Block_1;
						}
						num = delegate0da.f0000d7(-2);
						continue;
					case 2:
						this.send_bits((int)this.bl_tree[(int)(Tree.bl_order[num2] * 2 + 1)], 3);
						num2++;
						goto IL_53;
					case 3:
						this.send_bits(lcodes - 257, 5);
						this.send_bits(dcodes - 1, 5);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_53:
					flag = (num2 < blcodes);
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_1:
			this.send_tree(this.dyn_ltree, lcodes - 1);
			this.send_tree(this.dyn_dtree, dcodes - 1);
		}

		// Token: 0x06000615 RID: 1557 RVA: 0x000288C8 File Offset: 0x00026AC8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void send_tree(short[] tree, int max_code)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num4;
					int num5;
					int num6;
					int num7;
					int num8;
					switch (num)
					{
					case 0:
					{
						IL_111:
						int num3;
						if (num2 < num3)
						{
							do
							{
								this.send_code(num4, this.bl_tree);
							}
							while (--num2 != 0);
							goto IL_90;
						}
						if (num4 != 0)
						{
							if (num4 != num5)
							{
								this.send_code(num4, this.bl_tree);
								num2--;
							}
							this.send_code(InternalConstants.REP_3_6, this.bl_tree);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						if (num2 <= 10)
						{
							this.send_code(InternalConstants.REPZ_3_10, this.bl_tree);
							this.send_bits(num2 - 3, 3);
							goto IL_90;
						}
						this.send_code(InternalConstants.REPZ_11_138, this.bl_tree);
						this.send_bits(num2 - 11, 7);
						goto IL_90;
					}
					case 1:
					{
						int num3;
						if (num6 == 0)
						{
							num7 = 138;
							num3 = 3;
							goto IL_1DE;
						}
						if (num4 == num6)
						{
							num7 = 6;
							num3 = 3;
							goto IL_1DE;
						}
						num7 = 7;
						num3 = 4;
						goto IL_1DE;
					}
					case 2:
						this.send_bits(num2 - 3, 2);
						goto IL_90;
					case 3:
					{
						num5 = -1;
						num6 = (int)tree[1];
						num2 = 0;
						num7 = 7;
						int num3 = 4;
						if (num6 == 0)
						{
							num7 = 138;
							num3 = 3;
						}
						num8 = 0;
						goto IL_1E4;
					}
					}
					break;
					IL_90:
					num2 = 0;
					num5 = num4;
					num = delegate0da.f0000d7(-1);
					continue;
					IL_1E4:
					if (num8 > max_code)
					{
						return;
					}
					num4 = num6;
					num6 = (int)tree[(num8 + 1) * 2 + 1];
					if (++num2 >= num7 || num4 != num6)
					{
						goto IL_111;
					}
					IL_1DE:
					num8++;
					goto IL_1E4;
				}
			}
		}

		// Token: 0x06000616 RID: 1558 RVA: 0x00028ACC File Offset: 0x00026CCC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void put_bytes(byte[] p0, int start, int len)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						Array.Copy(p0, start, this.pending, this.pendingCount, len);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_94;
					case 2:
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_94:
			this.pendingCount += len;
		}

		// Token: 0x06000617 RID: 1559 RVA: 0x00028B7C File Offset: 0x00026D7C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void send_code(int p0, short[] tree)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						int num2 = p0 * 2;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						return;
					case 2:
					{
						int num2;
						this.send_bits((int)tree[num2] & 65535, (int)tree[num2 + 1] & 65535);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
		}

		// Token: 0x06000618 RID: 1560 RVA: 0x00028C28 File Offset: 0x00026E28
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void send_bits(int value, int length)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							this.bi_buf |= (short)(value << this.bi_valid & 65535);
							this.pending[this.pendingCount++] = (byte)this.bi_buf;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_12B;
					}
					case 1:
						goto IL_126;
					case 2:
						this.pending[this.pendingCount++] = (byte)(this.bi_buf >> 8);
						this.bi_buf = (short)((uint)value >> DeflateManager.Buf_size - this.bi_valid);
						this.bi_valid += length - DeflateManager.Buf_size;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
					{
						bool flag = this.bi_valid <= DeflateManager.Buf_size - length;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_126:
			return;
			IL_12B:
			this.bi_buf |= (short)(value << this.bi_valid & 65535);
			this.bi_valid += length;
		}

		// Token: 0x06000619 RID: 1561 RVA: 0x00028D90 File Offset: 0x00026F90
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void _tr_align()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						this.bi_flush();
						bool flag = 1 + this.last_eob_len + 10 - this.bi_valid >= 9;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_D2;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							this.send_bits(DeflateManager.STATIC_TREES << 1, 3);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_E8;
					}
					case 3:
						this.send_bits(DeflateManager.STATIC_TREES << 1, 3);
						this.send_code(DeflateManager.END_BLOCK, StaticTree.lengthAndLiteralsTreeCodes);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_D2:
			this.send_code(DeflateManager.END_BLOCK, StaticTree.lengthAndLiteralsTreeCodes);
			this.bi_flush();
			IL_E8:
			this.last_eob_len = 7;
		}

		// Token: 0x0600061A RID: 1562 RVA: 0x00028E8C File Offset: 0x0002708C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal bool _tr_tally(int dist, int p1)
		{
			bool flag;
			int num2;
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num3;
					switch (num)
					{
					case 0:
						goto IL_17C;
					case 1:
						if (!flag)
						{
							goto Block_4;
						}
						num2 = (int)((long)num2 + (long)this.dyn_dtree[num3 * 2] * (5L + (long)Tree.ExtraDistanceBits[num3]));
						num3++;
						goto IL_75;
					case 2:
						num2 = this.last_lit << 3;
						num4 = this.f00006a - this.block_start;
						num3 = 0;
						goto IL_75;
					case 3:
					{
						this.pending[this._distanceOffset + this.last_lit * 2] = (byte)((uint)dist >> 8);
						this.pending[this._distanceOffset + this.last_lit * 2 + 1] = (byte)dist;
						this.pending[this._lengthOffset + this.last_lit] = (byte)p1;
						this.last_lit++;
						flag = (dist != 0);
						if (!flag)
						{
							short[] array = this.dyn_ltree;
							int num5 = p1 * 2;
							array[num5] += 1;
							num = delegate0da.f0000d7(0);
							continue;
						}
						this.matches++;
						dist--;
						short[] array2 = this.dyn_ltree;
						int num6 = ((int)Tree.LengthCode[p1] + InternalConstants.LITERALS + 1) * 2;
						array2[num6] += 1;
						short[] array3 = this.dyn_dtree;
						int num7 = Tree.DistanceCode(dist) * 2;
						array3[num7] += 1;
						goto IL_17C;
					}
					}
					break;
					IL_75:
					flag = (num3 < InternalConstants.D_CODES);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_17C:
					flag = ((this.last_lit & 8191) != 0 || this.compressionLevel <= CompressionLevel.Level2);
					if (flag)
					{
						goto IL_1F7;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_4:
			num2 >>= 3;
			flag = (this.matches >= this.last_lit / 2 || num2 >= num4 / 2);
			if (flag)
			{
				goto IL_1F7;
			}
			return true;
			IL_1F7:
			return this.last_lit == this.lit_bufsize - 1 || this.last_lit == this.lit_bufsize;
		}

		// Token: 0x0600061B RID: 1563 RVA: 0x000290C0 File Offset: 0x000272C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void send_compressed_block(short[] ltree, short[] dtree)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num3;
					int num4;
					int num5;
					int num6;
					switch (num)
					{
					case 0:
						this.send_code(num2, ltree);
						goto IL_17F;
					case 1:
						num3 -= Tree.DistanceBase[num4];
						this.send_bits(num3, num5);
						goto IL_17F;
					case 2:
						num2 -= Tree.LengthBase[num4];
						this.send_bits(num2, num5);
						goto IL_4E;
					case 3:
						num6 = 0;
						if (this.last_lit != 0)
						{
							goto IL_A4;
						}
						goto IL_18F;
					}
					break;
					IL_4E:
					num3--;
					num4 = Tree.DistanceCode(num3);
					this.send_code(num4, dtree);
					num5 = Tree.ExtraDistanceBits[num4];
					if (num5 != 0)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_17F;
					IL_A4:
					int num7 = this._distanceOffset + num6 * 2;
					num3 = (((int)this.pending[num7] << 8 & 65280) | (int)(this.pending[num7 + 1] & byte.MaxValue));
					num2 = (int)(this.pending[this._lengthOffset + num6] & byte.MaxValue);
					num6++;
					if (num3 == 0)
					{
						num = delegate0da.f0000d7(0);
						continue;
					}
					num4 = (int)Tree.LengthCode[num2];
					this.send_code(num4 + InternalConstants.LITERALS + 1, ltree);
					num5 = Tree.ExtraLengthBits[num4];
					if (num5 != 0)
					{
						num = delegate0da.f0000d7(-2);
						continue;
					}
					goto IL_4E;
					IL_17F:
					if (num6 >= this.last_lit)
					{
						goto IL_18F;
					}
					goto IL_A4;
				}
			}
			IL_18F:
			this.send_code(DeflateManager.END_BLOCK, ltree);
			this.last_eob_len = (int)ltree[DeflateManager.END_BLOCK * 2 + 1];
		}

		// Token: 0x0600061C RID: 1564 RVA: 0x0002927C File Offset: 0x0002747C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void set_data_type()
		{
			int num2;
			int i;
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						num2 += (int)this.dyn_ltree[i * 2];
						i++;
						goto IL_A4;
					case 1:
						goto IL_B4;
					case 2:
						goto IL_37;
					case 3:
						i = 0;
						num3 = 0;
						num2 = 0;
						goto IL_A4;
					}
					break;
					IL_48:
					if (i >= 128)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					IL_37:
					num3 += (int)this.dyn_ltree[i * 2];
					i++;
					goto IL_48;
					IL_A4:
					if (i >= 7)
					{
						goto IL_48;
					}
					num = delegate0da.f0000d7(0);
				}
			}
			IL_B4:
			while (i < InternalConstants.LITERALS)
			{
				num2 += (int)this.dyn_ltree[i * 2];
				i++;
			}
			this.data_type = (sbyte)((num2 > num3 >> 2) ? DeflateManager.Z_BINARY : DeflateManager.Z_ASCII);
		}

		// Token: 0x0600061D RID: 1565 RVA: 0x00029384 File Offset: 0x00027584
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void bi_flush()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.pending[this.pendingCount++] = (byte)this.bi_buf;
						this.pending[this.pendingCount++] = (byte)(this.bi_buf >> 8);
						this.bi_buf = 0;
						this.bi_valid = 0;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_F7;
					case 2:
						goto IL_36;
					case 3:
						if (this.bi_valid == 16)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						if (this.bi_valid >= 8)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						return;
					}
					break;
				}
			}
			IL_36:
			return;
			IL_F7:
			this.pending[this.pendingCount++] = (byte)this.bi_buf;
			this.bi_buf = (short)(this.bi_buf >> 8);
			this.bi_valid -= 8;
		}

		// Token: 0x0600061E RID: 1566 RVA: 0x000294C8 File Offset: 0x000276C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void bi_windup()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_AC;
					case 1:
						goto IL_EC;
					case 2:
						goto IL_36;
					case 3:
						if (this.bi_valid > 8)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (this.bi_valid <= 0)
					{
						goto IL_ED;
					}
					this.pending[this.pendingCount++] = (byte)this.bi_buf;
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_AC:
			this.pending[this.pendingCount++] = (byte)this.bi_buf;
			this.pending[this.pendingCount++] = (byte)(this.bi_buf >> 8);
			IL_EC:
			IL_ED:
			this.bi_buf = 0;
			this.bi_valid = 0;
		}

		// Token: 0x0600061F RID: 1567 RVA: 0x000295D0 File Offset: 0x000277D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void copy_block(int buf, int len, bool header)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.last_eob_len = 8;
						if (header)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_106;
					case 1:
						goto IL_CE;
					case 2:
						this.pending[this.pendingCount++] = (byte)len;
						this.pending[this.pendingCount++] = (byte)(len >> 8);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this.bi_windup();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_CE:
			this.pending[this.pendingCount++] = (byte)(~(byte)len);
			this.pending[this.pendingCount++] = (byte)(~len >> 8);
			IL_106:
			this.put_bytes(this.window, buf, len);
		}

		// Token: 0x06000620 RID: 1568 RVA: 0x000296F4 File Offset: 0x000278F4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void flush_block_only(bool eof)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._tr_flush_block((this.block_start >= 0) ? this.block_start : -1, this.f00006a - this.block_start, eof);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_AC;
					case 2:
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_AC:
			this.block_start = this.f00006a;
			this._codec.flush_pending();
		}

		// Token: 0x06000621 RID: 1569 RVA: 0x000297C4 File Offset: 0x000279C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal BlockState DeflateNone(FlushType flush)
		{
			bool flag2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num2;
					int num3;
					switch (num)
					{
					case 0:
						flag = (flush != FlushType.None);
						goto IL_135;
					case 1:
						if (!flag2)
						{
							goto Block_10;
						}
						goto IL_ED;
					case 2:
						this.lookahead = this.f00006a - num2;
						this.f00006a = num2;
						this.flush_block_only(false);
						flag2 = (this._codec.AvailableBytesOut != 0);
						if (!flag2)
						{
							goto Block_1;
						}
						goto IL_71;
					case 3:
						num3 = 65535;
						flag2 = (num3 <= this.pending.Length - 5);
						if (!flag2)
						{
							num3 = this.pending.Length - 5;
							goto IL_ED;
						}
						goto IL_ED;
					}
					break;
					IL_71:
					flag2 = (this.f00006a - this.block_start < this.w_size - DeflateManager.MIN_LOOKAHEAD);
					if (!flag2)
					{
						this.flush_block_only(false);
						flag2 = (this._codec.AvailableBytesOut != 0);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					IL_ED:
					flag2 = true;
					flag2 = (this.lookahead > 1);
					if (!flag2)
					{
						this._fillWindow();
						if (this.lookahead == 0)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						flag = true;
						goto IL_135;
					}
					IL_15B:
					this.f00006a += this.lookahead;
					this.lookahead = 0;
					num2 = this.block_start + num3;
					flag2 = (this.f00006a != 0 && this.f00006a < num2);
					if (!flag2)
					{
						num = delegate0da.f0000d7(-2);
						continue;
					}
					goto IL_71;
					IL_135:
					flag2 = flag;
					if (!flag2)
					{
						goto Block_6;
					}
					flag2 = (this.lookahead != 0);
					if (!flag2)
					{
						goto Block_7;
					}
					goto IL_15B;
				}
			}
			Block_1:
			return BlockState.NeedMore;
			Block_6:
			return BlockState.NeedMore;
			Block_7:
			this.flush_block_only(flush == FlushType.Finish);
			flag2 = (this._codec.AvailableBytesOut != 0);
			if (!flag2)
			{
				return (flush == FlushType.Finish) ? BlockState.FinishStarted : BlockState.NeedMore;
			}
			return (flush == FlushType.Finish) ? BlockState.FinishDone : BlockState.BlockDone;
			Block_10:
			return BlockState.NeedMore;
		}

		// Token: 0x06000622 RID: 1570 RVA: 0x000299E0 File Offset: 0x00027BE0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void _tr_stored_block(int buf, int stored_len, bool eof)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.send_bits((DeflateManager.STORED_BLOCK << 1) + (eof ? 1 : 0), 3);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_9C;
					case 2:
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_9C:
			this.copy_block(buf, stored_len, true);
		}

		// Token: 0x06000623 RID: 1571 RVA: 0x00029A94 File Offset: 0x00027C94
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void _tr_flush_block(int buf, int stored_len, bool eof)
		{
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
					{
						num2 = this.opt_len + 3 + 7 >> 3;
						int num3 = this.static_len + 3 + 7 >> 3;
						if (num3 <= num2)
						{
							num2 = num3;
							goto IL_137;
						}
						goto IL_137;
					}
					case 1:
						goto IL_16B;
					case 2:
						goto IL_36;
					case 3:
					{
						num4 = 0;
						if (this.compressionLevel > CompressionLevel.None)
						{
							if ((int)this.data_type == DeflateManager.Z_UNKNOWN)
							{
								this.set_data_type();
							}
							this.treeLiterals.build_tree(this);
							this.treeDistances.build_tree(this);
							num4 = this.build_bl_tree();
							num = delegate0da.f0000d7(0);
							continue;
						}
						int num3 = num2 = stored_len + 5;
						goto IL_137;
					}
					}
					break;
					IL_137:
					if (stored_len + 4 <= num2 && buf != -1)
					{
						num = delegate0da.f0000d7(-2);
					}
					else
					{
						int num3;
						if (num3 == num2)
						{
							goto Block_1;
						}
						num = delegate0da.f0000d7(-1);
					}
				}
			}
			IL_36:
			this._tr_stored_block(buf, stored_len, eof);
			goto IL_1BC;
			Block_1:
			this.send_bits((DeflateManager.STATIC_TREES << 1) + (eof ? 1 : 0), 3);
			this.send_compressed_block(StaticTree.lengthAndLiteralsTreeCodes, StaticTree.distTreeCodes);
			goto IL_1BC;
			IL_16B:
			this.send_bits((DeflateManager.DYN_TREES << 1) + (eof ? 1 : 0), 3);
			this.send_all_trees(this.treeLiterals.max_code + 1, this.treeDistances.max_code + 1, num4 + 1);
			this.send_compressed_block(this.dyn_ltree, this.dyn_dtree);
			IL_1BC:
			this._InitializeBlocks();
			if (eof)
			{
				this.bi_windup();
			}
		}

		// Token: 0x06000624 RID: 1572 RVA: 0x00029C74 File Offset: 0x00027E74
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _fillWindow()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num5;
					switch (num)
					{
					case 0:
						num2--;
						goto IL_211;
					case 1:
						goto IL_211;
					case 2:
					{
						int num4;
						int num3 = (int)this.head[--num4] & 65535;
						this.head[num4] = (short)((num3 >= this.w_size) ? (num3 - this.w_size) : 0);
						if (--num5 == 0)
						{
							num5 = this.w_size;
							num4 = num5;
							do
							{
								num3 = ((int)this.prev[--num4] & 65535);
								this.prev[num4] = (short)((num3 >= this.w_size) ? (num3 - this.w_size) : 0);
							}
							while (--num5 != 0);
							num2 += this.w_size;
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_1F8;
					}
					case 3:
						goto IL_F7;
					}
					break;
					IL_F7:
					num2 = this.window_size - this.lookahead - this.f00006a;
					if (num2 == 0 && this.f00006a == 0 && this.lookahead == 0)
					{
						num2 = this.w_size;
					}
					else
					{
						if (num2 == -1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						if (this.f00006a >= this.w_size + this.w_size - DeflateManager.MIN_LOOKAHEAD)
						{
							delegate0fe.f000121(this.window, this.w_size, this.window, 0, this.w_size);
							this.match_start -= this.w_size;
							this.f00006a -= this.w_size;
							this.block_start -= this.w_size;
							num5 = this.hash_size;
							int num4 = num5;
							goto IL_1F8;
						}
					}
					IL_211:
					if (this._codec.AvailableBytesIn == 0)
					{
						return;
					}
					num5 = this._codec.read_buf(this.window, this.f00006a + this.lookahead, num2);
					this.lookahead += num5;
					if (this.lookahead >= DeflateManager.MIN_MATCH)
					{
						this.ins_h = (int)(this.window[this.f00006a] & byte.MaxValue);
						this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[this.f00006a + 1] & byte.MaxValue)) & this.hash_mask);
					}
					if (this.lookahead >= DeflateManager.MIN_LOOKAHEAD || this._codec.AvailableBytesIn == 0)
					{
						return;
					}
					goto IL_F7;
					IL_1F8:
					num = delegate0da.f0000d7(-2);
				}
			}
		}

		// Token: 0x06000625 RID: 1573 RVA: 0x00029F6C File Offset: 0x0002816C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal BlockState DeflateFast(FlushType flush)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						this.head[this.ins_h] = (short)this.f00006a;
						goto IL_2BC;
					case 1:
						this.flush_block_only(false);
						if (this._codec.AvailableBytesOut == 0)
						{
							goto Block_16;
						}
						goto IL_17A;
					case 2:
						num2 = ((int)this.head[this.ins_h] & 65535);
						this.prev[this.f00006a & this.w_mask] = this.head[this.ins_h];
						this.head[this.ins_h] = (short)this.f00006a;
						if (--this.match_length == 0)
						{
							this.f00006a++;
							goto IL_154;
						}
						goto IL_394;
					case 3:
						num2 = 0;
						goto IL_17A;
					}
					break;
					IL_154:
					bool flag;
					if (flag)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					IL_17A:
					if (this.lookahead < DeflateManager.MIN_LOOKAHEAD)
					{
						this._fillWindow();
						if (this.lookahead < DeflateManager.MIN_LOOKAHEAD && flush == FlushType.None)
						{
							goto Block_5;
						}
						if (this.lookahead == 0)
						{
							goto Block_6;
						}
					}
					if (this.lookahead >= DeflateManager.MIN_MATCH)
					{
						this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[this.f00006a + (DeflateManager.MIN_MATCH - 1)] & byte.MaxValue)) & this.hash_mask);
						num2 = ((int)this.head[this.ins_h] & 65535);
						this.prev[this.f00006a & this.w_mask] = this.head[this.ins_h];
						num = delegate0da.f0000d7(0);
						continue;
					}
					goto IL_2BC;
					IL_394:
					this.f00006a++;
					this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[this.f00006a + (DeflateManager.MIN_MATCH - 1)] & byte.MaxValue)) & this.hash_mask);
					num = delegate0da.f0000d7(-2);
					continue;
					IL_2BC:
					if ((long)num2 != 0L && (this.f00006a - num2 & 65535) <= this.w_size - DeflateManager.MIN_LOOKAHEAD && this.compressionStrategy != CompressionStrategy.HuffmanOnly)
					{
						this.match_length = this.longest_match(num2);
					}
					if (this.match_length < DeflateManager.MIN_MATCH)
					{
						flag = this._tr_tally(0, (int)(this.window[this.f00006a] & byte.MaxValue));
						this.lookahead--;
						this.f00006a++;
						goto IL_154;
					}
					flag = this._tr_tally(this.f00006a - this.match_start, this.match_length - DeflateManager.MIN_MATCH);
					this.lookahead -= this.match_length;
					if (this.match_length <= this.config.MaxLazy && this.lookahead >= DeflateManager.MIN_MATCH)
					{
						this.match_length--;
						goto IL_394;
					}
					this.f00006a += this.match_length;
					this.match_length = 0;
					this.ins_h = (int)(this.window[this.f00006a] & byte.MaxValue);
					this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[this.f00006a + 1] & byte.MaxValue)) & this.hash_mask);
					goto IL_154;
				}
			}
			Block_5:
			return BlockState.NeedMore;
			Block_6:
			this.flush_block_only(flush == FlushType.Finish);
			if (this._codec.AvailableBytesOut != 0)
			{
				return (flush == FlushType.Finish) ? BlockState.FinishDone : BlockState.BlockDone;
			}
			if (flush == FlushType.Finish)
			{
				return BlockState.FinishStarted;
			}
			return BlockState.NeedMore;
			Block_16:
			return BlockState.NeedMore;
		}

		// Token: 0x06000626 RID: 1574 RVA: 0x0002A3AC File Offset: 0x000285AC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal BlockState DeflateSlow(FlushType flush)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						if (this.compressionStrategy != CompressionStrategy.HuffmanOnly)
						{
							this.match_length = this.longest_match(num2);
						}
						if (this.match_length > 5)
						{
							goto IL_3C3;
						}
						if (this.compressionStrategy == CompressionStrategy.Filtered || (this.match_length == DeflateManager.MIN_MATCH && this.f00006a - this.match_start > 4096))
						{
							this.match_length = DeflateManager.MIN_MATCH - 1;
							goto IL_3C3;
						}
						goto IL_3C3;
					case 1:
						goto IL_501;
					case 2:
						goto IL_37;
					case 3:
						num2 = 0;
						goto IL_163;
					}
					break;
					IL_3C3:
					int num3;
					if (this.prev_length >= DeflateManager.MIN_MATCH && this.match_length <= this.prev_length)
					{
						num3 = this.f00006a + this.lookahead - DeflateManager.MIN_MATCH;
						bool flag = this._tr_tally(this.f00006a - 1 - this.prev_match, this.prev_length - DeflateManager.MIN_MATCH);
						this.lookahead -= this.prev_length - 1;
						this.prev_length -= 2;
						goto IL_44A;
					}
					if (this.match_available != 0)
					{
						bool flag = this._tr_tally(0, (int)(this.window[this.f00006a - 1] & byte.MaxValue));
						if (flag)
						{
							this.flush_block_only(false);
						}
						this.f00006a++;
						this.lookahead--;
						if (this._codec.AvailableBytesOut == 0)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
					}
					else
					{
						this.match_available = 1;
						this.f00006a++;
						this.lookahead--;
					}
					IL_163:
					if (this.lookahead < DeflateManager.MIN_LOOKAHEAD)
					{
						this._fillWindow();
						if (this.lookahead < DeflateManager.MIN_LOOKAHEAD && flush == FlushType.None)
						{
							goto Block_9;
						}
						if (this.lookahead == 0)
						{
							goto Block_10;
						}
					}
					if (this.lookahead >= DeflateManager.MIN_MATCH)
					{
						this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[this.f00006a + (DeflateManager.MIN_MATCH - 1)] & byte.MaxValue)) & this.hash_mask);
						num2 = ((int)this.head[this.ins_h] & 65535);
						this.prev[this.f00006a & this.w_mask] = this.head[this.ins_h];
						this.head[this.ins_h] = (short)this.f00006a;
					}
					this.prev_length = this.match_length;
					this.prev_match = this.match_start;
					this.match_length = DeflateManager.MIN_MATCH - 1;
					if (num2 != 0 && this.prev_length < this.config.MaxLazy && (this.f00006a - num2 & 65535) <= this.w_size - DeflateManager.MIN_LOOKAHEAD)
					{
						num = delegate0da.f0000d7(0);
						continue;
					}
					goto IL_3C3;
					IL_37:
					if (--this.prev_length == 0)
					{
						this.match_available = 0;
						this.match_length = DeflateManager.MIN_MATCH - 1;
						this.f00006a++;
						bool flag;
						if (!flag)
						{
							goto IL_163;
						}
						this.flush_block_only(false);
						if (this._codec.AvailableBytesOut == 0)
						{
							goto Block_3;
						}
						goto IL_163;
					}
					IL_44A:
					if (++this.f00006a > num3)
					{
						goto IL_37;
					}
					this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[this.f00006a + (DeflateManager.MIN_MATCH - 1)] & byte.MaxValue)) & this.hash_mask);
					num2 = ((int)this.head[this.ins_h] & 65535);
					this.prev[this.f00006a & this.w_mask] = this.head[this.ins_h];
					this.head[this.ins_h] = (short)this.f00006a;
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_3:
			return BlockState.NeedMore;
			Block_9:
			return BlockState.NeedMore;
			Block_10:
			if (this.match_available != 0)
			{
				bool flag = this._tr_tally(0, (int)(this.window[this.f00006a - 1] & byte.MaxValue));
				this.match_available = 0;
			}
			this.flush_block_only(flush == FlushType.Finish);
			if (this._codec.AvailableBytesOut != 0)
			{
				return (flush == FlushType.Finish) ? BlockState.FinishDone : BlockState.BlockDone;
			}
			if (flush == FlushType.Finish)
			{
				return BlockState.FinishStarted;
			}
			return BlockState.NeedMore;
			IL_501:
			return BlockState.NeedMore;
		}

		// Token: 0x06000627 RID: 1575 RVA: 0x0002A8DC File Offset: 0x00028ADC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int longest_match(int cur_match)
		{
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int niceLength;
					int num3;
					byte b;
					byte b2;
					int num5;
					bool flag;
					int num7;
					int num8;
					int num9;
					switch (num)
					{
					case 0:
						goto IL_22E;
					case 1:
					{
						int num2;
						if (num2 >= niceLength)
						{
							goto Block_18;
						}
						b = this.window[num3 + num4 - 1];
						b2 = this.window[num3 + num4];
						goto IL_328;
					}
					case 2:
						if (this.window[++num3] == this.window[++num5] && this.window[++num3] == this.window[++num5] && this.window[++num3] == this.window[++num5] && this.window[++num3] == this.window[++num5] && this.window[++num3] == this.window[++num5] && this.window[++num3] == this.window[++num5] && this.window[++num3] == this.window[++num5])
						{
							int num6;
							flag = (num3 < num6);
							goto IL_11A;
						}
						goto IL_119;
					case 3:
					{
						num7 = this.config.MaxChainLength;
						num3 = this.f00006a;
						num4 = this.prev_length;
						num8 = ((this.f00006a > this.w_size - DeflateManager.MIN_LOOKAHEAD) ? (this.f00006a - (this.w_size - DeflateManager.MIN_LOOKAHEAD)) : 0);
						niceLength = this.config.NiceLength;
						num9 = this.w_mask;
						int num6 = this.f00006a + DeflateManager.MAX_MATCH;
						b = this.window[num3 + num4 - 1];
						b2 = this.window[num3 + num4];
						if (this.prev_length >= this.config.GoodLength)
						{
							num7 >>= 2;
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_22E;
					}
					}
					break;
					IL_11A:
					if (!flag)
					{
						int num6;
						int num2 = DeflateManager.MAX_MATCH - (num6 - num3);
						num3 = num6 - DeflateManager.MAX_MATCH;
						if (num2 > num4)
						{
							this.match_start = cur_match;
							num4 = num2;
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_328;
					}
					IL_2C3:
					if (this.window[++num3] == this.window[++num5])
					{
						num = delegate0da.f0000d7(-2);
						continue;
					}
					goto IL_119;
					IL_24C:
					num5 = cur_match;
					if (this.window[num5 + num4] != b2 || this.window[num5 + num4 - 1] != b || this.window[num5] != this.window[num3] || this.window[++num5] != this.window[num3 + 1])
					{
						goto IL_328;
					}
					num3 += 2;
					num5++;
					goto IL_2C3;
					IL_22E:
					if (niceLength > this.lookahead)
					{
						niceLength = this.lookahead;
						goto IL_24C;
					}
					goto IL_24C;
					IL_119:
					flag = false;
					goto IL_11A;
					IL_328:
					if ((cur_match = ((int)this.prev[cur_match & num9] & 65535)) <= num8 || --num7 == 0)
					{
						goto IL_35C;
					}
					goto IL_24C;
				}
			}
			Block_18:
			IL_35C:
			bool flag2 = num4 > this.lookahead;
			int result;
			if (flag2)
			{
				result = this.lookahead;
			}
			else
			{
				result = num4;
			}
			return result;
		}

		// Token: 0x17000146 RID: 326
		// (get) Token: 0x06000628 RID: 1576 RVA: 0x0002AC6C File Offset: 0x00028E6C
		// (set) Token: 0x06000629 RID: 1577 RVA: 0x0002AC84 File Offset: 0x00028E84
		internal bool WantRfc1950HeaderBytes
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._WantRfc1950HeaderBytes;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._WantRfc1950HeaderBytes = value;
			}
		}

		// Token: 0x0600062A RID: 1578 RVA: 0x0002AC98 File Offset: 0x00028E98
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Initialize(ZlibCodec codec, CompressionLevel level)
		{
			return this.Initialize(codec, level, 15);
		}

		// Token: 0x0600062B RID: 1579 RVA: 0x0002ACB4 File Offset: 0x00028EB4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits)
		{
			return this.Initialize(codec, level, bits, DeflateManager.MEM_LEVEL_DEFAULT, CompressionStrategy.f000074);
		}

		// Token: 0x0600062C RID: 1580 RVA: 0x0002ACD4 File Offset: 0x00028ED4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy)
		{
			return this.Initialize(codec, level, bits, DeflateManager.MEM_LEVEL_DEFAULT, compressionStrategy);
		}

		// Token: 0x0600062D RID: 1581 RVA: 0x0002ACF4 File Offset: 0x00028EF4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
						flag = (memLevel <= DeflateManager.MEM_LEVEL_MAX);
						goto IL_155;
					case 1:
						goto IL_1D4;
					case 2:
						this.hash_size = 1 << this.hash_bits;
						this.hash_mask = this.hash_size - 1;
						this.hash_shift = (this.hash_bits + DeflateManager.MIN_MATCH - 1) / DeflateManager.MIN_MATCH;
						this.window = new byte[this.w_size * 2];
						this.prev = new short[this.w_size];
						this.head = new short[this.hash_size];
						this.lit_bufsize = 1 << memLevel + 6;
						this.pending = new byte[this.lit_bufsize * 4];
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this._codec = codec;
						this._codec.Message = null;
						if (windowBits < 9 || windowBits > 15)
						{
							goto Block_2;
						}
						if (memLevel >= 1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						flag = false;
						goto IL_155;
					}
					break;
					IL_155:
					if (!flag)
					{
						goto Block_4;
					}
					this._codec.dstate = this;
					this.w_bits = windowBits;
					this.w_size = 1 << this.w_bits;
					this.w_mask = this.w_size - 1;
					this.hash_bits = memLevel + 7;
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_2:
			throw new ZlibException(c0000c0.m00000f("æh#\0É\u001eq^Ø\u0001nA}ä9GôçN\u000fCänÅ6\u009e\u0005¿yß\u0086\u0096$\u0019d]­£"));
			Block_4:
			throw new ZlibException(delegate0101.f000127(c0000c0.m00000f("üd (Ã\u001fV[\u008c\u001f;_|·/\u0002¶ë\0FY¬\u007f\u008d!ß\u0019¹r\u0098Ò\u00983\u00171\\å"), DeflateManager.MEM_LEVEL_MAX));
			IL_1D4:
			this._distanceOffset = this.lit_bufsize;
			this._lengthOffset = 3 * this.lit_bufsize;
			this.compressionLevel = level;
			this.compressionStrategy = strategy;
			this.Reset();
			return 0;
		}

		// Token: 0x0600062E RID: 1582 RVA: 0x0002AF08 File Offset: 0x00029108
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void Reset()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.pendingCount = 0;
						this.nextPending = 0;
						this.Rfc1950BytesEmitted = false;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_F6;
					case 2:
						this.status = (this.WantRfc1950HeaderBytes ? DeflateManager.INIT_STATE : DeflateManager.BUSY_STATE);
						this._codec._Adler32 = Adler.Adler32(0U, null, 0, 0);
						this.last_flush = 0;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this._codec.TotalBytesIn = (this._codec.TotalBytesOut = 0L);
						this._codec.Message = null;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_F6:
			this._InitializeTreeData();
			this._InitializeLazyMatch();
		}

		// Token: 0x0600062F RID: 1583 RVA: 0x0002B018 File Offset: 0x00029218
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int End()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							goto Block_3;
						}
						goto IL_36;
					}
					case 1:
						goto IL_C6;
					case 2:
						goto IL_36;
					case 3:
					{
						bool flag = this.status == DeflateManager.INIT_STATE || this.status == DeflateManager.BUSY_STATE || this.status == DeflateManager.FINISH_STATE;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_36:
					this.pending = null;
					this.head = null;
					this.prev = null;
					this.window = null;
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_3:
			return -2;
			IL_C6:
			return (this.status == DeflateManager.BUSY_STATE) ? -3 : 0;
		}

		// Token: 0x06000630 RID: 1584 RVA: 0x0002B10C File Offset: 0x0002930C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void SetDeflater()
		{
			DeflateFlavor flavor;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_6D;
					case 1:
						goto IL_84;
					case 2:
						goto IL_56;
					case 3:
						flavor = this.config.Flavor;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_56:
			this.DeflateFunction = new DeflateManager.CompressFunc(this.DeflateNone);
			return;
			IL_6D:
			switch (flavor)
			{
			case DeflateFlavor.Store:
				goto IL_56;
			case DeflateFlavor.Fast:
				IL_84:
				this.DeflateFunction = new DeflateManager.CompressFunc(this.DeflateFast);
				break;
			case DeflateFlavor.Slow:
				this.DeflateFunction = new DeflateManager.CompressFunc(this.DeflateSlow);
				break;
			}
		}

		// Token: 0x06000631 RID: 1585 RVA: 0x0002B1C8 File Offset: 0x000293C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int SetParams(CompressionLevel level, CompressionStrategy strategy)
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					DeflateManager.Config config;
					switch (num)
					{
					case 0:
						config = DeflateManager.Config.Lookup(level);
						if (config.Flavor != this.config.Flavor && this._codec.TotalBytesIn != 0L)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_43;
					case 1:
						goto IL_ED;
					case 2:
						result = this._codec.Deflate(FlushType.Partial);
						goto IL_43;
					case 3:
						result = 0;
						if (this.compressionLevel != level)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_EE;
					}
					break;
					IL_43:
					this.compressionLevel = level;
					this.config = config;
					this.SetDeflater();
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_ED:
			IL_EE:
			this.compressionStrategy = strategy;
			return result;
		}

		// Token: 0x06000632 RID: 1586 RVA: 0x0002B2D0 File Offset: 0x000294D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int SetDictionary(byte[] dictionary)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num2;
					int sourceIndex;
					int num3;
					switch (num)
					{
					case 0:
						if (!flag)
						{
							goto Block_3;
						}
						flag = (num2 <= this.w_size - DeflateManager.MIN_LOOKAHEAD);
						if (!flag)
						{
							num2 = this.w_size - DeflateManager.MIN_LOOKAHEAD;
							sourceIndex = dictionary.Length - num2;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_36;
					case 1:
						this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[num3 + (DeflateManager.MIN_MATCH - 1)] & byte.MaxValue)) & this.hash_mask);
						this.prev[num3 & this.w_mask] = this.head[this.ins_h];
						this.head[this.ins_h] = (short)num3;
						num3++;
						goto IL_1E4;
					case 2:
						goto IL_36;
					case 3:
						num2 = dictionary.Length;
						sourceIndex = 0;
						flag = (dictionary != null && this.status == DeflateManager.INIT_STATE);
						if (!flag)
						{
							goto Block_2;
						}
						this._codec._Adler32 = Adler.Adler32(this._codec._Adler32, dictionary, 0, dictionary.Length);
						flag = (num2 >= DeflateManager.MIN_MATCH);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_1E4:
					flag = (num3 <= num2 - DeflateManager.MIN_MATCH);
					if (!flag)
					{
						goto Block_5;
					}
					num = delegate0da.f0000d7(-1);
					continue;
					IL_36:
					Array.Copy(dictionary, sourceIndex, this.window, 0, num2);
					this.f00006a = num2;
					this.block_start = num2;
					this.ins_h = (int)(this.window[0] & byte.MaxValue);
					this.ins_h = ((this.ins_h << this.hash_shift ^ (int)(this.window[1] & byte.MaxValue)) & this.hash_mask);
					num3 = 0;
					goto IL_1E4;
				}
			}
			Block_2:
			throw new ZlibException(c0000c0.m00000f("Âu?\u0001Ç\u0004\u0013RÞ\0!^&"));
			Block_3:
			return 0;
			Block_5:
			return 0;
		}

		// Token: 0x06000633 RID: 1587 RVA: 0x0002B4DC File Offset: 0x000296DC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Deflate(FlushType flush)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num2;
					switch (num)
					{
					case 0:
						this.pending[this.pendingCount++] = (byte)((this._codec._Adler32 & 4278190080U) >> 24);
						this.pending[this.pendingCount++] = (byte)((this._codec._Adler32 & 16711680U) >> 16);
						this.pending[this.pendingCount++] = (byte)((this._codec._Adler32 & 65280U) >> 8);
						this.pending[this.pendingCount++] = (byte)(this._codec._Adler32 & 255U);
						goto IL_38C;
					case 1:
						goto IL_49A;
					case 2:
						flag = (this.status == DeflateManager.FINISH_STATE);
						goto IL_49;
					case 3:
					{
						bool flag2;
						if (this._codec.OutputBuffer == null || (this._codec.InputBuffer == null && this._codec.AvailableBytesIn != 0))
						{
							flag2 = false;
							goto IL_16D;
						}
						if (this.status == DeflateManager.FINISH_STATE)
						{
							flag2 = (flush == FlushType.Finish);
							goto IL_16D;
						}
						IL_1AB:
						if (this._codec.AvailableBytesOut == 0)
						{
							goto Block_14;
						}
						num2 = this.last_flush;
						this.last_flush = (int)flush;
						if (this.status != DeflateManager.INIT_STATE)
						{
							goto IL_3A0;
						}
						int num3 = DeflateManager.Z_DEFLATED + (this.w_bits - 8 << 4) << 8;
						int num4 = (this.compressionLevel - CompressionLevel.BestSpeed & 255) >> 1;
						if (num4 > 3)
						{
							num4 = 3;
						}
						num3 |= num4 << 6;
						if (this.f00006a != 0)
						{
							num3 |= DeflateManager.PRESET_DICT;
						}
						num3 += 31 - num3 % 31;
						this.status = DeflateManager.BUSY_STATE;
						this.pending[this.pendingCount++] = (byte)(num3 >> 8);
						this.pending[this.pendingCount++] = (byte)num3;
						if (this.f00006a != 0)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_38C;
						IL_16D:
						if (!flag2)
						{
							goto Block_13;
						}
						goto IL_1AB;
					}
					}
					break;
					IL_49:
					if (flag)
					{
						goto IL_4F5;
					}
					BlockState blockState = this.DeflateFunction(flush);
					if (blockState == BlockState.FinishStarted || blockState == BlockState.FinishDone)
					{
						this.status = DeflateManager.FINISH_STATE;
					}
					if (blockState == BlockState.NeedMore || blockState == BlockState.FinishStarted)
					{
						goto Block_5;
					}
					if (blockState != BlockState.BlockDone)
					{
						goto IL_4F5;
					}
					if (flush == FlushType.Partial)
					{
						goto Block_8;
					}
					this._tr_stored_block(0, 0, false);
					if (flush == FlushType.Full)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_4C3;
					IL_3A0:
					if (this.pendingCount != 0)
					{
						this._codec.flush_pending();
						if (this._codec.AvailableBytesOut == 0)
						{
							goto Block_20;
						}
					}
					else if (this._codec.AvailableBytesIn == 0 && flush <= (FlushType)num2 && flush != FlushType.Finish)
					{
						goto Block_23;
					}
					if (this.status == DeflateManager.FINISH_STATE && this._codec.AvailableBytesIn != 0)
					{
						goto Block_25;
					}
					if (this._codec.AvailableBytesIn != 0 || this.lookahead != 0)
					{
						flag = false;
						goto IL_49;
					}
					if (flush != FlushType.None)
					{
						num = delegate0da.f0000d7(-2);
						continue;
					}
					goto IL_4F5;
					IL_38C:
					this._codec._Adler32 = Adler.Adler32(0U, null, 0, 0);
					goto IL_3A0;
				}
			}
			Block_5:
			if (this._codec.AvailableBytesOut == 0)
			{
				this.last_flush = -1;
			}
			return 0;
			Block_8:
			this._tr_align();
			goto IL_4C3;
			Block_13:
			this._codec.Message = DeflateManager._ErrorMessage[4];
			throw new ZlibException(delegate0101.f000127(c0000c0.m00000f("Ân \u0001Ò\u0001ZYËR'_(ñ$\u0014þû@Fv¿*Ð\u000e"), this._codec.Message));
			Block_14:
			this._codec.Message = DeflateManager._ErrorMessage[7];
			throw new ZlibException(c0000c0.m00000f("Þt9\u0014Ó\u001dqBÊ\u0014+^(þ>Gð÷\u0002\n\rì[Û2×\u001b¿uÔ\u0086ôdC/\u001f×øTÐ\u0003Pè¥²"));
			Block_20:
			this.last_flush = -1;
			return 0;
			Block_23:
			return 0;
			Block_25:
			this._codec.Message = DeflateManager._ErrorMessage[7];
			throw new ZlibException(c0000c0.m00000f("âu,\u0010Ó\u001a\u0013\n\u0091R\beFÞ\u001e/ÉÑ:'y\u0081:\u008bu\u009e(½xÜ\u0086Õ3v<\rñáA\u0092R\b\u008aìï\\Ñ|\u009aØ8êà\u0005"));
			IL_49A:
			for (int i = 0; i < this.hash_size; i++)
			{
				this.head[i] = 0;
			}
			IL_4C3:
			this._codec.flush_pending();
			if (this._codec.AvailableBytesOut == 0)
			{
				this.last_flush = -1;
				return 0;
			}
			IL_4F5:
			int result;
			if (flush != FlushType.Finish)
			{
				result = 0;
			}
			else if (!this.WantRfc1950HeaderBytes || this.Rfc1950BytesEmitted)
			{
				result = 1;
			}
			else
			{
				this.pending[this.pendingCount++] = (byte)((this._codec._Adler32 & 4278190080U) >> 24);
				this.pending[this.pendingCount++] = (byte)((this._codec._Adler32 & 16711680U) >> 16);
				this.pending[this.pendingCount++] = (byte)((this._codec._Adler32 & 65280U) >> 8);
				this.pending[this.pendingCount++] = (byte)(this._codec._Adler32 & 255U);
				this._codec.flush_pending();
				this.Rfc1950BytesEmitted = true;
				result = ((this.pendingCount != 0) ? 0 : 1);
			}
			return result;
		}

		// Token: 0x06000634 RID: 1588 RVA: 0x0002BAFC File Offset: 0x00029CFC
		// Note: this type is marked as 'beforefieldinit'.
		static DeflateManager()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			DeflateManager.MEM_LEVEL_MAX = 9;
			DeflateManager.MEM_LEVEL_DEFAULT = 8;
			DeflateManager._ErrorMessage = new string[]
			{
				c0000c0.m00000f("ÿd(\0\u0086\rZTØ\u001b!Biå4"),
				c0000c0.m00000f("âu?\u0001Ç\u0004\u0013RÂ\u0016"),
				c0000c0.m00000f(""),
				c0000c0.m00000f("÷h!\u0001\u0086\fAEÃ\0"),
				c0000c0.m00000f("âu?\u0001Ç\u0004\u0013RÞ\0!^"),
				c0000c0.m00000f("õ`9\u0005\u0086\fAEÃ\0"),
				c0000c0.m00000f("øo>\u0011À\u000fZTÅ\u0017 X(ú(\nùð\u0017"),
				c0000c0.m00000f("ót+\u0002Ã\u001b\u0013RÞ\0!^"),
				c0000c0.m00000f("øo.\vË\u0019RCÅ\u0010\"I(á(\u0015åë\u0001\b"),
				c0000c0.m00000f("")
			};
			DeflateManager.PRESET_DICT = 32;
			DeflateManager.INIT_STATE = 42;
			DeflateManager.BUSY_STATE = 113;
			DeflateManager.FINISH_STATE = 666;
			DeflateManager.Z_DEFLATED = 8;
			DeflateManager.STORED_BLOCK = 0;
			DeflateManager.STATIC_TREES = 1;
			DeflateManager.DYN_TREES = 2;
			DeflateManager.Z_BINARY = 0;
			DeflateManager.Z_ASCII = 1;
			DeflateManager.Z_UNKNOWN = 2;
			DeflateManager.Buf_size = 16;
			DeflateManager.MIN_MATCH = 3;
			DeflateManager.MAX_MATCH = 258;
			DeflateManager.MIN_LOOKAHEAD = DeflateManager.MAX_MATCH + DeflateManager.MIN_MATCH + 1;
			DeflateManager.HEAP_SIZE = 2 * InternalConstants.L_CODES + 1;
			DeflateManager.END_BLOCK = 256;
		}

		// Token: 0x040002A0 RID: 672
		private static readonly int MEM_LEVEL_MAX;

		// Token: 0x040002A1 RID: 673
		private static readonly int MEM_LEVEL_DEFAULT;

		// Token: 0x040002A2 RID: 674
		private DeflateManager.CompressFunc DeflateFunction;

		// Token: 0x040002A3 RID: 675
		private static readonly string[] _ErrorMessage;

		// Token: 0x040002A4 RID: 676
		private static readonly int PRESET_DICT;

		// Token: 0x040002A5 RID: 677
		private static readonly int INIT_STATE;

		// Token: 0x040002A6 RID: 678
		private static readonly int BUSY_STATE;

		// Token: 0x040002A7 RID: 679
		private static readonly int FINISH_STATE;

		// Token: 0x040002A8 RID: 680
		private static readonly int Z_DEFLATED;

		// Token: 0x040002A9 RID: 681
		private static readonly int STORED_BLOCK;

		// Token: 0x040002AA RID: 682
		private static readonly int STATIC_TREES;

		// Token: 0x040002AB RID: 683
		private static readonly int DYN_TREES;

		// Token: 0x040002AC RID: 684
		private static readonly int Z_BINARY;

		// Token: 0x040002AD RID: 685
		private static readonly int Z_ASCII;

		// Token: 0x040002AE RID: 686
		private static readonly int Z_UNKNOWN;

		// Token: 0x040002AF RID: 687
		private static readonly int Buf_size;

		// Token: 0x040002B0 RID: 688
		private static readonly int MIN_MATCH;

		// Token: 0x040002B1 RID: 689
		private static readonly int MAX_MATCH;

		// Token: 0x040002B2 RID: 690
		private static readonly int MIN_LOOKAHEAD;

		// Token: 0x040002B3 RID: 691
		private static readonly int HEAP_SIZE;

		// Token: 0x040002B4 RID: 692
		private static readonly int END_BLOCK;

		// Token: 0x040002B5 RID: 693
		internal ZlibCodec _codec;

		// Token: 0x040002B6 RID: 694
		internal int status;

		// Token: 0x040002B7 RID: 695
		internal byte[] pending;

		// Token: 0x040002B8 RID: 696
		internal int nextPending;

		// Token: 0x040002B9 RID: 697
		internal int pendingCount;

		// Token: 0x040002BA RID: 698
		internal sbyte data_type;

		// Token: 0x040002BB RID: 699
		internal int last_flush;

		// Token: 0x040002BC RID: 700
		internal int w_size;

		// Token: 0x040002BD RID: 701
		internal int w_bits;

		// Token: 0x040002BE RID: 702
		internal int w_mask;

		// Token: 0x040002BF RID: 703
		internal byte[] window;

		// Token: 0x040002C0 RID: 704
		internal int window_size;

		// Token: 0x040002C1 RID: 705
		internal short[] prev;

		// Token: 0x040002C2 RID: 706
		internal short[] head;

		// Token: 0x040002C3 RID: 707
		internal int ins_h;

		// Token: 0x040002C4 RID: 708
		internal int hash_size;

		// Token: 0x040002C5 RID: 709
		internal int hash_bits;

		// Token: 0x040002C6 RID: 710
		internal int hash_mask;

		// Token: 0x040002C7 RID: 711
		internal int hash_shift;

		// Token: 0x040002C8 RID: 712
		internal int block_start;

		// Token: 0x040002C9 RID: 713
		private DeflateManager.Config config;

		// Token: 0x040002CA RID: 714
		internal int match_length;

		// Token: 0x040002CB RID: 715
		internal int prev_match;

		// Token: 0x040002CC RID: 716
		internal int match_available;

		// Token: 0x040002CD RID: 717
		internal int f00006a;

		// Token: 0x040002CE RID: 718
		internal int match_start;

		// Token: 0x040002CF RID: 719
		internal int lookahead;

		// Token: 0x040002D0 RID: 720
		internal int prev_length;

		// Token: 0x040002D1 RID: 721
		internal CompressionLevel compressionLevel;

		// Token: 0x040002D2 RID: 722
		internal CompressionStrategy compressionStrategy;

		// Token: 0x040002D3 RID: 723
		internal short[] dyn_ltree;

		// Token: 0x040002D4 RID: 724
		internal short[] dyn_dtree;

		// Token: 0x040002D5 RID: 725
		internal short[] bl_tree;

		// Token: 0x040002D6 RID: 726
		internal Tree treeLiterals = new Tree();

		// Token: 0x040002D7 RID: 727
		internal Tree treeDistances = new Tree();

		// Token: 0x040002D8 RID: 728
		internal Tree treeBitLengths = new Tree();

		// Token: 0x040002D9 RID: 729
		internal short[] bl_count = new short[InternalConstants.MAX_BITS + 1];

		// Token: 0x040002DA RID: 730
		internal int[] heap = new int[2 * InternalConstants.L_CODES + 1];

		// Token: 0x040002DB RID: 731
		internal int heap_len;

		// Token: 0x040002DC RID: 732
		internal int heap_max;

		// Token: 0x040002DD RID: 733
		internal sbyte[] depth = new sbyte[2 * InternalConstants.L_CODES + 1];

		// Token: 0x040002DE RID: 734
		internal int _lengthOffset;

		// Token: 0x040002DF RID: 735
		internal int lit_bufsize;

		// Token: 0x040002E0 RID: 736
		internal int last_lit;

		// Token: 0x040002E1 RID: 737
		internal int _distanceOffset;

		// Token: 0x040002E2 RID: 738
		internal int opt_len;

		// Token: 0x040002E3 RID: 739
		internal int static_len;

		// Token: 0x040002E4 RID: 740
		internal int matches;

		// Token: 0x040002E5 RID: 741
		internal int last_eob_len;

		// Token: 0x040002E6 RID: 742
		internal short bi_buf;

		// Token: 0x040002E7 RID: 743
		internal int bi_valid;

		// Token: 0x040002E8 RID: 744
		private bool Rfc1950BytesEmitted = false;

		// Token: 0x040002E9 RID: 745
		private bool _WantRfc1950HeaderBytes = true;

		// Token: 0x0200009D RID: 157
		internal sealed class CompressFunc : MulticastDelegate
		{
			// Token: 0x06000635 RID: 1589
			[MethodImpl(MethodImplOptions.NoInlining)]
			public extern CompressFunc(object @object, IntPtr method);

			// Token: 0x06000636 RID: 1590
			[MethodImpl(MethodImplOptions.NoInlining)]
			public extern BlockState Invoke(FlushType flush);

			// Token: 0x06000637 RID: 1591
			[MethodImpl(MethodImplOptions.NoInlining)]
			public extern IAsyncResult BeginInvoke(FlushType flush, AsyncCallback callback, object @object);

			// Token: 0x06000638 RID: 1592
			[MethodImpl(MethodImplOptions.NoInlining)]
			public extern BlockState EndInvoke(IAsyncResult result);

			// Token: 0x06000639 RID: 1593 RVA: 0x0002BC3C File Offset: 0x00029E3C
			[MethodImpl(MethodImplOptions.NoInlining)]
			static CompressFunc()
			{
				c0000c0.Initialize();
				c0000c0.PostInitialize();
			}
		}

		// Token: 0x0200009E RID: 158
		internal class Config
		{
			// Token: 0x0600063A RID: 1594 RVA: 0x0002BC48 File Offset: 0x00029E48
			[MethodImpl(MethodImplOptions.NoInlining)]
			private Config(int goodLength, int maxLazy, int niceLength, int maxChainLength, DeflateFlavor flavor)
			{
				this.GoodLength = goodLength;
				this.MaxLazy = maxLazy;
				this.NiceLength = niceLength;
				this.MaxChainLength = maxChainLength;
				this.Flavor = flavor;
			}

			// Token: 0x0600063B RID: 1595 RVA: 0x0002BC78 File Offset: 0x00029E78
			[MethodImpl(MethodImplOptions.NoInlining)]
			public static DeflateManager.Config Lookup(CompressionLevel level)
			{
				return DeflateManager.Config.Table[(int)level];
			}

			// Token: 0x0600063C RID: 1596 RVA: 0x0002BC90 File Offset: 0x00029E90
			static Config()
			{
				c0000c0.Initialize();
				c0000c0.PostInitialize();
				DeflateManager.Config.Table = new DeflateManager.Config[]
				{
					new DeflateManager.Config(0, 0, 0, 0, DeflateFlavor.Store),
					new DeflateManager.Config(4, 4, 8, 4, DeflateFlavor.Fast),
					new DeflateManager.Config(4, 5, 16, 8, DeflateFlavor.Fast),
					new DeflateManager.Config(4, 6, 32, 32, DeflateFlavor.Fast),
					new DeflateManager.Config(4, 4, 16, 16, DeflateFlavor.Slow),
					new DeflateManager.Config(8, 16, 32, 32, DeflateFlavor.Slow),
					new DeflateManager.Config(8, 16, 128, 128, DeflateFlavor.Slow),
					new DeflateManager.Config(8, 32, 128, 256, DeflateFlavor.Slow),
					new DeflateManager.Config(32, 128, 258, 1024, DeflateFlavor.Slow),
					new DeflateManager.Config(32, 258, 258, 4096, DeflateFlavor.Slow)
				};
			}

			// Token: 0x040002EA RID: 746
			internal int GoodLength;

			// Token: 0x040002EB RID: 747
			internal int MaxLazy;

			// Token: 0x040002EC RID: 748
			internal int NiceLength;

			// Token: 0x040002ED RID: 749
			internal int MaxChainLength;

			// Token: 0x040002EE RID: 750
			internal DeflateFlavor Flavor;

			// Token: 0x040002EF RID: 751
			private static readonly DeflateManager.Config[] Table;
		}
	}
}
