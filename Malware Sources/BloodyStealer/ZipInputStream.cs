using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zlib;

namespace Ionic.Zip
{
	// Token: 0x02000054 RID: 84
	public class ZipInputStream : Stream
	{
		// Token: 0x0600027E RID: 638 RVA: 0x0000F774 File Offset: 0x0000D974
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipInputStream(Stream stream) : this(stream, false)
		{
		}

		// Token: 0x0600027F RID: 639 RVA: 0x0000F780 File Offset: 0x0000D980
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipInputStream(string fileName)
		{
			Stream stream = delegate0134.f000170(fileName, FileMode.Open, FileAccess.Read, FileShare.Read);
			this._Init(stream, false, fileName);
		}

		// Token: 0x06000280 RID: 640 RVA: 0x0000F7AC File Offset: 0x0000D9AC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipInputStream(Stream stream, bool leaveOpen)
		{
			this._Init(stream, leaveOpen, null);
		}

		// Token: 0x06000281 RID: 641 RVA: 0x0000F7C0 File Offset: 0x0000D9C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _Init(Stream stream, bool leaveOpen, string name)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_9E;
					case 1:
						goto IL_D2;
					case 2:
						this._provisionalAlternateEncoding = delegate0c7.f000090(c0000c0.m00000f("ØC\0P\u0095^"));
						this._leaveUnderlyingStreamOpen = leaveOpen;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this._inputStream = stream;
						if (!this._inputStream.CanRead)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						this._container = new ZipContainer(this);
						num = delegate0da.f0000d7(-2);
						continue;
					}
					break;
				}
			}
			IL_9E:
			throw new ZipException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnA}ä9GôçN\u0014H¥~Ì1Ò\u0012ð"));
			IL_D2:
			this._findRequired = true;
			this._name = (name ?? c0000c0.m00000f("¹r9\u0016Ã\b^\u001e"));
		}

		// Token: 0x06000282 RID: 642 RVA: 0x0000F8C0 File Offset: 0x0000DAC0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			return delegate0d5.f0000c9(c0000c0.m00000f("Ëh=-È\u0019FCÿ\u0006<Iiúw]í²\u0013NA¡{Û6ñ\a»y\u0090\u0098\u0087`\u001ecE"), this._name, this._leaveUnderlyingStreamOpen);
		}

		// Token: 0x17000072 RID: 114
		// (get) Token: 0x06000283 RID: 643 RVA: 0x0000F8F4 File Offset: 0x0000DAF4
		// (set) Token: 0x06000284 RID: 644 RVA: 0x0000F908 File Offset: 0x0000DB08
		public Encoding ProvisionalAlternateEncoding
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._provisionalAlternateEncoding;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._provisionalAlternateEncoding = value;
			}
		}

		// Token: 0x17000073 RID: 115
		// (get) Token: 0x06000285 RID: 645 RVA: 0x0000F91C File Offset: 0x0000DB1C
		// (set) Token: 0x06000286 RID: 646 RVA: 0x0000F930 File Offset: 0x0000DB30
		public int CodecBufferSize { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x17000074 RID: 116
		// (set) Token: 0x06000287 RID: 647 RVA: 0x0000F944 File Offset: 0x0000DB44
		public string Password
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							this._exceptionPending = true;
							num = delegate0da.f0000d7(-2);
							continue;
						case 1:
							goto IL_88;
						case 2:
							goto IL_36;
						case 3:
							if (this._closed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_88;
						}
						break;
					}
				}
				IL_36:
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
				IL_88:
				this._password = value;
			}
		}

		// Token: 0x06000288 RID: 648 RVA: 0x0000F9E0 File Offset: 0x0000DBE0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _SetupStream()
		{
			this._crcStream = this._currentEntry.InternalOpenReader(this._password);
			this._LeftToRead = this._crcStream.Length;
			this._needSetup = false;
		}

		// Token: 0x17000075 RID: 117
		// (get) Token: 0x06000289 RID: 649 RVA: 0x0000FA1C File Offset: 0x0000DC1C
		internal Stream ReadStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._inputStream;
			}
		}

		// Token: 0x0600028A RID: 650 RVA: 0x0000FA30 File Offset: 0x0000DC30
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						this._SetupStream();
						goto IL_D2;
					case 1:
						goto IL_108;
					case 2:
						num2 = (int)this._LeftToRead;
						goto IL_43;
					case 3:
						if (this._closed)
						{
							goto Block_2;
						}
						if (this._needSetup)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_D2;
					}
					break;
					IL_43:
					int count2 = num2;
					num3 = this._crcStream.Read(buffer, offset, count2);
					this._LeftToRead -= (long)num3;
					if (this._LeftToRead == 0L)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					return num3;
					IL_D2:
					if (this._LeftToRead == 0L)
					{
						return 0;
					}
					if (this._LeftToRead > (long)count)
					{
						num2 = count;
						goto IL_43;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_2:
			this._exceptionPending = true;
			throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
			IL_108:
			int crc = this._crcStream.Crc;
			this._currentEntry.VerifyCrcAfterExtract(crc);
			this._inputStream.Seek(this._endOfEntry, SeekOrigin.Begin);
			return num3;
		}

		// Token: 0x0600028B RID: 651 RVA: 0x0000FB74 File Offset: 0x0000DD74
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry GetNextEntry()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						long num2;
						if (num2 == -1L)
						{
							goto Block_2;
						}
						goto IL_36;
					}
					case 1:
						goto IL_B6;
					case 2:
						goto IL_36;
					case 3:
						if (this._findRequired)
						{
							long num2 = SharedUtilities.FindSignature(this._inputStream, 67324752);
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_46;
					}
					break;
					IL_46:
					this._currentEntry = ZipEntry.ReadEntry(this._container, !this._firstEntry);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_36:
					this._inputStream.Seek(-4L, SeekOrigin.Current);
					goto IL_46;
				}
			}
			Block_2:
			return null;
			IL_B6:
			this._endOfEntry = this._inputStream.Position;
			this._firstEntry = true;
			this._needSetup = true;
			this._findRequired = false;
			return this._currentEntry;
		}

		// Token: 0x0600028C RID: 652 RVA: 0x0000FC64 File Offset: 0x0000DE64
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected override void Dispose(bool notCalledFromFinalizer)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_66;
					case 1:
						goto IL_8F;
					case 2:
						return;
					case 3:
						if (this._closed)
						{
							return;
						}
						goto IL_66;
					}
					break;
					IL_66:
					if (!notCalledFromFinalizer)
					{
						goto IL_9A;
					}
					if (this._exceptionPending)
					{
						num = delegate0da.f0000d7(-2);
					}
					else
					{
						if (this._leaveUnderlyingStreamOpen)
						{
							goto IL_9A;
						}
						num = delegate0da.f0000d7(-1);
					}
				}
			}
			return;
			IL_8F:
			this._inputStream.Dispose();
			IL_9A:
			this._closed = true;
		}

		// Token: 0x17000076 RID: 118
		// (get) Token: 0x0600028D RID: 653 RVA: 0x0000FD14 File Offset: 0x0000DF14
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return true;
			}
		}

		// Token: 0x17000077 RID: 119
		// (get) Token: 0x0600028E RID: 654 RVA: 0x0000FD24 File Offset: 0x0000DF24
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._inputStream.CanSeek;
			}
		}

		// Token: 0x17000078 RID: 120
		// (get) Token: 0x0600028F RID: 655 RVA: 0x0000FD3C File Offset: 0x0000DF3C
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x17000079 RID: 121
		// (get) Token: 0x06000290 RID: 656 RVA: 0x0000FD4C File Offset: 0x0000DF4C
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._inputStream.Length;
			}
		}

		// Token: 0x1700007A RID: 122
		// (get) Token: 0x06000291 RID: 657 RVA: 0x0000FD64 File Offset: 0x0000DF64
		// (set) Token: 0x06000292 RID: 658 RVA: 0x0000FD7C File Offset: 0x0000DF7C
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._inputStream.Position;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this.Seek(value, SeekOrigin.Begin);
			}
		}

		// Token: 0x06000293 RID: 659 RVA: 0x0000FD94 File Offset: 0x0000DF94
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			throw new NotSupportedException(c0000c0.m00000f("×m8\u0017Î"));
		}

		// Token: 0x06000294 RID: 660 RVA: 0x0000FDB0 File Offset: 0x0000DFB0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			throw new NotSupportedException(c0000c0.m00000f("Æs$\u0010Ã"));
		}

		// Token: 0x06000295 RID: 661 RVA: 0x0000FDCC File Offset: 0x0000DFCC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			this._findRequired = true;
			return this._inputStream.Seek(offset, origin);
		}

		// Token: 0x06000296 RID: 662 RVA: 0x0000FDF0 File Offset: 0x0000DFF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotSupportedException();
		}

		// Token: 0x06000297 RID: 663 RVA: 0x0000FE04 File Offset: 0x0000E004
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipInputStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x040000D7 RID: 215
		private Stream _inputStream;

		// Token: 0x040000D8 RID: 216
		private Encoding _provisionalAlternateEncoding;

		// Token: 0x040000D9 RID: 217
		private ZipEntry _currentEntry;

		// Token: 0x040000DA RID: 218
		private bool _firstEntry;

		// Token: 0x040000DB RID: 219
		private bool _needSetup;

		// Token: 0x040000DC RID: 220
		private ZipContainer _container;

		// Token: 0x040000DD RID: 221
		private CrcCalculatorStream _crcStream;

		// Token: 0x040000DE RID: 222
		private long _LeftToRead;

		// Token: 0x040000DF RID: 223
		private string _password;

		// Token: 0x040000E0 RID: 224
		private long _endOfEntry;

		// Token: 0x040000E1 RID: 225
		private string _name;

		// Token: 0x040000E2 RID: 226
		private bool _leaveUnderlyingStreamOpen;

		// Token: 0x040000E3 RID: 227
		private bool _closed;

		// Token: 0x040000E4 RID: 228
		private bool _findRequired;

		// Token: 0x040000E5 RID: 229
		private bool _exceptionPending;

		// Token: 0x040000E6 RID: 230
		[CompilerGenerated]
		private int f000041;
	}
}
