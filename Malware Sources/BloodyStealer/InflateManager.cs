using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x020000A3 RID: 163
	internal sealed class InflateManager
	{
		// Token: 0x17000147 RID: 327
		// (get) Token: 0x0600064B RID: 1611 RVA: 0x0002EBC4 File Offset: 0x0002CDC4
		// (set) Token: 0x0600064C RID: 1612 RVA: 0x0002EBDC File Offset: 0x0002CDDC
		internal bool HandleRfc1950HeaderBytes
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._handleRfc1950HeaderBytes;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._handleRfc1950HeaderBytes = value;
			}
		}

		// Token: 0x0600064D RID: 1613 RVA: 0x0002EBF0 File Offset: 0x0002CDF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public InflateManager()
		{
		}

		// Token: 0x0600064E RID: 1614 RVA: 0x0002EC00 File Offset: 0x0002CE00
		[MethodImpl(MethodImplOptions.NoInlining)]
		public InflateManager(bool expectRfc1950HeaderBytes)
		{
			this._handleRfc1950HeaderBytes = expectRfc1950HeaderBytes;
		}

		// Token: 0x0600064F RID: 1615 RVA: 0x0002EC18 File Offset: 0x0002CE18
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Reset()
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._codec.Message = null;
						this.mode = (this.HandleRfc1950HeaderBytes ? InflateManager.InflateManagerMode.METHOD : InflateManager.InflateManagerMode.BLOCKS);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						return result;
					case 2:
						this.blocks.Reset();
						result = 0;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this._codec.TotalBytesIn = (this._codec.TotalBytesOut = 0L);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			return result;
		}

		// Token: 0x06000650 RID: 1616 RVA: 0x0002ECF4 File Offset: 0x0002CEF4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int End()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							this.blocks.Free();
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_37;
					}
					case 1:
						return 0;
					case 2:
						goto IL_37;
					case 3:
					{
						bool flag = this.blocks == null;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_37:
					this.blocks = null;
					num = delegate0da.f0000d7(-1);
				}
			}
			return 0;
		}

		// Token: 0x06000651 RID: 1617 RVA: 0x0002EDA8 File Offset: 0x0002CFA8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Initialize(ZlibCodec codec, int p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (p1 < 8 || p1 > 15)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						this.wbits = p1;
						this.blocks = new InflateBlocks(codec, this.HandleRfc1950HeaderBytes ? this : null, 1 << p1);
						num = delegate0da.f0000d7(-1);
						continue;
					case 1:
						goto IL_F9;
					case 2:
						goto IL_36;
					case 3:
						this._codec = codec;
						this._codec.Message = null;
						this.blocks = null;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			this.End();
			throw new ZlibException(c0000c0.m00000f("Ó`)DÑ\0]SÃ\u0005n_aí(I"));
			IL_F9:
			this.Reset();
			return 0;
		}

		// Token: 0x06000652 RID: 1618 RVA: 0x0002EEB8 File Offset: 0x0002D0B8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Inflate(FlushType flush)
		{
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num2;
					int num3;
					switch (num)
					{
					case 0:
						if (!flag)
						{
							this.mode = InflateManager.InflateManagerMode.BAD;
							this._codec.Message = c0000c0.m00000f("øo.\vÔ\u001bVTØR&Iió(\u0015¶á\u0006\u0003N¯");
							this.marker = 5;
							goto IL_F9;
						}
						this.mode = (((num2 & 32) == 0) ? InflateManager.InflateManagerMode.BLOCKS : InflateManager.InflateManagerMode.DICT4);
						goto IL_F9;
					case 1:
						goto IL_F9;
					case 2:
						goto IL_36;
					case 3:
						flag = (this._codec.InputBuffer != null);
						if (!flag)
						{
							goto Block_7;
						}
						num3 = 0;
						num4 = -5;
						goto IL_F9;
					}
					break;
					for (;;)
					{
						IL_F9:
						flag = true;
						switch (this.mode)
						{
						case InflateManager.InflateManagerMode.METHOD:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_8;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							flag = (((this.method = (int)this._codec.InputBuffer[this._codec.NextIn++]) & 15) == 8);
							if (!flag)
							{
								this.mode = InflateManager.InflateManagerMode.BAD;
								this._codec.Message = delegate0101.f000127(c0000c0.m00000f("äo&\nÉ\u001e]\u0017Ï\u001d#\\zò>\u0014ÿí\0F@¡nÅ<ÚWö'À\u0098\u0086'ox\u0011±"), this.method);
								this.marker = 5;
								continue;
							}
							flag = ((this.method >> 4) + 8 <= this.wbits);
							if (!flag)
							{
								this.mode = InflateManager.InflateManagerMode.BAD;
								this._codec.Message = delegate0101.f000127(c0000c0.m00000f("øo;\u0005Ê\0W\u0017Û\u001b Hgàm\u0014ÿø\vF\u0005¿*Ðz"), (this.method >> 4) + 8);
								this.marker = 5;
								continue;
							}
							this.mode = InflateManager.InflateManagerMode.FLAG;
							continue;
						case InflateManager.InflateManagerMode.FLAG:
							goto IL_3AE;
						case InflateManager.InflateManagerMode.DICT4:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_14;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							this.expectedCheck = (uint)((long)((long)this._codec.InputBuffer[this._codec.NextIn++] << 24) & (long)((ulong)-16777216));
							this.mode = InflateManager.InflateManagerMode.DICT3;
							continue;
						case InflateManager.InflateManagerMode.DICT3:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_15;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							this.expectedCheck += (uint)((int)this._codec.InputBuffer[this._codec.NextIn++] << 16 & 16711680);
							this.mode = InflateManager.InflateManagerMode.DICT2;
							continue;
						case InflateManager.InflateManagerMode.DICT2:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_16;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							this.expectedCheck += (uint)((int)this._codec.InputBuffer[this._codec.NextIn++] << 8 & 65280);
							this.mode = InflateManager.InflateManagerMode.DICT1;
							continue;
						case InflateManager.InflateManagerMode.DICT1:
							goto IL_640;
						case InflateManager.InflateManagerMode.DICT0:
							goto IL_A1;
						case InflateManager.InflateManagerMode.BLOCKS:
							num4 = this.blocks.Process(num4);
							flag = (num4 != -3);
							if (!flag)
							{
								this.mode = InflateManager.InflateManagerMode.BAD;
								this.marker = 0;
								continue;
							}
							flag = (num4 != 0);
							if (!flag)
							{
								num4 = num3;
							}
							flag = (num4 == 1);
							if (!flag)
							{
								goto Block_4;
							}
							num4 = num3;
							this.computedCheck = this.blocks.Reset();
							flag = this.HandleRfc1950HeaderBytes;
							if (!flag)
							{
								goto Block_5;
							}
							this.mode = InflateManager.InflateManagerMode.CHECK4;
							continue;
						case InflateManager.InflateManagerMode.CHECK4:
							goto IL_1AF;
						case InflateManager.InflateManagerMode.CHECK3:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_18;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							this.expectedCheck += (uint)((int)this._codec.InputBuffer[this._codec.NextIn++] << 16 & 16711680);
							this.mode = InflateManager.InflateManagerMode.CHECK2;
							continue;
						case InflateManager.InflateManagerMode.CHECK2:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_19;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							this.expectedCheck += (uint)((int)this._codec.InputBuffer[this._codec.NextIn++] << 8 & 65280);
							this.mode = InflateManager.InflateManagerMode.CHECK1;
							continue;
						case InflateManager.InflateManagerMode.CHECK1:
							flag = (this._codec.AvailableBytesIn != 0);
							if (!flag)
							{
								goto Block_20;
							}
							num4 = num3;
							this._codec.AvailableBytesIn--;
							this._codec.TotalBytesIn += 1L;
							this.expectedCheck += (uint)(this._codec.InputBuffer[this._codec.NextIn++] & byte.MaxValue);
							flag = (this.computedCheck == this.expectedCheck);
							if (!flag)
							{
								this.mode = InflateManager.InflateManagerMode.BAD;
								this._codec.Message = c0000c0.m00000f("øo.\vÔ\u001bVTØR*M|öm\u0004þç\r\r");
								this.marker = 5;
								continue;
							}
							goto IL_86F;
						case InflateManager.InflateManagerMode.DONE:
							goto IL_87F;
						case InflateManager.InflateManagerMode.BAD:
							goto IL_887;
						}
						goto Block_2;
					}
					IL_1AF:
					flag = (this._codec.AvailableBytesIn != 0);
					if (!flag)
					{
						goto Block_6;
					}
					num4 = num3;
					this._codec.AvailableBytesIn--;
					this._codec.TotalBytesIn += 1L;
					this.expectedCheck = (uint)((long)((long)this._codec.InputBuffer[this._codec.NextIn++] << 24) & (long)((ulong)-16777216));
					this.mode = InflateManager.InflateManagerMode.CHECK3;
					num = delegate0da.f0000d7(-1);
					continue;
					IL_3AE:
					flag = (this._codec.AvailableBytesIn != 0);
					if (!flag)
					{
						goto Block_11;
					}
					num4 = num3;
					this._codec.AvailableBytesIn--;
					this._codec.TotalBytesIn += 1L;
					num2 = (int)(this._codec.InputBuffer[this._codec.NextIn++] & byte.MaxValue);
					flag = (((this.method << 8) + num2) % 31 == 0);
					num = delegate0da.f0000d7(0);
					continue;
					IL_640:
					flag = (this._codec.AvailableBytesIn != 0);
					if (!flag)
					{
						goto Block_17;
					}
					num4 = num3;
					this._codec.AvailableBytesIn--;
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_36:
			this._codec.TotalBytesIn += 1L;
			this.expectedCheck += (uint)(this._codec.InputBuffer[this._codec.NextIn++] & byte.MaxValue);
			this._codec._Adler32 = this.expectedCheck;
			this.mode = InflateManager.InflateManagerMode.DICT0;
			return 2;
			IL_A1:
			this.mode = InflateManager.InflateManagerMode.BAD;
			this._codec.Message = c0000c0.m00000f("ÿd(\0\u0086\rZTØ\u001b!Biå4");
			this.marker = 0;
			return -2;
			Block_2:
			throw new ZlibException(c0000c0.m00000f("Âu?\u0001Ç\u0004\u0013RÞ\0!^&"));
			Block_4:
			return num4;
			Block_5:
			this.mode = InflateManager.InflateManagerMode.DONE;
			return 1;
			Block_6:
			return num4;
			Block_7:
			throw new ZlibException(c0000c0.m00000f("Øo=\u0011Ò+FQÊ\u0017<\faäm\tãî\u0002H\r"));
			Block_8:
			return num4;
			Block_11:
			return num4;
			Block_14:
			return num4;
			Block_15:
			return num4;
			Block_16:
			return num4;
			Block_17:
			return num4;
			Block_18:
			return num4;
			Block_19:
			return num4;
			Block_20:
			return num4;
			IL_86F:
			this.mode = InflateManager.InflateManagerMode.DONE;
			return 1;
			IL_87F:
			return 1;
			IL_887:
			throw new ZlibException(string.Format(c0000c0.m00000f("Ó`)DÕ\u001dRCÉRfW8êd"), this._codec.Message));
		}

		// Token: 0x06000653 RID: 1619 RVA: 0x0002F770 File Offset: 0x0002D970
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int SetDictionary(byte[] dictionary)
		{
			int num2;
			int start;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_BA;
					case 1:
						goto IL_4B;
					case 2:
					{
						bool flag = num2 < 1 << this.wbits;
						if (flag)
						{
							goto IL_4B;
						}
						num2 = (1 << this.wbits) - 1;
						start = dictionary.Length - num2;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
						start = 0;
						num2 = dictionary.Length;
						if (this.mode != InflateManager.InflateManagerMode.DICT0)
						{
							goto Block_1;
						}
						goto IL_BA;
					}
					break;
					IL_BA:
					if (Adler.Adler32(1U, dictionary, 0, dictionary.Length) != this._codec._Adler32)
					{
						goto Block_2;
					}
					this._codec._Adler32 = Adler.Adler32(0U, null, 0, 0);
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_4B:
			this.blocks.SetDictionary(dictionary, start, num2);
			this.mode = InflateManager.InflateManagerMode.BLOCKS;
			return 0;
			Block_1:
			throw new ZlibException(c0000c0.m00000f("Âu?\u0001Ç\u0004\u0013RÞ\0!^&"));
			Block_2:
			return -3;
		}

		// Token: 0x06000654 RID: 1620 RVA: 0x0002F888 File Offset: 0x0002DA88
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Sync()
		{
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num3;
					switch (num)
					{
					case 0:
						goto IL_49;
					case 1:
						goto IL_183;
					case 2:
						goto IL_41;
					case 3:
						if (this.mode != InflateManager.InflateManagerMode.BAD)
						{
							this.mode = InflateManager.InflateManagerMode.BAD;
							this.marker = 0;
						}
						if ((num2 = this._codec.AvailableBytesIn) == 0)
						{
							goto Block_4;
						}
						num3 = this._codec.NextIn;
						num4 = this.marker;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_49:
					if (num2 == 0 || num4 >= 4)
					{
						this._codec.TotalBytesIn += (long)(num3 - this._codec.NextIn);
						this._codec.NextIn = num3;
						this._codec.AvailableBytesIn = num2;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					if (this._codec.InputBuffer[num3] == InflateManager.mark[num4])
					{
						num4++;
					}
					else
					{
						if (this._codec.InputBuffer[num3] != 0)
						{
							num4 = 0;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						num4 = 4 - num4;
					}
					IL_41:
					num3++;
					num2--;
					goto IL_49;
				}
			}
			Block_4:
			return -5;
			IL_183:
			this.marker = num4;
			int result;
			if (num4 != 4)
			{
				result = -3;
			}
			else
			{
				long totalBytesIn = this._codec.TotalBytesIn;
				long totalBytesOut = this._codec.TotalBytesOut;
				this.Reset();
				this._codec.TotalBytesIn = totalBytesIn;
				this._codec.TotalBytesOut = totalBytesOut;
				this.mode = InflateManager.InflateManagerMode.BLOCKS;
				result = 0;
			}
			return result;
		}

		// Token: 0x06000655 RID: 1621 RVA: 0x0002FA7C File Offset: 0x0002DC7C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int SyncPoint(ZlibCodec p0)
		{
			return this.blocks.SyncPoint();
		}

		// Token: 0x06000656 RID: 1622 RVA: 0x0002FA98 File Offset: 0x0002DC98
		// Note: this type is marked as 'beforefieldinit'.
		static InflateManager()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			InflateManager.mark = new byte[]
			{
				0,
				0,
				byte.MaxValue,
				byte.MaxValue
			};
		}

		// Token: 0x0400032A RID: 810
		private const int PRESET_DICT = 32;

		// Token: 0x0400032B RID: 811
		private const int Z_DEFLATED = 8;

		// Token: 0x0400032C RID: 812
		private InflateManager.InflateManagerMode mode;

		// Token: 0x0400032D RID: 813
		internal ZlibCodec _codec;

		// Token: 0x0400032E RID: 814
		internal int method;

		// Token: 0x0400032F RID: 815
		internal uint computedCheck;

		// Token: 0x04000330 RID: 816
		internal uint expectedCheck;

		// Token: 0x04000331 RID: 817
		internal int marker;

		// Token: 0x04000332 RID: 818
		private bool _handleRfc1950HeaderBytes = true;

		// Token: 0x04000333 RID: 819
		internal int wbits;

		// Token: 0x04000334 RID: 820
		internal InflateBlocks blocks;

		// Token: 0x04000335 RID: 821
		private static readonly byte[] mark;

		// Token: 0x020000A4 RID: 164
		private enum InflateManagerMode
		{
			// Token: 0x04000337 RID: 823
			METHOD,
			// Token: 0x04000338 RID: 824
			FLAG,
			// Token: 0x04000339 RID: 825
			DICT4,
			// Token: 0x0400033A RID: 826
			DICT3,
			// Token: 0x0400033B RID: 827
			DICT2,
			// Token: 0x0400033C RID: 828
			DICT1,
			// Token: 0x0400033D RID: 829
			DICT0,
			// Token: 0x0400033E RID: 830
			BLOCKS,
			// Token: 0x0400033F RID: 831
			CHECK4,
			// Token: 0x04000340 RID: 832
			CHECK3,
			// Token: 0x04000341 RID: 833
			CHECK2,
			// Token: 0x04000342 RID: 834
			CHECK1,
			// Token: 0x04000343 RID: 835
			DONE,
			// Token: 0x04000344 RID: 836
			BAD
		}
	}
}
