using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x020000AE RID: 174
	internal sealed class Adler
	{
		// Token: 0x06000671 RID: 1649 RVA: 0x00031348 File Offset: 0x0002F548
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static uint Adler32(uint adler, byte[] buf, int index, int len)
		{
			int num2;
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num4;
					switch (num)
					{
					case 0:
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						if (!flag)
						{
							do
							{
								num3 += (int)buf[index++];
								num2 += num3;
								flag = (--num4 != 0);
							}
							while (flag);
						}
						num3 %= Adler.f000075;
						num2 %= Adler.f000075;
						goto IL_214;
					case 2:
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num3 += (int)buf[index++];
						num2 += num3;
						num4 -= 16;
						goto IL_97;
					case 3:
						flag = (buf != null);
						if (!flag)
						{
							goto Block_2;
						}
						num3 = (int)(adler & 65535U);
						num2 = (int)(adler >> 16 & 65535U);
						goto IL_214;
					}
					break;
					IL_97:
					flag = (num4 >= 16);
					if (!flag)
					{
						flag = (num4 == 0);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					num3 += (int)buf[index++];
					num2 += num3;
					num3 += (int)buf[index++];
					num = delegate0da.f0000d7(0);
					continue;
					IL_214:
					flag = (len > 0);
					if (!flag)
					{
						goto Block_4;
					}
					num4 = ((len < Adler.NMAX) ? len : Adler.NMAX);
					len -= num4;
					goto IL_97;
				}
			}
			Block_2:
			return 1U;
			Block_4:
			return (uint)(num2 << 16 | num3);
		}

		// Token: 0x06000672 RID: 1650 RVA: 0x00031580 File Offset: 0x0002F780
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Adler()
		{
		}

		// Token: 0x06000673 RID: 1651 RVA: 0x00031588 File Offset: 0x0002F788
		// Note: this type is marked as 'beforefieldinit'.
		static Adler()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			Adler.f000075 = 65521;
			Adler.NMAX = 5552;
		}

		// Token: 0x04000395 RID: 917
		private static readonly int f000075;

		// Token: 0x04000396 RID: 918
		private static readonly int NMAX;
	}
}
