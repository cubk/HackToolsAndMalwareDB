using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Ionic.Zlib
{
	// Token: 0x02000097 RID: 151
	public class GZipStream : Stream
	{
		// Token: 0x1700013A RID: 314
		// (get) Token: 0x060005EA RID: 1514 RVA: 0x00027090 File Offset: 0x00025290
		// (set) Token: 0x060005EB RID: 1515 RVA: 0x000270A8 File Offset: 0x000252A8
		public string Comment
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._Comment;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
				IL_9F:
				this._Comment = value;
			}
		}

		// Token: 0x1700013B RID: 315
		// (get) Token: 0x060005EC RID: 1516 RVA: 0x0002715C File Offset: 0x0002535C
		// (set) Token: 0x060005ED RID: 1517 RVA: 0x00027174 File Offset: 0x00025374
		public string FileName
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._FileName;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (this._FileName == null)
							{
								goto Block_3;
							}
							if (this._FileName.IndexOf(c0000c0.m00000f("¾")) != -1)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_5C;
						case 1:
							goto IL_122;
						case 2:
							this._FileName = this._FileName.Replace(c0000c0.m00000f("¾"), c0000c0.m00000f("Í"));
							goto IL_5C;
						case 3:
							if (this._disposed)
							{
								goto Block_2;
							}
							this._FileName = value;
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
						IL_5C:
						if (!this._FileName.EndsWith(c0000c0.m00000f("Í")))
						{
							goto IL_132;
						}
						num = delegate0da.f0000d7(-1);
					}
				}
				Block_2:
				throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
				Block_3:
				return;
				IL_122:
				throw new Exception(c0000c0.m00000f("Øm!\u0001Á\b_\u0017Ê\u001b\"Ifö \u0002"));
				IL_132:
				if (this._FileName.IndexOf(c0000c0.m00000f("Í")) != -1)
				{
					this._FileName = delegate0e4.f0000f0(this._FileName);
				}
			}
		}

		// Token: 0x1700013C RID: 316
		// (get) Token: 0x060005EE RID: 1518 RVA: 0x000272E8 File Offset: 0x000254E8
		public int p000004
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f00004b;
			}
		}

		// Token: 0x060005EF RID: 1519 RVA: 0x00027300 File Offset: 0x00025500
		[MethodImpl(MethodImplOptions.NoInlining)]
		public GZipStream(Stream stream, CompressionMode mode) : this(stream, mode, CompressionLevel.f000073, false)
		{
		}

		// Token: 0x060005F0 RID: 1520 RVA: 0x0002730C File Offset: 0x0002550C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level) : this(stream, mode, level, false)
		{
		}

		// Token: 0x060005F1 RID: 1521 RVA: 0x00027318 File Offset: 0x00025518
		[MethodImpl(MethodImplOptions.NoInlining)]
		public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen) : this(stream, mode, CompressionLevel.f000073, leaveOpen)
		{
		}

		// Token: 0x060005F2 RID: 1522 RVA: 0x00027324 File Offset: 0x00025524
		[MethodImpl(MethodImplOptions.NoInlining)]
		public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
		{
			this._baseStream = new ZlibBaseStream(stream, mode, level, ZlibStreamFlavor.GZIP, leaveOpen);
		}

		// Token: 0x1700013D RID: 317
		// (get) Token: 0x060005F3 RID: 1523 RVA: 0x00027344 File Offset: 0x00025544
		// (set) Token: 0x060005F4 RID: 1524 RVA: 0x00027360 File Offset: 0x00025560
		public virtual FlushType FlushMode
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._flushMode;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
				IL_9F:
				this._baseStream._flushMode = value;
			}
		}

		// Token: 0x1700013E RID: 318
		// (get) Token: 0x060005F5 RID: 1525 RVA: 0x00027418 File Offset: 0x00025618
		// (set) Token: 0x060005F6 RID: 1526 RVA: 0x00027434 File Offset: 0x00025634
		public int BufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._bufferSize;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_99;
						case 1:
							goto IL_D6;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							if (this._baseStream._workingBuffer != null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							if (value < 1024)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_FB;
						}
						break;
					}
				}
				IL_36:
				throw new ZlibException(c0000c0.m00000f("Åi(DÑ\u0006A\\Å\u001c)\fjâ+\u0001óðN\u000f^ä{Á!Û\u0016ºn\u0098\u0090Ói\u0019"));
				IL_99:
				throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
				IL_D6:
				throw new ZlibException(string.Format(c0000c0.m00000f("Õn#CÒIQR\u008c\u0001'@dîcGí²\u0013FO½nÈ \u0081HþBË\u0086\u0096|\u0017(\u0005ÿêE\u0082\u001e\u000f½óý\\Ð\u0019Ô\u0099m÷¬Pw¿\u0091¾kÖ\u008d}"), value, 1024));
				IL_FB:
				this._baseStream._bufferSize = value;
			}
		}

		// Token: 0x1700013F RID: 319
		// (get) Token: 0x060005F7 RID: 1527 RVA: 0x00027548 File Offset: 0x00025748
		public virtual long TotalIn
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._z.TotalBytesIn;
			}
		}

		// Token: 0x17000140 RID: 320
		// (get) Token: 0x060005F8 RID: 1528 RVA: 0x00027568 File Offset: 0x00025768
		public virtual long TotalOut
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._z.TotalBytesOut;
			}
		}

		// Token: 0x060005F9 RID: 1529 RVA: 0x00027588 File Offset: 0x00025788
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected override void Dispose(bool disposing)
		{
			if (!this._disposed)
			{
				if (disposing && this._baseStream != null)
				{
					this._baseStream.Close();
					this.f00004b = this._baseStream.p000004;
				}
				this._disposed = true;
			}
		}

		// Token: 0x17000141 RID: 321
		// (get) Token: 0x060005FA RID: 1530 RVA: 0x000275E8 File Offset: 0x000257E8
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
				IL_9F:
				return this._baseStream._stream.CanRead;
			}
		}

		// Token: 0x17000142 RID: 322
		// (get) Token: 0x060005FB RID: 1531 RVA: 0x000276A8 File Offset: 0x000258A8
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x17000143 RID: 323
		// (get) Token: 0x060005FC RID: 1532 RVA: 0x000276B8 File Offset: 0x000258B8
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
				IL_9F:
				return this._baseStream._stream.CanWrite;
			}
		}

		// Token: 0x060005FD RID: 1533 RVA: 0x00027778 File Offset: 0x00025978
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
			IL_9F:
			this._baseStream.Flush();
		}

		// Token: 0x17000144 RID: 324
		// (get) Token: 0x060005FE RID: 1534 RVA: 0x00027830 File Offset: 0x00025A30
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x17000145 RID: 325
		// (get) Token: 0x060005FF RID: 1535 RVA: 0x00027844 File Offset: 0x00025A44
		// (set) Token: 0x06000600 RID: 1536 RVA: 0x00027930 File Offset: 0x00025B30
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				bool flag;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_90;
						case 1:
							goto IL_D8;
						case 2:
							goto IL_36;
						case 3:
							flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Writer);
							if (!flag)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Reader);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						break;
					}
				}
				IL_36:
				if (!flag)
				{
					return this._baseStream._z.TotalBytesIn + (long)this._baseStream._gzipHeaderByteCount;
				}
				goto IL_D8;
				IL_90:
				return this._baseStream._z.TotalBytesOut + (long)this._headerByteCount;
				IL_D8:
				return 0L;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x06000601 RID: 1537 RVA: 0x00027944 File Offset: 0x00025B44
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int result;
					switch (num)
					{
					case 0:
						goto IL_98;
					case 1:
						return result;
					case 2:
						this._firstReadDone = true;
						this.FileName = this._baseStream._GzipFileName;
						this.Comment = this._baseStream._GzipComment;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						if (this._disposed)
						{
							goto Block_1;
						}
						goto IL_98;
					}
					break;
					IL_98:
					result = this._baseStream.Read(buffer, offset, count);
					if (this._firstReadDone)
					{
						return result;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_1:
			throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
		}

		// Token: 0x06000602 RID: 1538 RVA: 0x00027A24 File Offset: 0x00025C24
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06000603 RID: 1539 RVA: 0x00027A38 File Offset: 0x00025C38
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06000604 RID: 1540 RVA: 0x00027A4C File Offset: 0x00025C4C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
						goto IL_81;
					case 1:
						goto IL_C0;
					case 2:
						if (!flag)
						{
							this._headerByteCount = this.EmitHeader();
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_D0;
					case 3:
						flag = !this._disposed;
						if (!flag)
						{
							goto Block_2;
						}
						goto IL_81;
					}
					break;
					IL_81:
					flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Undefined);
					if (flag)
					{
						goto IL_C1;
					}
					flag = !this._baseStream._wantCompress;
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_2:
			throw new ObjectDisposedException(c0000c0.m00000f("Ö[$\u0014õ\u001dARÍ\u001f"));
			IL_C0:
			IL_C1:
			this._baseStream.Write(buffer, offset, count);
			return;
			IL_D0:
			throw new InvalidOperationException();
		}

		// Token: 0x06000605 RID: 1541 RVA: 0x00027B30 File Offset: 0x00025D30
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int EmitHeader()
		{
			byte[] array;
			int num2;
			byte[] array2;
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					byte[] array3;
					int num4;
					switch (num)
					{
					case 0:
					{
						array[num2++] = 139;
						array[num2++] = 8;
						byte b = 0;
						if (this.Comment != null)
						{
							b ^= 16;
						}
						if (this.FileName != null)
						{
							b ^= 8;
						}
						array[num2++] = b;
						if (this.LastModified == null)
						{
							this.LastModified = new DateTime?(delegate0cf.f0000b8());
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_36;
					}
					case 1:
						goto IL_225;
					case 2:
						goto IL_36;
					case 3:
					{
						array2 = ((this.Comment == null) ? null : delegate0d7.f0000d2(GZipStream.f000069, this.Comment));
						array3 = ((this.FileName == null) ? null : delegate0d7.f0000d2(GZipStream.f000069, this.FileName));
						num3 = ((this.Comment == null) ? 0 : (array2.Length + 1));
						num4 = ((this.FileName == null) ? 0 : (array3.Length + 1));
						int num5 = 10 + num3 + num4;
						array = new byte[num5];
						num2 = 0;
						array[num2++] = 31;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_36:
					int p = (int)(this.LastModified.Value - GZipStream._unixEpoch).TotalSeconds;
					delegate0fe.f000121(delegate0136.f000173(p), 0, array, num2, 4);
					num2 += 4;
					array[num2++] = 0;
					array[num2++] = byte.MaxValue;
					if (num4 == 0)
					{
						goto IL_230;
					}
					delegate0fe.f000121(array3, 0, array, num2, num4 - 1);
					num2 += num4 - 1;
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_225:
			array[num2++] = 0;
			IL_230:
			if (num3 != 0)
			{
				delegate0fe.f000121(array2, 0, array, num2, num3 - 1);
				num2 += num3 - 1;
				array[num2++] = 0;
			}
			this._baseStream._stream.Write(array, 0, array.Length);
			return array.Length;
		}

		// Token: 0x06000606 RID: 1542 RVA: 0x00027DC0 File Offset: 0x00025FC0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] CompressString(string p0)
		{
			MemoryStream memoryStream = new MemoryStream();
			Stream compressor = new GZipStream(memoryStream, CompressionMode.Compress, CompressionLevel.BestCompression);
			ZlibBaseStream.CompressString(p0, compressor);
			return delegate0c8.f000092(memoryStream);
		}

		// Token: 0x06000607 RID: 1543 RVA: 0x00027DF4 File Offset: 0x00025FF4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] CompressBuffer(byte[] p0)
		{
			MemoryStream memoryStream = new MemoryStream();
			Stream compressor = new GZipStream(memoryStream, CompressionMode.Compress, CompressionLevel.BestCompression);
			ZlibBaseStream.CompressBuffer(p0, compressor);
			return delegate0c8.f000092(memoryStream);
		}

		// Token: 0x06000608 RID: 1544 RVA: 0x00027E28 File Offset: 0x00026028
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string UncompressString(byte[] compressed)
		{
			MemoryStream stream = new MemoryStream(compressed);
			Stream decompressor = new GZipStream(stream, CompressionMode.Decompress);
			return ZlibBaseStream.UncompressString(compressed, decompressor);
		}

		// Token: 0x06000609 RID: 1545 RVA: 0x00027E50 File Offset: 0x00026050
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] UncompressBuffer(byte[] compressed)
		{
			MemoryStream stream = new MemoryStream(compressed);
			Stream decompressor = new GZipStream(stream, CompressionMode.Decompress);
			return ZlibBaseStream.UncompressBuffer(compressed, decompressor);
		}

		// Token: 0x0600060A RID: 1546 RVA: 0x00027E78 File Offset: 0x00026078
		// Note: this type is marked as 'beforefieldinit'.
		static GZipStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			GZipStream._unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
			GZipStream.f000069 = delegate0c7.f000090(c0000c0.m00000f("ør\"I\u009eQ\u0006\u000e\u0081C"));
		}

		// Token: 0x0400027D RID: 637
		public DateTime? LastModified;

		// Token: 0x0400027E RID: 638
		private int _headerByteCount;

		// Token: 0x0400027F RID: 639
		internal ZlibBaseStream _baseStream;

		// Token: 0x04000280 RID: 640
		private bool _disposed;

		// Token: 0x04000281 RID: 641
		private bool _firstReadDone;

		// Token: 0x04000282 RID: 642
		private string _FileName;

		// Token: 0x04000283 RID: 643
		private string _Comment;

		// Token: 0x04000284 RID: 644
		private int f00004b;

		// Token: 0x04000285 RID: 645
		internal static readonly DateTime _unixEpoch;

		// Token: 0x04000286 RID: 646
		internal static readonly Encoding f000069;
	}
}
