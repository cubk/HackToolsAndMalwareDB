using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x020000AF RID: 175
	public class ZlibStream : Stream
	{
		// Token: 0x06000674 RID: 1652 RVA: 0x000315A8 File Offset: 0x0002F7A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibStream(Stream stream, CompressionMode mode) : this(stream, mode, CompressionLevel.f000073, false)
		{
		}

		// Token: 0x06000675 RID: 1653 RVA: 0x000315B4 File Offset: 0x0002F7B4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level) : this(stream, mode, level, false)
		{
		}

		// Token: 0x06000676 RID: 1654 RVA: 0x000315C0 File Offset: 0x0002F7C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibStream(Stream stream, CompressionMode mode, bool leaveOpen) : this(stream, mode, CompressionLevel.f000073, leaveOpen)
		{
		}

		// Token: 0x06000677 RID: 1655 RVA: 0x000315CC File Offset: 0x0002F7CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
		{
			this._baseStream = new ZlibBaseStream(stream, mode, level, ZlibStreamFlavor.ZLIB, leaveOpen);
		}

		// Token: 0x17000148 RID: 328
		// (get) Token: 0x06000678 RID: 1656 RVA: 0x000315EC File Offset: 0x0002F7EC
		// (set) Token: 0x06000679 RID: 1657 RVA: 0x00031608 File Offset: 0x0002F808
		public virtual FlushType FlushMode
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._flushMode;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
				IL_9F:
				this._baseStream._flushMode = value;
			}
		}

		// Token: 0x17000149 RID: 329
		// (get) Token: 0x0600067A RID: 1658 RVA: 0x000316C0 File Offset: 0x0002F8C0
		// (set) Token: 0x0600067B RID: 1659 RVA: 0x000316DC File Offset: 0x0002F8DC
		public int BufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._bufferSize;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_99;
						case 1:
							goto IL_D6;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							if (this._baseStream._workingBuffer != null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							if (value < 1024)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_FB;
						}
						break;
					}
				}
				IL_36:
				throw new ZlibException(c0000c0.m00000f("Åi(DÑ\u0006A\\Å\u001c)\fjâ+\u0001óðN\u000f^ä{Á!Û\u0016ºn\u0098\u0090Ói\u0019"));
				IL_99:
				throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
				IL_D6:
				throw new ZlibException(string.Format(c0000c0.m00000f("Õn#CÒIQR\u008c\u0001'@dîcGí²\u0013FO½nÈ \u0081HþBË\u0086\u0096|\u0017(\u0005ÿêE\u0082\u001e\u000f½óý\\Ð\u0019Ô\u0099m÷¬Pw¿\u0091¾kÖ\u008d}"), value, 1024));
				IL_FB:
				this._baseStream._bufferSize = value;
			}
		}

		// Token: 0x1700014A RID: 330
		// (get) Token: 0x0600067C RID: 1660 RVA: 0x000317F0 File Offset: 0x0002F9F0
		public virtual long TotalIn
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._z.TotalBytesIn;
			}
		}

		// Token: 0x1700014B RID: 331
		// (get) Token: 0x0600067D RID: 1661 RVA: 0x00031810 File Offset: 0x0002FA10
		public virtual long TotalOut
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._z.TotalBytesOut;
			}
		}

		// Token: 0x0600067E RID: 1662 RVA: 0x00031830 File Offset: 0x0002FA30
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected override void Dispose(bool disposing)
		{
			if (!this._disposed)
			{
				if (disposing && this._baseStream != null)
				{
					this._baseStream.Close();
				}
				this._disposed = true;
			}
		}

		// Token: 0x1700014C RID: 332
		// (get) Token: 0x0600067F RID: 1663 RVA: 0x00031880 File Offset: 0x0002FA80
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
				IL_9F:
				return this._baseStream._stream.CanRead;
			}
		}

		// Token: 0x1700014D RID: 333
		// (get) Token: 0x06000680 RID: 1664 RVA: 0x00031940 File Offset: 0x0002FB40
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x1700014E RID: 334
		// (get) Token: 0x06000681 RID: 1665 RVA: 0x00031950 File Offset: 0x0002FB50
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
				IL_9F:
				return this._baseStream._stream.CanWrite;
			}
		}

		// Token: 0x06000682 RID: 1666 RVA: 0x00031A10 File Offset: 0x0002FC10
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
			IL_9F:
			this._baseStream.Flush();
		}

		// Token: 0x1700014F RID: 335
		// (get) Token: 0x06000683 RID: 1667 RVA: 0x00031AC8 File Offset: 0x0002FCC8
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x17000150 RID: 336
		// (get) Token: 0x06000684 RID: 1668 RVA: 0x00031ADC File Offset: 0x0002FCDC
		// (set) Token: 0x06000685 RID: 1669 RVA: 0x00031BB0 File Offset: 0x0002FDB0
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				bool flag;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_83;
						case 1:
							goto IL_C3;
						case 2:
							goto IL_36;
						case 3:
							flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Writer);
							if (!flag)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Reader);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						break;
					}
				}
				IL_36:
				if (!flag)
				{
					return this._baseStream._z.TotalBytesIn;
				}
				goto IL_C3;
				IL_83:
				return this._baseStream._z.TotalBytesOut;
				IL_C3:
				return 0L;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x06000686 RID: 1670 RVA: 0x00031BC4 File Offset: 0x0002FDC4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
			IL_9F:
			return this._baseStream.Read(buffer, offset, count);
		}

		// Token: 0x06000687 RID: 1671 RVA: 0x00031C80 File Offset: 0x0002FE80
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06000688 RID: 1672 RVA: 0x00031C94 File Offset: 0x0002FE94
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06000689 RID: 1673 RVA: 0x00031CA8 File Offset: 0x0002FEA8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Ëm$\u0006õ\u001dARÍ\u001f"));
			IL_9F:
			this._baseStream.Write(buffer, offset, count);
		}

		// Token: 0x0600068A RID: 1674 RVA: 0x00031D64 File Offset: 0x0002FF64
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] CompressString(string p0)
		{
			MemoryStream memoryStream = new MemoryStream();
			Stream compressor = new ZlibStream(memoryStream, CompressionMode.Compress, CompressionLevel.BestCompression);
			ZlibBaseStream.CompressString(p0, compressor);
			return delegate0c8.f000092(memoryStream);
		}

		// Token: 0x0600068B RID: 1675 RVA: 0x00031D98 File Offset: 0x0002FF98
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] CompressBuffer(byte[] p0)
		{
			MemoryStream memoryStream = new MemoryStream();
			Stream compressor = new ZlibStream(memoryStream, CompressionMode.Compress, CompressionLevel.BestCompression);
			ZlibBaseStream.CompressBuffer(p0, compressor);
			return delegate0c8.f000092(memoryStream);
		}

		// Token: 0x0600068C RID: 1676 RVA: 0x00031DCC File Offset: 0x0002FFCC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string UncompressString(byte[] compressed)
		{
			MemoryStream stream = new MemoryStream(compressed);
			Stream decompressor = new ZlibStream(stream, CompressionMode.Decompress);
			return ZlibBaseStream.UncompressString(compressed, decompressor);
		}

		// Token: 0x0600068D RID: 1677 RVA: 0x00031DF4 File Offset: 0x0002FFF4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] UncompressBuffer(byte[] compressed)
		{
			MemoryStream stream = new MemoryStream(compressed);
			Stream decompressor = new ZlibStream(stream, CompressionMode.Decompress);
			return ZlibBaseStream.UncompressBuffer(compressed, decompressor);
		}

		// Token: 0x0600068E RID: 1678 RVA: 0x00031E1C File Offset: 0x0003001C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZlibStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000397 RID: 919
		internal ZlibBaseStream _baseStream;

		// Token: 0x04000398 RID: 920
		private bool _disposed;
	}
}
