using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zlib;

namespace Ionic.Zip
{
	// Token: 0x02000052 RID: 82
	public class ZipOutputStream : Stream
	{
		// Token: 0x0600023D RID: 573 RVA: 0x0000E5A8 File Offset: 0x0000C7A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipOutputStream(Stream stream) : this(stream, false)
		{
		}

		// Token: 0x0600023E RID: 574 RVA: 0x0000E5B4 File Offset: 0x0000C7B4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipOutputStream(string fileName)
		{
			Stream stream = delegate0134.f000170(fileName, FileMode.Create, FileAccess.ReadWrite, FileShare.None);
			this._Init(stream, false);
			this._name = fileName;
		}

		// Token: 0x0600023F RID: 575 RVA: 0x0000E5E8 File Offset: 0x0000C7E8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipOutputStream(Stream stream, bool leaveOpen)
		{
			this._Init(stream, leaveOpen);
		}

		// Token: 0x06000240 RID: 576 RVA: 0x0000E5F8 File Offset: 0x0000C7F8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _Init(Stream stream, bool leaveOpen)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._encryption = EncryptionAlgorithm.None;
						this._entriesWritten = new Dictionary<string, ZipEntry>(delegate0108.f000130());
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_D1;
					case 2:
						this._zip64 = Zip64Option.f000059;
						this._leaveUnderlyingStreamOpen = leaveOpen;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this._outputStream = (delegate012e.f000165(stream) ? stream : new CountingStream(stream));
						this.CompressionLevel = CompressionLevel.f000073;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_D1:
			this.Strategy = CompressionStrategy.f000074;
			this._name = c0000c0.m00000f("äo&\nÉ\u001e]");
			this.ParallelDeflateThreshold = -1L;
		}

		// Token: 0x06000241 RID: 577 RVA: 0x0000E6F8 File Offset: 0x0000C8F8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			return delegate0d5.f0000c9(c0000c0.m00000f("Ëh=+Ó\u001dCBØ!:^mö ]¬ù^\u001b\u0005¨\u007fÌ%Û8®rÖËÍ,JcE±"), this._name, this._leaveUnderlyingStreamOpen);
		}

		// Token: 0x17000051 RID: 81
		// (set) Token: 0x06000242 RID: 578 RVA: 0x0000E72C File Offset: 0x0000C92C
		public string Password
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_8A;
						case 1:
							return;
						case 2:
							if (this._password == null)
							{
								this._encryption = EncryptionAlgorithm.None;
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_BA;
						case 3:
							if (this._disposed)
							{
								this._exceptionPending = true;
								num = delegate0da.f0000d7(0);
								continue;
							}
							this._password = value;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						break;
					}
				}
				IL_8A:
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
				IL_BA:
				if (this._encryption == EncryptionAlgorithm.None)
				{
					this._encryption = EncryptionAlgorithm.PkzipWeak;
				}
			}
		}

		// Token: 0x17000052 RID: 82
		// (get) Token: 0x06000243 RID: 579 RVA: 0x0000E808 File Offset: 0x0000CA08
		// (set) Token: 0x06000244 RID: 580 RVA: 0x0000E81C File Offset: 0x0000CA1C
		public EncryptionAlgorithm Encryption
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._encryption;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_77;
						case 1:
							goto IL_A6;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								this._exceptionPending = true;
								num = delegate0da.f0000d7(0);
								continue;
							}
							if (value == EncryptionAlgorithm.Unsupported)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_A6;
						}
						break;
					}
				}
				IL_36:
				this._exceptionPending = true;
				throw new InvalidOperationException(c0000c0.m00000f("Èn8DË\bJ\u0017Â\u001d:\f{ò9GÓì\r\u0014T´nÄ<ÐWªx\u0098\u0097Þ|Cj\u001aùáU\u0095\u0010"));
				IL_77:
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
				IL_A6:
				this._encryption = value;
			}
		}

		// Token: 0x17000053 RID: 83
		// (get) Token: 0x06000245 RID: 581 RVA: 0x0000E8D8 File Offset: 0x0000CAD8
		// (set) Token: 0x06000246 RID: 582 RVA: 0x0000E8EC File Offset: 0x0000CAEC
		public int CodecBufferSize { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x17000054 RID: 84
		// (get) Token: 0x06000247 RID: 583 RVA: 0x0000E900 File Offset: 0x0000CB00
		// (set) Token: 0x06000248 RID: 584 RVA: 0x0000E914 File Offset: 0x0000CB14
		public CompressionStrategy Strategy { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x17000055 RID: 85
		// (get) Token: 0x06000249 RID: 585 RVA: 0x0000E928 File Offset: 0x0000CB28
		// (set) Token: 0x0600024A RID: 586 RVA: 0x0000E93C File Offset: 0x0000CB3C
		public ZipEntryTimestamp Timestamp
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._timestamp;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							this._exceptionPending = true;
							num = delegate0da.f0000d7(-2);
							continue;
						case 1:
							goto IL_88;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_88;
						}
						break;
					}
				}
				IL_36:
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
				IL_88:
				this._timestamp = value;
			}
		}

		// Token: 0x17000056 RID: 86
		// (get) Token: 0x0600024B RID: 587 RVA: 0x0000E9D8 File Offset: 0x0000CBD8
		// (set) Token: 0x0600024C RID: 588 RVA: 0x0000E9EC File Offset: 0x0000CBEC
		public CompressionLevel CompressionLevel { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x17000057 RID: 87
		// (get) Token: 0x0600024D RID: 589 RVA: 0x0000EA00 File Offset: 0x0000CC00
		// (set) Token: 0x0600024E RID: 590 RVA: 0x0000EA14 File Offset: 0x0000CC14
		public string Comment
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._comment;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							this._exceptionPending = true;
							num = delegate0da.f0000d7(-2);
							continue;
						case 1:
							goto IL_88;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_88;
						}
						break;
					}
				}
				IL_36:
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
				IL_88:
				this._comment = value;
			}
		}

		// Token: 0x17000058 RID: 88
		// (get) Token: 0x0600024F RID: 591 RVA: 0x0000EAB0 File Offset: 0x0000CCB0
		// (set) Token: 0x06000250 RID: 592 RVA: 0x0000EAC4 File Offset: 0x0000CCC4
		public Zip64Option EnableZip64
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._zip64;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							this._exceptionPending = true;
							num = delegate0da.f0000d7(-2);
							continue;
						case 1:
							goto IL_88;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_88;
						}
						break;
					}
				}
				IL_36:
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
				IL_88:
				this._zip64 = value;
			}
		}

		// Token: 0x17000059 RID: 89
		// (get) Token: 0x06000251 RID: 593 RVA: 0x0000EB60 File Offset: 0x0000CD60
		public bool OutputUsedZip64
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._anyEntriesUsedZip64 || this._directoryNeededZip64;
			}
		}

		// Token: 0x1700005A RID: 90
		// (get) Token: 0x06000252 RID: 594 RVA: 0x0000EB80 File Offset: 0x0000CD80
		// (set) Token: 0x06000253 RID: 595 RVA: 0x0000EB98 File Offset: 0x0000CD98
		public bool IgnoreCase
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return !this._DontIgnoreCase;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._DontIgnoreCase = !value;
			}
		}

		// Token: 0x1700005B RID: 91
		// (get) Token: 0x06000254 RID: 596 RVA: 0x0000EBB0 File Offset: 0x0000CDB0
		// (set) Token: 0x06000255 RID: 597 RVA: 0x0000EBDC File Offset: 0x0000CDDC
		public bool UseUnicodeAsNecessary
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._provisionalAlternateEncoding == delegate0c7.f000090(c0000c0.m00000f("ÄU\vI\u009e"));
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._provisionalAlternateEncoding = (value ? Encoding.GetEncoding(c0000c0.m00000f("ÄU\vI\u009e")) : ZipFile.DefaultEncoding);
			}
		}

		// Token: 0x1700005C RID: 92
		// (get) Token: 0x06000256 RID: 598 RVA: 0x0000EC08 File Offset: 0x0000CE08
		// (set) Token: 0x06000257 RID: 599 RVA: 0x0000EC1C File Offset: 0x0000CE1C
		public Encoding ProvisionalAlternateEncoding
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._provisionalAlternateEncoding;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._provisionalAlternateEncoding = value;
			}
		}

		// Token: 0x1700005D RID: 93
		// (get) Token: 0x06000259 RID: 601 RVA: 0x0000ECE8 File Offset: 0x0000CEE8
		// (set) Token: 0x06000258 RID: 600 RVA: 0x0000EC30 File Offset: 0x0000CE30
		public long ParallelDeflateThreshold
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._ParallelDeflateThreshold;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (value != -1L)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_A4;
						case 1:
							goto IL_9E;
						case 2:
							if (value < 65536L)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_A4;
						case 3:
							if (value != 0L)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_A4;
						}
						break;
					}
				}
				IL_9E:
				throw new ArgumentException();
				IL_A4:
				this._ParallelDeflateThreshold = value;
			}
		}

		// Token: 0x0600025A RID: 602 RVA: 0x0000ECFC File Offset: 0x0000CEFC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void InsureUniqueEntry(ZipEntry ze1)
		{
			if (this._entriesWritten.ContainsKey(ze1.FileName))
			{
				this._exceptionPending = true;
				throw new ArgumentException(delegate0101.f000127(c0000c0.m00000f("Åi(DÃ\aGEÕRiW8êjG÷î\u001c\u0003L\u00a0c\u008d6Æ\u001e­cËÃßs\u0017>\u0004ý­Z\u0099NM©çøQËC\u0091Ö"), ze1.FileName));
			}
		}

		// Token: 0x1700005E RID: 94
		// (get) Token: 0x0600025B RID: 603 RVA: 0x0000ED44 File Offset: 0x0000CF44
		internal Stream OutputStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._outputStream;
			}
		}

		// Token: 0x1700005F RID: 95
		// (get) Token: 0x0600025C RID: 604 RVA: 0x0000ED58 File Offset: 0x0000CF58
		internal string Name
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._name;
			}
		}

		// Token: 0x0600025D RID: 605 RVA: 0x0000ED6C File Offset: 0x0000CF6C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public bool ContainsEntry(string name)
		{
			return this._entriesWritten.ContainsKey(SharedUtilities.NormalizePathForUseInZipFile(name));
		}

		// Token: 0x0600025E RID: 606 RVA: 0x0000ED8C File Offset: 0x0000CF8C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				switch (delegate0da.f0000d7(-3))
				{
				case 0:
					goto IL_7F;
				case 1:
					goto IL_A1;
				case 2:
					goto IL_36;
				case 3:
					goto IL_5D;
				}
			}
			IL_36:
			if (this._currentEntry.IsDirectory)
			{
				this._exceptionPending = true;
				throw new InvalidOperationException(c0000c0.m00000f("Èn8DÅ\b]YÃ\u0006n{zþ9\u0002¾«N\u0002L°{\u008d5Ñ\u0005þvÖÃÓsC8\u0015¸ùH\u0091JM¡æ»X\u0082Q\u009d\u008a|´´ZdµË"));
			}
			goto IL_A1;
			IL_5D:
			if (this._disposed)
			{
				this._exceptionPending = true;
				throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
			}
			IL_7F:
			if (this._currentEntry == null)
			{
				this._exceptionPending = true;
				throw new InvalidOperationException(c0000c0.m00000f("Èn8DË\u001c@C\u008c\u0011/@d·\u001d\u0012âÌ\v\u001eY\u0081tÙ!Ç_÷7Ú\u0086ÐrE/LûìL\u009cW\u0003¯µÌKËA\u0091Ð0ù"));
			}
			goto IL_36;
			IL_A1:
			if (this._needToWriteEntryHeader)
			{
				this._InitiateCurrentEntry(false);
			}
			this._entryOutputStream.Write(buffer, offset, count);
		}

		// Token: 0x0600025F RID: 607 RVA: 0x0000EE5C File Offset: 0x0000D05C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry PutNextEntry(string entryName)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						this._currentEntry = ZipEntry.CreateForZipOutputStream(entryName);
						this._currentEntry._container = new ZipContainer(this);
						ZipEntry currentEntry = this._currentEntry;
						currentEntry._BitField |= 8;
						this._currentEntry.SetEntryTimes(delegate0cf.f0000b8(), delegate0cf.f0000b8(), delegate0cf.f0000b8());
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_148;
					case 2:
						this._currentEntry.CompressionLevel = this.CompressionLevel;
						this._currentEntry.Encryption = this.Encryption;
						this._currentEntry.Password = this._password;
						if (entryName.EndsWith(c0000c0.m00000f("¾")))
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_153;
					case 3:
						if (this._disposed)
						{
							goto Block_2;
						}
						this._FinishCurrentEntry();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			Block_2:
			this._exceptionPending = true;
			throw new InvalidOperationException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnDiäm\u0005óç\0FN¨uÞ6ÚY"));
			IL_148:
			this._currentEntry.MarkAsDirectory();
			IL_153:
			this._currentEntry.EmitTimesInWindowsFormatWhenSaving = ((this._timestamp & ZipEntryTimestamp.Windows) != ZipEntryTimestamp.None);
			this._currentEntry.EmitTimesInUnixFormatWhenSaving = ((this._timestamp & ZipEntryTimestamp.Unix) != ZipEntryTimestamp.None);
			this.InsureUniqueEntry(this._currentEntry);
			this._needToWriteEntryHeader = true;
			return this._currentEntry;
		}

		// Token: 0x06000260 RID: 608 RVA: 0x0000F008 File Offset: 0x0000D208
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _InitiateCurrentEntry(bool finishing)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (this._zip64 == Zip64Option.f000059)
						{
							goto Block_4;
						}
						goto IL_36;
					case 1:
						goto IL_FC;
					case 2:
						goto IL_36;
					case 3:
						this._entriesWritten.Add(this._currentEntry.FileName, this._currentEntry);
						this._entryCount++;
						if (this._entryCount > 65534)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					this._currentEntry.WriteHeader(this._outputStream, finishing ? 99 : 0);
					this._currentEntry.StoreRelativeOffset();
					if (this._currentEntry.IsDirectory)
					{
						goto IL_144;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_4:
			this._exceptionPending = true;
			throw new InvalidOperationException(c0000c0.m00000f("Ån\"DË\b]N\u008c\u0017 Xzþ(\u0014¸¢-\tC·sÉ6ÌW­rÌ\u0097ßsPj6ñýo\u0085J\u001d½áÈMÐP\u0095\u00957\u0092®Tt\u00a0\u0080Äy\u0097Æg\u000e"));
			IL_FC:
			this._currentEntry.WriteSecurityMetadata(this._outputStream);
			this._currentEntry.PrepOutputStream(this._outputStream, finishing ? 0L : -1L, out this._outputCounter, out this._encryptor, out this._deflater, out this._entryOutputStream);
			IL_144:
			this._needToWriteEntryHeader = false;
		}

		// Token: 0x06000261 RID: 609 RVA: 0x0000F160 File Offset: 0x0000D360
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _FinishCurrentEntry()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._InitiateCurrentEntry(true);
						goto IL_B4;
					case 1:
						goto IL_F5;
					case 2:
						this._currentEntry.PostProcessOutput(this._outputStream);
						this._anyEntriesUsedZip64 |= this._currentEntry.OutputUsedZip64.Value;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						if (this._currentEntry == null)
						{
							return;
						}
						if (this._needToWriteEntryHeader)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_B4;
					}
					break;
					IL_B4:
					this._currentEntry.FinishOutputStream(this._outputStream, this._outputCounter, this._encryptor, this._deflater, this._entryOutputStream);
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_F5:
			this._outputCounter = null;
			this._encryptor = (this._deflater = null);
			this._entryOutputStream = null;
		}

		// Token: 0x06000262 RID: 610 RVA: 0x0000F280 File Offset: 0x0000D480
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected override void Dispose(bool notCalledFromFinalizer)
		{
			CountingStream countingStream;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._FinishCurrentEntry();
						this._directoryNeededZip64 = ZipOutput.WriteCentralDirectoryStructure(this._outputStream, this._entriesWritten.Values, 1U, this._zip64, this.Comment, this.ProvisionalAlternateEncoding);
						countingStream = (this._outputStream as CountingStream);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_E3;
					case 2:
						goto IL_36;
					case 3:
						if (this._disposed)
						{
							return;
						}
						if (notCalledFromFinalizer && !this._exceptionPending)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_107;
					}
					break;
				}
			}
			IL_36:
			Stream p;
			if (countingStream != null)
			{
				p = countingStream.WrappedStream;
				delegate0c9.f000097(countingStream);
				goto IL_EA;
			}
			IL_E3:
			p = this._outputStream;
			IL_EA:
			if (!this._leaveUnderlyingStreamOpen)
			{
				delegate0c9.f000097(p);
			}
			this._outputStream = null;
			IL_107:
			this._disposed = true;
		}

		// Token: 0x17000060 RID: 96
		// (get) Token: 0x06000263 RID: 611 RVA: 0x0000F39C File Offset: 0x0000D59C
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x17000061 RID: 97
		// (get) Token: 0x06000264 RID: 612 RVA: 0x0000F3AC File Offset: 0x0000D5AC
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x17000062 RID: 98
		// (get) Token: 0x06000265 RID: 613 RVA: 0x0000F3BC File Offset: 0x0000D5BC
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return true;
			}
		}

		// Token: 0x17000063 RID: 99
		// (get) Token: 0x06000266 RID: 614 RVA: 0x0000F3CC File Offset: 0x0000D5CC
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotSupportedException();
			}
		}

		// Token: 0x17000064 RID: 100
		// (get) Token: 0x06000267 RID: 615 RVA: 0x0000F3E0 File Offset: 0x0000D5E0
		// (set) Token: 0x06000268 RID: 616 RVA: 0x0000F3F8 File Offset: 0x0000D5F8
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._outputStream.Position;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotSupportedException();
			}
		}

		// Token: 0x06000269 RID: 617 RVA: 0x0000F40C File Offset: 0x0000D60C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
		}

		// Token: 0x0600026A RID: 618 RVA: 0x0000F41C File Offset: 0x0000D61C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			throw new NotSupportedException(c0000c0.m00000f("Ãd,\0"));
		}

		// Token: 0x0600026B RID: 619 RVA: 0x0000F438 File Offset: 0x0000D638
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotSupportedException(c0000c0.m00000f("Âd(\u000f"));
		}

		// Token: 0x0600026C RID: 620 RVA: 0x0000F454 File Offset: 0x0000D654
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotSupportedException();
		}

		// Token: 0x0600026D RID: 621 RVA: 0x0000F468 File Offset: 0x0000D668
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipOutputStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x040000B9 RID: 185
		private EncryptionAlgorithm _encryption;

		// Token: 0x040000BA RID: 186
		private ZipEntryTimestamp _timestamp;

		// Token: 0x040000BB RID: 187
		internal string _password;

		// Token: 0x040000BC RID: 188
		private string _comment;

		// Token: 0x040000BD RID: 189
		private Stream _outputStream;

		// Token: 0x040000BE RID: 190
		private ZipEntry _currentEntry;

		// Token: 0x040000BF RID: 191
		internal Zip64Option _zip64;

		// Token: 0x040000C0 RID: 192
		private Dictionary<string, ZipEntry> _entriesWritten;

		// Token: 0x040000C1 RID: 193
		private int _entryCount;

		// Token: 0x040000C2 RID: 194
		private Encoding _provisionalAlternateEncoding;

		// Token: 0x040000C3 RID: 195
		private bool _leaveUnderlyingStreamOpen;

		// Token: 0x040000C4 RID: 196
		private bool _disposed;

		// Token: 0x040000C5 RID: 197
		private bool _exceptionPending;

		// Token: 0x040000C6 RID: 198
		private bool _anyEntriesUsedZip64;

		// Token: 0x040000C7 RID: 199
		private bool _directoryNeededZip64;

		// Token: 0x040000C8 RID: 200
		private CountingStream _outputCounter;

		// Token: 0x040000C9 RID: 201
		private Stream _encryptor;

		// Token: 0x040000CA RID: 202
		private Stream _deflater;

		// Token: 0x040000CB RID: 203
		private CrcCalculatorStream _entryOutputStream;

		// Token: 0x040000CC RID: 204
		private bool _needToWriteEntryHeader;

		// Token: 0x040000CD RID: 205
		private string _name;

		// Token: 0x040000CE RID: 206
		private bool _DontIgnoreCase;

		// Token: 0x040000CF RID: 207
		internal ParallelDeflateOutputStream ParallelDeflater;

		// Token: 0x040000D0 RID: 208
		private long _ParallelDeflateThreshold;

		// Token: 0x040000D1 RID: 209
		[CompilerGenerated]
		private int f000041;

		// Token: 0x040000D2 RID: 210
		[CompilerGenerated]
		private CompressionStrategy f000042;

		// Token: 0x040000D3 RID: 211
		[CompilerGenerated]
		private CompressionLevel f000043;
	}
}
