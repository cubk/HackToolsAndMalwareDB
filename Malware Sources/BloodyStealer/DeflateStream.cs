using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x02000096 RID: 150
	public class DeflateStream : Stream
	{
		// Token: 0x060005CD RID: 1485 RVA: 0x00026738 File Offset: 0x00024938
		[MethodImpl(MethodImplOptions.NoInlining)]
		public DeflateStream(Stream stream, CompressionMode mode) : this(stream, mode, CompressionLevel.f000073, false)
		{
		}

		// Token: 0x060005CE RID: 1486 RVA: 0x00026744 File Offset: 0x00024944
		[MethodImpl(MethodImplOptions.NoInlining)]
		public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level) : this(stream, mode, level, false)
		{
		}

		// Token: 0x060005CF RID: 1487 RVA: 0x00026750 File Offset: 0x00024950
		[MethodImpl(MethodImplOptions.NoInlining)]
		public DeflateStream(Stream stream, CompressionMode mode, bool leaveOpen) : this(stream, mode, CompressionLevel.f000073, leaveOpen)
		{
		}

		// Token: 0x060005D0 RID: 1488 RVA: 0x0002675C File Offset: 0x0002495C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen)
		{
			this._innerStream = stream;
			this._baseStream = new ZlibBaseStream(stream, mode, level, ZlibStreamFlavor.DEFLATE, leaveOpen);
		}

		// Token: 0x17000130 RID: 304
		// (get) Token: 0x060005D1 RID: 1489 RVA: 0x00026780 File Offset: 0x00024980
		// (set) Token: 0x060005D2 RID: 1490 RVA: 0x0002679C File Offset: 0x0002499C
		public virtual FlushType FlushMode
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._flushMode;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
				IL_9F:
				this._baseStream._flushMode = value;
			}
		}

		// Token: 0x17000131 RID: 305
		// (get) Token: 0x060005D3 RID: 1491 RVA: 0x00026854 File Offset: 0x00024A54
		// (set) Token: 0x060005D4 RID: 1492 RVA: 0x00026870 File Offset: 0x00024A70
		public int BufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._bufferSize;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_99;
						case 1:
							goto IL_D6;
						case 2:
							goto IL_36;
						case 3:
							if (this._disposed)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							if (this._baseStream._workingBuffer != null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							if (value < 1024)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_FB;
						}
						break;
					}
				}
				IL_36:
				throw new ZlibException(c0000c0.m00000f("Åi(DÑ\u0006A\\Å\u001c)\fjâ+\u0001óðN\u000f^ä{Á!Û\u0016ºn\u0098\u0090Ói\u0019"));
				IL_99:
				throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
				IL_D6:
				throw new ZlibException(string.Format(c0000c0.m00000f("Õn#CÒIQR\u008c\u0001'@dîcGí²\u0013FO½nÈ \u0081HþBË\u0086\u0096|\u0017(\u0005ÿêE\u0082\u001e\u000f½óý\\Ð\u0019Ô\u0099m÷¬Pw¿\u0091¾kÖ\u008d}"), value, 1024));
				IL_FB:
				this._baseStream._bufferSize = value;
			}
		}

		// Token: 0x17000132 RID: 306
		// (get) Token: 0x060005D5 RID: 1493 RVA: 0x00026984 File Offset: 0x00024B84
		// (set) Token: 0x060005D6 RID: 1494 RVA: 0x000269A0 File Offset: 0x00024BA0
		public CompressionStrategy Strategy
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream.Strategy;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
				IL_9F:
				this._baseStream.Strategy = value;
			}
		}

		// Token: 0x17000133 RID: 307
		// (get) Token: 0x060005D7 RID: 1495 RVA: 0x00026A58 File Offset: 0x00024C58
		public virtual long TotalIn
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._z.TotalBytesIn;
			}
		}

		// Token: 0x17000134 RID: 308
		// (get) Token: 0x060005D8 RID: 1496 RVA: 0x00026A78 File Offset: 0x00024C78
		public virtual long TotalOut
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._baseStream._z.TotalBytesOut;
			}
		}

		// Token: 0x060005D9 RID: 1497 RVA: 0x00026A98 File Offset: 0x00024C98
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected override void Dispose(bool disposing)
		{
			if (!this._disposed)
			{
				if (disposing && this._baseStream != null)
				{
					this._baseStream.Close();
				}
				this._disposed = true;
			}
		}

		// Token: 0x17000135 RID: 309
		// (get) Token: 0x060005DA RID: 1498 RVA: 0x00026AE8 File Offset: 0x00024CE8
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
				IL_9F:
				return this._baseStream._stream.CanRead;
			}
		}

		// Token: 0x17000136 RID: 310
		// (get) Token: 0x060005DB RID: 1499 RVA: 0x00026BA8 File Offset: 0x00024DA8
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x17000137 RID: 311
		// (get) Token: 0x060005DC RID: 1500 RVA: 0x00026BB8 File Offset: 0x00024DB8
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = !this._disposed;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_8F;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_9F;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_8F:
				throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
				IL_9F:
				return this._baseStream._stream.CanWrite;
			}
		}

		// Token: 0x060005DD RID: 1501 RVA: 0x00026C78 File Offset: 0x00024E78
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
			IL_9F:
			this._baseStream.Flush();
		}

		// Token: 0x17000138 RID: 312
		// (get) Token: 0x060005DE RID: 1502 RVA: 0x00026D30 File Offset: 0x00024F30
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x17000139 RID: 313
		// (get) Token: 0x060005DF RID: 1503 RVA: 0x00026D44 File Offset: 0x00024F44
		// (set) Token: 0x060005E0 RID: 1504 RVA: 0x00026E18 File Offset: 0x00025018
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				bool flag;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_83;
						case 1:
							goto IL_C3;
						case 2:
							goto IL_36;
						case 3:
							flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Writer);
							if (!flag)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							flag = (this._baseStream._streamMode != ZlibBaseStream.StreamMode.Reader);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						break;
					}
				}
				IL_36:
				if (!flag)
				{
					return this._baseStream._z.TotalBytesIn;
				}
				goto IL_C3;
				IL_83:
				return this._baseStream._z.TotalBytesOut;
				IL_C3:
				return 0L;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x060005E1 RID: 1505 RVA: 0x00026E2C File Offset: 0x0002502C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
			IL_9F:
			return this._baseStream.Read(buffer, offset, count);
		}

		// Token: 0x060005E2 RID: 1506 RVA: 0x00026EE8 File Offset: 0x000250E8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005E3 RID: 1507 RVA: 0x00026EFC File Offset: 0x000250FC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005E4 RID: 1508 RVA: 0x00026F10 File Offset: 0x00025110
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = !this._disposed;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_8F;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_9F;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8F:
			throw new ObjectDisposedException(c0000c0.m00000f("Õd+\bÇ\u001dVdØ\0+Me"));
			IL_9F:
			this._baseStream.Write(buffer, offset, count);
		}

		// Token: 0x060005E5 RID: 1509 RVA: 0x00026FCC File Offset: 0x000251CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] CompressString(string p0)
		{
			MemoryStream memoryStream = new MemoryStream();
			Stream compressor = new DeflateStream(memoryStream, CompressionMode.Compress, CompressionLevel.BestCompression);
			ZlibBaseStream.CompressString(p0, compressor);
			return delegate0c8.f000092(memoryStream);
		}

		// Token: 0x060005E6 RID: 1510 RVA: 0x00027000 File Offset: 0x00025200
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] CompressBuffer(byte[] p0)
		{
			MemoryStream memoryStream = new MemoryStream();
			Stream compressor = new DeflateStream(memoryStream, CompressionMode.Compress, CompressionLevel.BestCompression);
			ZlibBaseStream.CompressBuffer(p0, compressor);
			return delegate0c8.f000092(memoryStream);
		}

		// Token: 0x060005E7 RID: 1511 RVA: 0x00027034 File Offset: 0x00025234
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string UncompressString(byte[] compressed)
		{
			MemoryStream stream = new MemoryStream(compressed);
			Stream decompressor = new DeflateStream(stream, CompressionMode.Decompress);
			return ZlibBaseStream.UncompressString(compressed, decompressor);
		}

		// Token: 0x060005E8 RID: 1512 RVA: 0x0002705C File Offset: 0x0002525C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] UncompressBuffer(byte[] compressed)
		{
			MemoryStream stream = new MemoryStream(compressed);
			Stream decompressor = new DeflateStream(stream, CompressionMode.Decompress);
			return ZlibBaseStream.UncompressBuffer(compressed, decompressor);
		}

		// Token: 0x060005E9 RID: 1513 RVA: 0x00027084 File Offset: 0x00025284
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static DeflateStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x0400027A RID: 634
		internal ZlibBaseStream _baseStream;

		// Token: 0x0400027B RID: 635
		internal Stream _innerStream;

		// Token: 0x0400027C RID: 636
		private bool _disposed;
	}
}
