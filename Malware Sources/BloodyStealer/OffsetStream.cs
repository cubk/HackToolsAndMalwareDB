using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x02000057 RID: 87
	internal class OffsetStream : Stream, IDisposable
	{
		// Token: 0x060002BE RID: 702 RVA: 0x00010AF8 File Offset: 0x0000ECF8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public OffsetStream(Stream p0)
		{
			this._originalPosition = delegate0e3.f0000e5(p0);
			this._innerStream = p0;
		}

		// Token: 0x060002BF RID: 703 RVA: 0x00010B18 File Offset: 0x0000ED18
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return this._innerStream.Read(buffer, offset, count);
		}

		// Token: 0x060002C0 RID: 704 RVA: 0x00010B34 File Offset: 0x0000ED34
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			throw new NotImplementedException();
		}

		// Token: 0x17000083 RID: 131
		// (get) Token: 0x060002C1 RID: 705 RVA: 0x00010B48 File Offset: 0x0000ED48
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.CanRead;
			}
		}

		// Token: 0x17000084 RID: 132
		// (get) Token: 0x060002C2 RID: 706 RVA: 0x00010B60 File Offset: 0x0000ED60
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.CanSeek;
			}
		}

		// Token: 0x17000085 RID: 133
		// (get) Token: 0x060002C3 RID: 707 RVA: 0x00010B78 File Offset: 0x0000ED78
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x060002C4 RID: 708 RVA: 0x00010B88 File Offset: 0x0000ED88
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			this._innerStream.Flush();
		}

		// Token: 0x17000086 RID: 134
		// (get) Token: 0x060002C5 RID: 709 RVA: 0x00010BA0 File Offset: 0x0000EDA0
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.Length;
			}
		}

		// Token: 0x17000087 RID: 135
		// (get) Token: 0x060002C6 RID: 710 RVA: 0x00010BB8 File Offset: 0x0000EDB8
		// (set) Token: 0x060002C7 RID: 711 RVA: 0x00010BD8 File Offset: 0x0000EDD8
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.Position - this._originalPosition;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._innerStream.Position = this._originalPosition + value;
			}
		}

		// Token: 0x060002C8 RID: 712 RVA: 0x00010BF8 File Offset: 0x0000EDF8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return this._innerStream.Seek(this._originalPosition + offset, origin) - this._originalPosition;
		}

		// Token: 0x060002C9 RID: 713 RVA: 0x00010C20 File Offset: 0x0000EE20
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060002CA RID: 714 RVA: 0x00010C34 File Offset: 0x0000EE34
		[MethodImpl(MethodImplOptions.NoInlining)]
		void IDisposable.Dispose()
		{
			this.Close();
		}

		// Token: 0x060002CB RID: 715 RVA: 0x00010C48 File Offset: 0x0000EE48
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Close()
		{
			base.Close();
		}

		// Token: 0x060002CC RID: 716 RVA: 0x00010C5C File Offset: 0x0000EE5C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static OffsetStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x040000F1 RID: 241
		private long _originalPosition;

		// Token: 0x040000F2 RID: 242
		private Stream _innerStream;
	}
}
