using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x02000061 RID: 97
	internal class NameCriterion : SelectionCriterion
	{
		// Token: 0x17000088 RID: 136
		// (set) Token: 0x060002DE RID: 734 RVA: 0x000111A8 File Offset: 0x0000F3A8
		internal virtual string MatchingFileSpec
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_36;
						case 1:
							goto IL_173;
						case 2:
							goto IL_36;
						case 3:
							if (Directory.Exists(value))
							{
								this._MatchingFileSpec = delegate0ff.f000123(c0000c0.m00000f("¿]"), value, c0000c0.m00000f("Í+"));
								num = delegate0da.f0000d7(0);
								continue;
							}
							this._MatchingFileSpec = value;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						break;
						IL_36:
						this._regexString = delegate0ff.f000123(c0000c0.m00000f("Ï"), delegate0e4.f0000ef(this._MatchingFileSpec).Replace(c0000c0.m00000f("Í+\u0011JúC"), c0000c0.m00000f("¹Z\u00138\u00884\u0018K\u0082X\u0012\u0002SÉ\u0011;Ê¬3L\u0004")).Replace(c0000c0.m00000f("Í/\u0011N"), c0000c0.m00000f("Í/\u0016:ú5o\u0019ñX")).Replace(c0000c0.m00000f("Í+"), c0000c0.m00000f("¿+")).Replace(c0000c0.m00000f("Í>"), c0000c0.m00000f("Ê_\u00118úGn")), c0000c0.m00000f("µ"));
						base.CriterionTrace(c0000c0.m00000f("ß` \u0001å\u001bZCÉ\0'Cf·?\u0002ñç\u00165Y¶sÃ4\u0096\fîj\u0091"), new object[]
						{
							this._regexString
						});
						num = delegate0da.f0000d7(-1);
					}
				}
				IL_173:
				this._re = new Regex(this._regexString, RegexOptions.IgnoreCase);
			}
		}

		// Token: 0x060002DF RID: 735 RVA: 0x0001133C File Offset: 0x0000F53C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			StringBuilder p = new StringBuilder();
			delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(p, c0000c0.m00000f("ÿ` \u0001\u0086")), EnumUtil.GetDescription(this.f000048)), c0000c0.m00000f("±")), this._MatchingFileSpec);
			return delegate0cd.f0000ab(p);
		}

		// Token: 0x060002E0 RID: 736 RVA: 0x000113B0 File Offset: 0x0000F5B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(string filename)
		{
			return this._Evaluate(filename);
		}

		// Token: 0x060002E1 RID: 737 RVA: 0x000113C4 File Offset: 0x0000F5C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool _Evaluate(string fullpath)
		{
			bool flag;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					string text;
					string input;
					switch (num)
					{
					case 0:
						text = fullpath;
						goto IL_94;
					case 1:
						goto IL_AD;
					case 2:
						flag = this._re.IsMatch(input);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						if (this._MatchingFileSpec.IndexOf('\\') != -1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						text = Path.GetFileName(fullpath);
						goto IL_94;
					}
					break;
					IL_94:
					input = text;
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_AD:
			if (this.f000048 != ComparisonOperator.EqualTo)
			{
				flag = !flag;
			}
			return flag;
		}

		// Token: 0x060002E2 RID: 738 RVA: 0x00011494 File Offset: 0x0000F694
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(ZipEntry entry)
		{
			string fullpath = entry.FileName.Replace(c0000c0.m00000f("¾"), c0000c0.m00000f("Í"));
			return this._Evaluate(fullpath);
		}

		// Token: 0x060002E3 RID: 739 RVA: 0x000114C8 File Offset: 0x0000F6C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public NameCriterion()
		{
		}

		// Token: 0x060002E4 RID: 740 RVA: 0x000114D0 File Offset: 0x0000F6D0
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static NameCriterion()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000118 RID: 280
		private Regex _re;

		// Token: 0x04000119 RID: 281
		private string _regexString;

		// Token: 0x0400011A RID: 282
		internal ComparisonOperator f000048;

		// Token: 0x0400011B RID: 283
		private string _MatchingFileSpec;
	}
}
