using System;
using System.Collections;
using System.ComponentModel;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Ionic
{
	// Token: 0x02000067 RID: 103
	internal sealed class EnumUtil
	{
		// Token: 0x0600030B RID: 779 RVA: 0x00013244 File Offset: 0x00011444
		[MethodImpl(MethodImplOptions.NoInlining)]
		private EnumUtil()
		{
		}

		// Token: 0x0600030C RID: 780 RVA: 0x0001324C File Offset: 0x0001144C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static string GetDescription(Enum value)
		{
			DescriptionAttribute[] array;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						FieldInfo field;
						array = (DescriptionAttribute[])field.GetCustomAttributes(delegate013e.f00017c(typeof(DescriptionAttribute).TypeHandle), false);
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_BA;
					case 2:
						if (array.Length > 0)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_C3;
					case 3:
					{
						FieldInfo field = value.GetType().GetField(delegate0cd.f0000ab(value));
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_BA:
			return array[0].Description;
			IL_C3:
			return value.ToString();
		}

		// Token: 0x0600030D RID: 781 RVA: 0x00013324 File Offset: 0x00011524
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static object Parse(Type enumType, string stringRepresentation)
		{
			return EnumUtil.Parse(enumType, stringRepresentation, false);
		}

		// Token: 0x0600030E RID: 782 RVA: 0x0001333C File Offset: 0x0001153C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static object Parse(Type enumType, string stringRepresentation, bool ignoreCase)
		{
			if (ignoreCase)
			{
				stringRepresentation = stringRepresentation.ToLower();
			}
			IEnumerator enumerator = Enum.GetValues(enumType).GetEnumerator();
			while (enumerator.MoveNext())
			{
				Enum @enum = (Enum)delegate0f6.f00010d(enumerator);
				string text = EnumUtil.GetDescription(@enum);
				if (ignoreCase)
				{
					text = text.ToLower();
				}
				if (text == stringRepresentation)
				{
					return @enum;
				}
			}
			return Enum.Parse(enumType, stringRepresentation, ignoreCase);
		}

		// Token: 0x0600030F RID: 783 RVA: 0x000133B8 File Offset: 0x000115B8
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static EnumUtil()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}
	}
}
