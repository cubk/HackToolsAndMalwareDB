using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x02000073 RID: 115
	internal class CountingStream : Stream
	{
		// Token: 0x0600036A RID: 874 RVA: 0x000151A8 File Offset: 0x000133A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CountingStream(Stream p0)
		{
			this._s = p0;
			this._initialOffset = this._s.Position;
		}

		// Token: 0x1700009B RID: 155
		// (get) Token: 0x0600036B RID: 875 RVA: 0x000151D0 File Offset: 0x000133D0
		public Stream WrappedStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._s;
			}
		}

		// Token: 0x1700009C RID: 156
		// (get) Token: 0x0600036C RID: 876 RVA: 0x000151E4 File Offset: 0x000133E4
		public long BytesWritten
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._bytesWritten;
			}
		}

		// Token: 0x1700009D RID: 157
		// (get) Token: 0x0600036D RID: 877 RVA: 0x000151F8 File Offset: 0x000133F8
		public long BytesRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._bytesRead;
			}
		}

		// Token: 0x0600036E RID: 878 RVA: 0x0001520C File Offset: 0x0001340C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Adjust(long delta)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (this._bytesWritten < 0L)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_87;
					case 1:
						goto IL_87;
					case 2:
						goto IL_36;
					case 3:
						this._bytesWritten -= delta;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			throw new InvalidOperationException();
			IL_87:
			if (this._s is CountingStream)
			{
				((CountingStream)this._s).Adjust(delta);
			}
		}

		// Token: 0x0600036F RID: 879 RVA: 0x000152C4 File Offset: 0x000134C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			int num = this._s.Read(buffer, offset, count);
			this._bytesRead += (long)num;
			return num;
		}

		// Token: 0x06000370 RID: 880 RVA: 0x000152F0 File Offset: 0x000134F0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						return;
					case 1:
						goto IL_7B;
					case 2:
						goto IL_36;
					case 3:
						if (count == 0)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					this._s.Write(buffer, offset, count);
					num = delegate0da.f0000d7(-1);
				}
			}
			return;
			IL_7B:
			this._bytesWritten += (long)count;
		}

		// Token: 0x1700009E RID: 158
		// (get) Token: 0x06000371 RID: 881 RVA: 0x00015388 File Offset: 0x00013588
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._s.CanRead;
			}
		}

		// Token: 0x1700009F RID: 159
		// (get) Token: 0x06000372 RID: 882 RVA: 0x000153A0 File Offset: 0x000135A0
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._s.CanSeek;
			}
		}

		// Token: 0x170000A0 RID: 160
		// (get) Token: 0x06000373 RID: 883 RVA: 0x000153B8 File Offset: 0x000135B8
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._s.CanWrite;
			}
		}

		// Token: 0x06000374 RID: 884 RVA: 0x000153D0 File Offset: 0x000135D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			this._s.Flush();
		}

		// Token: 0x170000A1 RID: 161
		// (get) Token: 0x06000375 RID: 885 RVA: 0x000153E8 File Offset: 0x000135E8
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._s.Length;
			}
		}

		// Token: 0x170000A2 RID: 162
		// (get) Token: 0x06000376 RID: 886 RVA: 0x00015400 File Offset: 0x00013600
		public long ComputedPosition
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._initialOffset + this._bytesWritten;
			}
		}

		// Token: 0x170000A3 RID: 163
		// (get) Token: 0x06000377 RID: 887 RVA: 0x0001541C File Offset: 0x0001361C
		// (set) Token: 0x06000378 RID: 888 RVA: 0x00015434 File Offset: 0x00013634
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._s.Position;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._s.Seek(value, SeekOrigin.Begin);
			}
		}

		// Token: 0x06000379 RID: 889 RVA: 0x00015450 File Offset: 0x00013650
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return this._s.Seek(offset, origin);
		}

		// Token: 0x0600037A RID: 890 RVA: 0x0001546C File Offset: 0x0001366C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			this._s.SetLength(value);
		}

		// Token: 0x0600037B RID: 891 RVA: 0x00015488 File Offset: 0x00013688
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static CountingStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000158 RID: 344
		private Stream _s;

		// Token: 0x04000159 RID: 345
		private long _bytesWritten;

		// Token: 0x0400015A RID: 346
		private long _bytesRead;

		// Token: 0x0400015B RID: 347
		private long _initialOffset;
	}
}
