using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x02000063 RID: 99
	internal class AttributesCriterion : SelectionCriterion
	{
		// Token: 0x1700008A RID: 138
		// (get) Token: 0x060002EC RID: 748 RVA: 0x000117F8 File Offset: 0x0000F9F8
		// (set) Token: 0x060002ED RID: 749 RVA: 0x00011968 File Offset: 0x0000FB68
		internal string AttributeString
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				string text;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_C9;
						case 1:
							goto IL_111;
						case 2:
							text += c0000c0.m00000f("Ã");
							goto IL_47;
						case 3:
							text = c0000c0.m00000f("");
							if ((this._Attributes & FileAttributes.Hidden) != (FileAttributes)0)
							{
								text = delegate0d0.f0000bc(text, c0000c0.m00000f("Ù"));
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_C9;
						}
						break;
						IL_47:
						if ((this._Attributes & FileAttributes.Archive) != (FileAttributes)0)
						{
							text = delegate0d0.f0000bc(text, c0000c0.m00000f("Ð"));
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_111;
						IL_C9:
						if ((this._Attributes & FileAttributes.System) != (FileAttributes)0)
						{
							text = delegate0d0.f0000bc(text, c0000c0.m00000f("Â"));
						}
						if ((this._Attributes & FileAttributes.ReadOnly) == (FileAttributes)0)
						{
							goto IL_47;
						}
						num = delegate0da.f0000d7(-2);
					}
				}
				IL_111:
				if ((this._Attributes & FileAttributes.NotContentIndexed) != (FileAttributes)0)
				{
					text = delegate0d0.f0000bc(text, c0000c0.m00000f("Ø"));
				}
				if ((this._Attributes & FileAttributes.ReparsePoint) != (FileAttributes)0)
				{
					text = delegate0d0.f0000bc(text, c0000c0.m00000f("Ø"));
				}
				return text;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				char c;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						string text;
						int num2;
						switch (num)
						{
						case 0:
							goto IL_168;
						case 1:
							goto IL_201;
						case 2:
							IL_36:
							if ((this._Attributes & FileAttributes.System) != (FileAttributes)0)
							{
								goto Block_1;
							}
							this._Attributes |= FileAttributes.System;
							goto IL_296;
						case 3:
							this._Attributes = FileAttributes.Normal;
							text = value.ToUpper();
							num2 = 0;
							goto IL_29A;
						}
						break;
						IL_29A:
						if (num2 >= text.Length)
						{
							return;
						}
						c = text[num2];
						char c2 = c;
						if (c2 != 'A')
						{
							switch (c2)
							{
							case 'H':
								if ((this._Attributes & FileAttributes.Hidden) != (FileAttributes)0)
								{
									goto Block_7;
								}
								this._Attributes |= FileAttributes.Hidden;
								break;
							case 'I':
								if ((this._Attributes & FileAttributes.NotContentIndexed) != (FileAttributes)0)
								{
									num = delegate0da.f0000d7(-1);
									continue;
								}
								this._Attributes |= FileAttributes.NotContentIndexed;
								break;
							case 'J':
							case 'K':
								goto IL_28F;
							case 'L':
								if ((this._Attributes & FileAttributes.ReparsePoint) != (FileAttributes)0)
								{
									goto Block_9;
								}
								this._Attributes |= FileAttributes.ReparsePoint;
								break;
							default:
								switch (c2)
								{
								case 'R':
									if ((this._Attributes & FileAttributes.ReadOnly) != (FileAttributes)0)
									{
										goto Block_8;
									}
									this._Attributes |= FileAttributes.ReadOnly;
									break;
								case 'S':
									goto IL_36;
								default:
									num = delegate0da.f0000d7(0);
									continue;
								}
								break;
							}
						}
						else
						{
							if ((this._Attributes & FileAttributes.Archive) != (FileAttributes)0)
							{
								goto Block_2;
							}
							this._Attributes |= FileAttributes.Archive;
						}
						IL_296:
						num2++;
						goto IL_29A;
					}
				}
				Block_1:
				throw new ArgumentException(delegate0101.f000127(c0000c0.m00000f("Ãd=\u0001Ç\u001dVS\u008c\u0014\"Mo¹mOí²\u0013O"), c), c0000c0.m00000f("ç`!\u0011Ã"));
				Block_2:
				throw new ArgumentException(delegate0101.f000127(c0000c0.m00000f("Ãd=\u0001Ç\u001dVS\u008c\u0014\"Mo¹mOí²\u0013O"), c), c0000c0.m00000f("ç`!\u0011Ã"));
				IL_168:
				goto IL_28F;
				Block_7:
				throw new ArgumentException(delegate0101.f000127(c0000c0.m00000f("Ãd=\u0001Ç\u001dVS\u008c\u0014\"Mo¹mOí²\u0013O"), c), c0000c0.m00000f("ç`!\u0011Ã"));
				Block_8:
				throw new ArgumentException(delegate0101.f000127(c0000c0.m00000f("Ãd=\u0001Ç\u001dVS\u008c\u0014\"Mo¹mOí²\u0013O"), c), c0000c0.m00000f("ç`!\u0011Ã"));
				IL_201:
				throw new ArgumentException(string.Format(c0000c0.m00000f("Ãd=\u0001Ç\u001dVS\u008c\u0014\"Mo¹mOí²\u0013O"), c), c0000c0.m00000f("ç`!\u0011Ã"));
				Block_9:
				throw new ArgumentException(delegate0101.f000127(c0000c0.m00000f("Ãd=\u0001Ç\u001dVS\u008c\u0014\"Mo¹mOí²\u0013O"), c), c0000c0.m00000f("ç`!\u0011Ã"));
				IL_28F:
				throw new ArgumentException(value);
			}
		}

		// Token: 0x060002EE RID: 750 RVA: 0x00011C20 File Offset: 0x0000FE20
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			StringBuilder p = new StringBuilder();
			delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(p, c0000c0.m00000f("ðu9\u0016Ï\vFCÉ\u0001n")), EnumUtil.GetDescription(this.f000048)), c0000c0.m00000f("±")), this.AttributeString);
			return delegate0cd.f0000ab(p);
		}

		// Token: 0x060002EF RID: 751 RVA: 0x00011C94 File Offset: 0x0000FE94
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool _EvaluateOne(FileAttributes fileAttrs, FileAttributes criterionAttrs)
		{
			bool result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if ((this._Attributes & criterionAttrs) == criterionAttrs)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_9A;
					case 1:
						goto IL_95;
					case 2:
						result = ((fileAttrs & criterionAttrs) == criterionAttrs);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						result = false;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_95:
			return result;
			IL_9A:
			result = true;
			return result;
		}

		// Token: 0x060002F0 RID: 752 RVA: 0x00011D40 File Offset: 0x0000FF40
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(string filename)
		{
			FileAttributes fileAttrs = delegate013a.f000178(filename);
			return this._Evaluate(fileAttrs);
		}

		// Token: 0x060002F1 RID: 753 RVA: 0x00011D60 File Offset: 0x0000FF60
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool _Evaluate(FileAttributes fileAttrs)
		{
			bool flag;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_9B;
					case 1:
						goto IL_C8;
					case 2:
						flag = this._EvaluateOne(fileAttrs, FileAttributes.Archive);
						goto IL_40;
					case 3:
						flag = this._EvaluateOne(fileAttrs, FileAttributes.Hidden);
						if (flag)
						{
							flag = this._EvaluateOne(fileAttrs, FileAttributes.System);
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_9B;
					}
					break;
					IL_40:
					if (flag)
					{
						flag = this._EvaluateOne(fileAttrs, FileAttributes.NotContentIndexed);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_C8;
					IL_9B:
					if (flag)
					{
						flag = this._EvaluateOne(fileAttrs, FileAttributes.ReadOnly);
					}
					if (!flag)
					{
						goto IL_40;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_C8:
			if (flag)
			{
				flag = this._EvaluateOne(fileAttrs, FileAttributes.ReparsePoint);
			}
			if (this.f000048 != ComparisonOperator.EqualTo)
			{
				flag = !flag;
			}
			return flag;
		}

		// Token: 0x060002F2 RID: 754 RVA: 0x00011E5C File Offset: 0x0001005C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(ZipEntry entry)
		{
			FileAttributes attributes = entry.Attributes;
			return this._Evaluate(attributes);
		}

		// Token: 0x060002F3 RID: 755 RVA: 0x00011E78 File Offset: 0x00010078
		[MethodImpl(MethodImplOptions.NoInlining)]
		public AttributesCriterion()
		{
		}

		// Token: 0x060002F4 RID: 756 RVA: 0x00011E80 File Offset: 0x00010080
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static AttributesCriterion()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x0400011E RID: 286
		private FileAttributes _Attributes;

		// Token: 0x0400011F RID: 287
		internal ComparisonOperator f000048;
	}
}
