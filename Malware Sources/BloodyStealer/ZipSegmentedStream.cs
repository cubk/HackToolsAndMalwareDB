using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x02000055 RID: 85
	internal class ZipSegmentedStream : Stream, IDisposable
	{
		// Token: 0x06000298 RID: 664 RVA: 0x0000FE10 File Offset: 0x0000E010
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ZipSegmentedStream()
		{
		}

		// Token: 0x06000299 RID: 665 RVA: 0x0000FE18 File Offset: 0x0000E018
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipSegmentedStream ForReading(string name, uint initialDiskNumber, uint maxDiskNumber)
		{
			ZipSegmentedStream zipSegmentedStream2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						ZipSegmentedStream zipSegmentedStream;
						zipSegmentedStream.CurrentSegment = initialDiskNumber;
						zipSegmentedStream._maxDiskNumber = maxDiskNumber;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_A2;
					case 2:
					{
						ZipSegmentedStream zipSegmentedStream;
						zipSegmentedStream._baseName = name;
						zipSegmentedStream2 = zipSegmentedStream;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						ZipSegmentedStream zipSegmentedStream = new ZipSegmentedStream();
						zipSegmentedStream.f000044 = 1;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_A2:
			zipSegmentedStream2._SetReadStream();
			return zipSegmentedStream2;
		}

		// Token: 0x0600029A RID: 666 RVA: 0x0000FED0 File Offset: 0x0000E0D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipSegmentedStream ForWriting(string name, int maxSegmentSize)
		{
			ZipSegmentedStream zipSegmentedStream;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipSegmentedStream.CurrentSegment = 0U;
						zipSegmentedStream._baseName = name;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B1;
					case 2:
						zipSegmentedStream._maxSegmentSize = maxSegmentSize;
						zipSegmentedStream._baseDir = delegate0e4.f0000ed(name);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						zipSegmentedStream = new ZipSegmentedStream();
						zipSegmentedStream.f000044 = 2;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_B1:
			ZipSegmentedStream zipSegmentedStream2 = zipSegmentedStream;
			if (delegate0db.f0000d9(zipSegmentedStream2._baseDir, c0000c0.m00000f("")))
			{
				zipSegmentedStream2._baseDir = c0000c0.m00000f("¿");
			}
			zipSegmentedStream2._SetWriteStream(0U);
			return zipSegmentedStream2;
		}

		// Token: 0x0600029B RID: 667 RVA: 0x0000FFC8 File Offset: 0x0000E1C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipSegmentedStream ForUpdate(string name, uint diskNumber)
		{
			ZipSegmentedStream zipSegmentedStream2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						ZipSegmentedStream zipSegmentedStream;
						zipSegmentedStream.CurrentSegment = diskNumber;
						zipSegmentedStream._baseName = name;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_A6;
					case 2:
					{
						ZipSegmentedStream zipSegmentedStream;
						zipSegmentedStream._maxSegmentSize = int.MaxValue;
						zipSegmentedStream2 = zipSegmentedStream;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						ZipSegmentedStream zipSegmentedStream = new ZipSegmentedStream();
						zipSegmentedStream.f000044 = 3;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_A6:
			zipSegmentedStream2._SetUpdateStream();
			return zipSegmentedStream2;
		}

		// Token: 0x0600029C RID: 668 RVA: 0x00010084 File Offset: 0x0000E284
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _SetUpdateStream()
		{
			this._innerStream = new FileStream(this.CurrentName, FileMode.Open);
		}

		// Token: 0x1700007B RID: 123
		// (get) Token: 0x0600029D RID: 669 RVA: 0x000100A4 File Offset: 0x0000E2A4
		// (set) Token: 0x0600029E RID: 670 RVA: 0x000100B8 File Offset: 0x0000E2B8
		public bool ContiguousWrite { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x1700007C RID: 124
		// (get) Token: 0x0600029F RID: 671 RVA: 0x000100CC File Offset: 0x0000E2CC
		// (set) Token: 0x060002A0 RID: 672 RVA: 0x000100E0 File Offset: 0x0000E2E0
		public uint CurrentSegment
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._currentDiskNumber;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			private set
			{
				this._currentDiskNumber = value;
				this._currentName = null;
			}
		}

		// Token: 0x1700007D RID: 125
		// (get) Token: 0x060002A1 RID: 673 RVA: 0x000100FC File Offset: 0x0000E2FC
		public string CurrentName
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._currentName == null)
				{
					this._currentName = this._NameForSegment(this.CurrentSegment);
				}
				return this._currentName;
			}
		}

		// Token: 0x060002A2 RID: 674 RVA: 0x0001012C File Offset: 0x0000E32C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private string _NameForSegment(uint diskNumber)
		{
			return delegate0d5.f0000c9(c0000c0.m00000f("ê10JÜ\u0012\u0002\rè@3"), delegate0d0.f0000bb(delegate0e4.f0000ed(this._baseName), delegate0e4.f0000ee(this._baseName)), diskNumber + 1U);
		}

		// Token: 0x060002A3 RID: 675 RVA: 0x00010180 File Offset: 0x0000E380
		[MethodImpl(MethodImplOptions.NoInlining)]
		public uint ComputeSegment(int length)
		{
			if (this._innerStream.Position + (long)length > (long)this._maxSegmentSize)
			{
				return this.CurrentSegment + 1U;
			}
			return this.CurrentSegment;
		}

		// Token: 0x060002A4 RID: 676 RVA: 0x000101B8 File Offset: 0x0000E3B8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			return string.Format(c0000c0.m00000f("ê10?ÝXNj÷\t|QU»m\u0017ùñSVU¿)\u0097\vÃ^"), new object[]
			{
				c0000c0.m00000f("Ëh=7Ã\u000e^RÂ\u0006+H[ã?\u0002÷ï"),
				this.CurrentName,
				(this.f000044 == 1) ? c0000c0.m00000f("Ãd,\0") : ((this.f000044 == 2) ? c0000c0.m00000f("Æs$\u0010Ã") : ((this.f000044 == 3) ? c0000c0.m00000f("Äq)\u0005Ò\f") : c0000c0.m00000f("®>r"))),
				this.Position
			});
		}

		// Token: 0x060002A5 RID: 677 RVA: 0x00010264 File Offset: 0x0000E464
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ResetWriter()
		{
			this.CurrentSegment = 0U;
			this._SetWriteStream(0U);
		}

		// Token: 0x060002A6 RID: 678 RVA: 0x00010280 File Offset: 0x0000E480
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _SetReadStream()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._innerStream.Close();
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_A7;
					case 2:
						goto IL_36;
					case 3:
						if (this._innerStream != null)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (this.CurrentSegment + 1U != this._maxDiskNumber)
					{
						goto IL_B3;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_A7:
			this._currentName = this._baseName;
			IL_B3:
			this._innerStream = delegate0135.f000171(this.CurrentName);
		}

		// Token: 0x060002A7 RID: 679 RVA: 0x00010358 File Offset: 0x0000E558
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						goto IL_135;
					case 1:
						count -= num2;
						num2 = this._innerStream.Read(buffer, offset, count);
						num3 += num2;
						goto IL_135;
					case 2:
						return num3;
					case 3:
						if (this.f000044 != 1)
						{
							goto Block_1;
						}
						num3 = this._innerStream.Read(buffer, offset, count);
						num2 = num3;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_135:
					if (num2 == count)
					{
						return num3;
					}
					if (this._innerStream.Position != this._innerStream.Length)
					{
						goto Block_2;
					}
					if (this.CurrentSegment + 1U == this._maxDiskNumber)
					{
						num = delegate0da.f0000d7(-2);
					}
					else
					{
						this.CurrentSegment += 1U;
						this._SetReadStream();
						offset += num2;
						num = delegate0da.f0000d7(-1);
					}
				}
			}
			return num3;
			Block_1:
			throw new ZipException(c0000c0.m00000f("Âu?\u0001Ç\u0004\u0013rÞ\0!^2·\u000e\u0006øì\u0001\u0012\r\u0096\u007fÌ7\u0090"));
			Block_2:
			throw new ZipException(delegate0101.f000127(c0000c0.m00000f("Ãd,\0\u0086\fAEÃ\0nEf·+\u000eúçN\u001d\u001d¹"), this.CurrentName));
		}

		// Token: 0x060002A8 RID: 680 RVA: 0x000104A4 File Offset: 0x0000E6A4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _SetWriteStream(uint increment)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (File.Exists(this.CurrentName))
						{
							delegate0d3.f0000c5(this.CurrentName);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_36;
					case 1:
						goto IL_CC;
					case 2:
						goto IL_36;
					case 3:
						if (this._innerStream != null)
						{
							this._innerStream.Close();
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_47;
					}
					break;
					IL_47:
					if (increment > 0U)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_DA;
					IL_36:
					File.Move(this._currentTempName, this.CurrentName);
					goto IL_47;
				}
			}
			IL_CC:
			this.CurrentSegment += increment;
			IL_DA:
			SharedUtilities.CreateAndOpenUniqueTempFile(this._baseDir, out this._innerStream, out this._currentTempName);
			if (this.CurrentSegment == 0U)
			{
				this._innerStream.Write(delegate0136.f000173(134695760), 0, 4);
			}
		}

		// Token: 0x060002A9 RID: 681 RVA: 0x000105CC File Offset: 0x0000E7CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						goto IL_5C;
					case 1:
						return;
					case 2:
						count -= num2;
						offset += num2;
						goto IL_40;
					case 3:
						if (this.f000044 != 2)
						{
							goto IL_119;
						}
						if (!this.ContiguousWrite)
						{
							goto IL_40;
						}
						if (this._innerStream.Position + (long)count > (long)this._maxSegmentSize)
						{
							this._SetWriteStream(1U);
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_5C;
					}
					break;
					IL_5C:
					this._innerStream.Write(buffer, offset, count);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_40:
					if (this._innerStream.Position + (long)count <= (long)this._maxSegmentSize)
					{
						goto IL_5C;
					}
					num2 = this._maxSegmentSize - (int)this._innerStream.Position;
					this._innerStream.Write(buffer, offset, num2);
					this._SetWriteStream(1U);
					num = delegate0da.f0000d7(-2);
				}
			}
			return;
			IL_119:
			if (this.f000044 == 3)
			{
				this._innerStream.Write(buffer, offset, count);
				return;
			}
			throw new ZipException(c0000c0.m00000f("Âu?\u0001Ç\u0004\u0013rÞ\0!^2·\u000e\u0006øì\u0001\u0012\r\u0093hÄ'ÛY"));
		}

		// Token: 0x060002AA RID: 682 RVA: 0x0001071C File Offset: 0x0000E91C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public long TruncateBackward(uint diskNumber, long offset)
		{
			if (this.f000044 != 2)
			{
				throw new ZipException(c0000c0.m00000f("ó`)DÕ\u001dRCÉ\\"));
			}
			if (diskNumber == this.CurrentSegment)
			{
				return this._innerStream.Seek(offset, SeekOrigin.Begin);
			}
			if (this._innerStream != null)
			{
				this._innerStream.Close();
				if (delegate0d2.f0000c1(this._currentTempName))
				{
					delegate0d3.f0000c5(this._currentTempName);
				}
			}
			for (uint num = this.CurrentSegment - 1U; num > diskNumber; num -= 1U)
			{
				string p = this._NameForSegment(num);
				if (delegate0d2.f0000c1(p))
				{
					delegate0d3.f0000c5(p);
				}
			}
			this.CurrentSegment = diskNumber;
			for (int i = 0; i < 3; i++)
			{
				this._currentTempName = SharedUtilities.InternalGetTempFileName();
				delegate0137.f000174(this.CurrentName, this._currentTempName);
			}
			this._innerStream = new FileStream(this._currentTempName, FileMode.Open);
			return this._innerStream.Seek(offset, SeekOrigin.Begin);
		}

		// Token: 0x1700007E RID: 126
		// (get) Token: 0x060002AB RID: 683 RVA: 0x00010840 File Offset: 0x0000EA40
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f000044 == 1 && this._innerStream.CanRead;
			}
		}

		// Token: 0x1700007F RID: 127
		// (get) Token: 0x060002AC RID: 684 RVA: 0x00010868 File Offset: 0x0000EA68
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.CanSeek;
			}
		}

		// Token: 0x17000080 RID: 128
		// (get) Token: 0x060002AD RID: 685 RVA: 0x00010880 File Offset: 0x0000EA80
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f000044 == 2 && this._innerStream.CanWrite;
			}
		}

		// Token: 0x060002AE RID: 686 RVA: 0x000108A8 File Offset: 0x0000EAA8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			this._innerStream.Flush();
		}

		// Token: 0x17000081 RID: 129
		// (get) Token: 0x060002AF RID: 687 RVA: 0x000108C0 File Offset: 0x0000EAC0
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.Length;
			}
		}

		// Token: 0x17000082 RID: 130
		// (get) Token: 0x060002B0 RID: 688 RVA: 0x000108D8 File Offset: 0x0000EAD8
		// (set) Token: 0x060002B1 RID: 689 RVA: 0x000108F0 File Offset: 0x0000EAF0
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.Position;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._innerStream.Position = value;
			}
		}

		// Token: 0x060002B2 RID: 690 RVA: 0x0001090C File Offset: 0x0000EB0C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return this._innerStream.Seek(offset, origin);
		}

		// Token: 0x060002B3 RID: 691 RVA: 0x00010928 File Offset: 0x0000EB28
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			if (this.f000044 != 2)
			{
				throw new NotImplementedException();
			}
			this._innerStream.SetLength(value);
		}

		// Token: 0x060002B4 RID: 692 RVA: 0x00010958 File Offset: 0x0000EB58
		[MethodImpl(MethodImplOptions.NoInlining)]
		void IDisposable.Dispose()
		{
			this.Close();
		}

		// Token: 0x060002B5 RID: 693 RVA: 0x0001096C File Offset: 0x0000EB6C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Close()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._innerStream = null;
						if (this.f000044 == 2)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_ED;
					case 1:
						goto IL_C7;
					case 2:
						if (File.Exists(this.CurrentName))
						{
							delegate0d3.f0000c5(this.CurrentName);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_C7;
					case 3:
						if (this._innerStream != null)
						{
							this._innerStream.Close();
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_ED;
					}
					break;
				}
			}
			IL_C7:
			if (File.Exists(this._currentTempName))
			{
				delegate0137.f000174(this._currentTempName, this.CurrentName);
			}
			IL_ED:
			base.Close();
		}

		// Token: 0x060002B6 RID: 694 RVA: 0x00010A6C File Offset: 0x0000EC6C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipSegmentedStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x040000E7 RID: 231
		private int f000044;

		// Token: 0x040000E8 RID: 232
		private string _baseName;

		// Token: 0x040000E9 RID: 233
		private string _baseDir;

		// Token: 0x040000EA RID: 234
		private string _currentName;

		// Token: 0x040000EB RID: 235
		private string _currentTempName;

		// Token: 0x040000EC RID: 236
		private uint _currentDiskNumber;

		// Token: 0x040000ED RID: 237
		private uint _maxDiskNumber;

		// Token: 0x040000EE RID: 238
		private int _maxSegmentSize;

		// Token: 0x040000EF RID: 239
		private Stream _innerStream;

		// Token: 0x040000F0 RID: 240
		[CompilerGenerated]
		private bool f000045;
	}
}
