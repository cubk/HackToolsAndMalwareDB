using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x020000A5 RID: 165
	internal sealed class InfTree
	{
		// Token: 0x06000657 RID: 1623 RVA: 0x0002FACC File Offset: 0x0002DCCC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int huft_build(int[] p0, int bindex, int p2, int p3, int[] p4, int[] p5, int[] p6, int[] p7, int[] p8, int[] p9, int[] p10)
		{
			int num3;
			int num8;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num2;
					int num4;
					int num5;
					int num6;
					int num7;
					int num10;
					int num9;
					int num11;
					int num12;
					int num13;
					int num14;
					int num15;
					switch (num)
					{
					case 0:
						if (!flag)
						{
							goto Block_15;
						}
						num2++;
						num3 <<= 1;
						goto IL_33A;
					case 1:
						this.f000070[0] = 192;
						goto IL_4EE;
					case 2:
						num4++;
						num5 += num6;
						num7 = num8 - num5;
						num7 = ((num7 > num6) ? num6 : num7);
						flag = ((num9 = 1 << ((num2 = num10 - num5) & 31)) <= num11 + 1);
						if (!flag)
						{
							num9 -= num11 + 1;
							num12 = num10;
							flag = (num2 >= num7);
							if (!flag)
							{
								for (;;)
								{
									flag = (++num2 < num7);
									if (!flag)
									{
										break;
									}
									flag = ((num9 <<= 1) > this.f00006f[++num12]);
									if (!flag)
									{
										break;
									}
									num9 -= this.f00006f[num12];
								}
							}
						}
						num7 = 1 << num2;
						flag = (p9[0] + num7 <= 1440);
						if (!flag)
						{
							goto Block_5;
						}
						num13 = (this.f000071[num4] = p9[0]);
						p9[0] += num7;
						flag = (num4 == 0);
						if (!flag)
						{
							this.f000072[num4] = num14;
							this.f000070[0] = (int)((sbyte)num2);
							this.f000070[1] = (int)((sbyte)num6);
							num2 = SharedUtils.URShift(num14, num5 - num6);
							this.f000070[2] = num13 - this.f000071[num4 - 1] - num2;
							delegate0fe.f000121(this.f000070, 0, p8, (this.f000071[num4 - 1] + num2) * 3, 3);
							goto IL_1AD;
						}
						p6[0] = num13;
						goto IL_1AD;
					case 3:
						num15 = 0;
						num14 = p2;
						do
						{
							this.f00006f[p0[bindex + num15]]++;
							num15++;
							num14--;
							flag = (num14 != 0);
						}
						while (flag);
						flag = (this.f00006f[0] != p2);
						if (!flag)
						{
							goto Block_10;
						}
						num6 = p7[0];
						num2 = 1;
						for (;;)
						{
							flag = (num2 <= 15);
							if (!flag)
							{
								break;
							}
							flag = (this.f00006f[num2] == 0);
							if (!flag)
							{
								break;
							}
							num2++;
						}
						IL_280:
						num10 = num2;
						flag = (num6 >= num2);
						if (!flag)
						{
							num6 = num2;
						}
						num14 = 15;
						for (;;)
						{
							flag = (num14 != 0);
							if (!flag)
							{
								break;
							}
							flag = (this.f00006f[num14] == 0);
							if (!flag)
							{
								break;
							}
							num14--;
						}
						IL_2C9:
						num8 = num14;
						flag = (num6 <= num14);
						if (!flag)
						{
							num6 = num14;
						}
						p7[0] = num6;
						num3 = 1 << num2;
						goto IL_33A;
						goto IL_2C9;
						goto IL_280;
					}
					break;
					IL_1AD:
					flag = (num10 > num5 + num6);
					if (flag)
					{
						num = delegate0da.f0000d7(-2);
						continue;
					}
					this.f000070[1] = (int)((sbyte)(num10 - num5));
					flag = (num15 < p2);
					if (!flag)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					flag = (p10[num15] >= p3);
					if (!flag)
					{
						this.f000070[0] = (int)((p10[num15] < 256) ? 0 : 96);
						this.f000070[2] = p10[num15++];
						goto IL_4EE;
					}
					this.f000070[0] = (int)((sbyte)(p5[p10[num15] - p3] + 16 + 64));
					this.f000070[2] = p4[p10[num15++] - p3];
					goto IL_4EE;
					IL_33A:
					flag = (num2 < num14);
					if (flag)
					{
						flag = ((num3 -= this.f00006f[num2]) >= 0);
						num = delegate0da.f0000d7(0);
						continue;
					}
					flag = ((num3 -= this.f00006f[num14]) >= 0);
					if (!flag)
					{
						goto Block_17;
					}
					this.f00006f[num14] += num3;
					num2 = (this.f000072[1] = 0);
					num15 = 1;
					num12 = 2;
					for (;;)
					{
						flag = (--num14 != 0);
						if (!flag)
						{
							break;
						}
						num2 = (this.f000072[num12] = num2 + this.f00006f[num15]);
						num12++;
						num15++;
					}
					num14 = 0;
					num15 = 0;
					do
					{
						flag = ((num2 = p0[bindex + num15]) == 0);
						if (!flag)
						{
							p10[this.f000072[num2]++] = num14;
						}
						num15++;
						flag = (++num14 < p2);
					}
					while (flag);
					p2 = this.f000072[num8];
					num14 = (this.f000072[0] = 0);
					num15 = 0;
					num4 = -1;
					num5 = -num6;
					this.f000071[0] = 0;
					num13 = 0;
					num7 = 0;
					goto IL_5C8;
					IL_5AE:
					flag = (num11-- != 0);
					if (!flag)
					{
						num10++;
						goto IL_5C8;
					}
					goto IL_1AD;
					IL_4EE:
					num9 = 1 << num10 - num5;
					num2 = SharedUtils.URShift(num14, num5);
					for (;;)
					{
						flag = (num2 < num7);
						if (!flag)
						{
							break;
						}
						delegate0fe.f000121(this.f000070, 0, p8, (num13 + num2) * 3, 3);
						num2 += num9;
					}
					num2 = 1 << num10 - 1;
					for (;;)
					{
						flag = ((num14 & num2) != 0);
						if (!flag)
						{
							break;
						}
						num14 ^= num2;
						num2 = SharedUtils.URShift(num2, 1);
					}
					num14 ^= num2;
					int num16 = (1 << num5) - 1;
					for (;;)
					{
						flag = ((num14 & num16) != this.f000072[num4]);
						if (!flag)
						{
							goto IL_5AE;
						}
						num4--;
						num5 -= num6;
						num16 = (1 << num5) - 1;
					}
					IL_5C8:
					flag = (num10 <= num8);
					if (!flag)
					{
						goto Block_26;
					}
					num11 = this.f00006f[num10];
					goto IL_5AE;
				}
			}
			Block_5:
			return -3;
			Block_10:
			p6[0] = -1;
			p7[0] = 0;
			return 0;
			Block_15:
			return -3;
			Block_17:
			return -3;
			Block_26:
			return (num3 != 0 && num8 != 1) ? -5 : 0;
		}

		// Token: 0x06000658 RID: 1624 RVA: 0x000300CC File Offset: 0x0002E2CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int inflate_trees_bits(int[] p0, int[] p1, int[] p2, int[] p3, ZlibCodec p4)
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (num2 == -3)
						{
							p4.Message = c0000c0.m00000f("þw(\u0016Õ\u001cQDÏ\0'Nmóm\u0003ïì\u000f\vD§:Ï:ÊW²rÖ\u0084ÂuDj\u0018êèE");
							num = delegate0da.f0000d7(-2);
							continue;
						}
						if (num2 == -5 || p1[0] == 0)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						return num2;
					case 1:
						goto IL_F4;
					case 2:
						goto IL_36;
					case 3:
						this.initWorkArea(19);
						this.f00006d[0] = 0;
						num2 = this.huft_build(p0, 0, 19, 19, null, null, p2, p1, p3, this.f00006d, this.f00006e);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			return num2;
			IL_F4:
			p4.Message = c0000c0.m00000f("øo.\vË\u0019_RØ\u0017nHqù,\nÿáN\u0004D°:Á6Ð\u0010ª\u007fËÃÂoR/");
			num2 = -3;
			return num2;
		}

		// Token: 0x06000659 RID: 1625 RVA: 0x000301E4 File Offset: 0x0002E3E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int inflate_trees_dynamic(int p0, int p1, int[] p2, int[] p3, int[] p4, int[] p5, int[] p6, int[] p7, ZlibCodec p8)
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_13E;
					case 1:
						goto IL_1B5;
					case 2:
					{
						bool flag;
						if (num2 == 0)
						{
							if (p4[0] != 0)
							{
								goto IL_1F6;
							}
							flag = (p0 <= 257);
						}
						else
						{
							flag = false;
						}
						if (flag)
						{
							goto IL_1F6;
						}
						if (num2 == -3)
						{
							goto Block_4;
						}
						if (num2 == -5)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_1CF;
					}
					case 3:
						this.initWorkArea(288);
						this.f00006d[0] = 0;
						num2 = this.huft_build(p2, 0, p0, 257, InfTree.cplens, InfTree.cplext, p5, p3, p7, this.f00006d, this.f00006e);
						if (num2 == 0 && p3[0] != 0)
						{
							this.initWorkArea(288);
							num2 = this.huft_build(p2, p0, p1, 0, InfTree.cpdist, InfTree.cpdext, p6, p4, p7, this.f00006d, this.f00006e);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						if (num2 == -3)
						{
							p8.Message = c0000c0.m00000f("þw(\u0016Õ\u001cQDÏ\0'Nmóm\vÿö\v\u0014L¨5Á6Ð\u0010ª\u007f\u0098\u0097ÄxR");
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_144;
					}
					break;
				}
			}
			Block_4:
			p8.Message = c0000c0.m00000f("þw(\u0016Õ\u001cQDÏ\0'Nmóm\u0003ÿñ\u001a\aC§\u007f\u008d'Ì\u0012»");
			goto IL_1EF;
			IL_13E:
			goto IL_164;
			IL_144:
			if (num2 != -4)
			{
				p8.Message = c0000c0.m00000f("øo.\vË\u0019_RØ\u0017n@aã(\u0015÷îA\nHª}Ù;\u009e\u0003¬rÝ");
				num2 = -3;
			}
			IL_164:
			return num2;
			IL_1B5:
			p8.Message = c0000c0.m00000f("øo.\vË\u0019_RØ\u0017nHaä9\u0006øá\vFY¶\u007fÈ");
			num2 = -3;
			goto IL_1EF;
			IL_1CF:
			if (num2 != -4)
			{
				p8.Message = c0000c0.m00000f("ôl=\u0010ßIW^ß\u0006/Bkòm\u0013äç\vFZ­nÅsÒ\u0012°pÌ\u008bÅ");
				num2 = -3;
			}
			IL_1EF:
			return num2;
			IL_1F6:
			return 0;
		}

		// Token: 0x0600065A RID: 1626 RVA: 0x000303EC File Offset: 0x0002E5EC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int inflate_trees_fixed(int[] p0, int[] p1, int[][] p2, int[][] p3, ZlibCodec p4)
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						p1[0] = 5;
						p2[0] = InfTree.fixed_tl;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						return result;
					case 2:
						p3[0] = InfTree.fixed_td;
						result = 0;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						p0[0] = 9;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			return result;
		}

		// Token: 0x0600065B RID: 1627 RVA: 0x00030498 File Offset: 0x0002E698
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void initWorkArea(int vsize)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_D1;
					case 1:
						goto IL_123;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							this.f00006e = new int[vsize];
						}
						Array.Clear(this.f00006e, 0, vsize);
						delegate0100.f000125(this.f00006f, 0, 16);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						bool flag = this.f00006d != null;
						if (!flag)
						{
							this.f00006d = new int[1];
							this.f00006e = new int[vsize];
							this.f00006f = new int[16];
							num = delegate0da.f0000d7(0);
							continue;
						}
						flag = (this.f00006e.Length >= vsize);
						num = delegate0da.f0000d7(-2);
						continue;
					}
					}
					break;
				}
			}
			IL_D1:
			this.f000070 = new int[3];
			this.f000071 = new int[15];
			this.f000072 = new int[16];
			return;
			IL_123:
			this.f000070[0] = 0;
			this.f000070[1] = 0;
			this.f000070[2] = 0;
			delegate0100.f000125(this.f000071, 0, 15);
			delegate0100.f000125(this.f000072, 0, 16);
		}

		// Token: 0x0600065C RID: 1628 RVA: 0x0003060C File Offset: 0x0002E80C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public InfTree()
		{
		}

		// Token: 0x0600065D RID: 1629 RVA: 0x00030640 File Offset: 0x0002E840
		// Note: this type is marked as 'beforefieldinit'.
		static InfTree()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			InfTree.fixed_tl = new int[]
			{
				96,
				7,
				256,
				0,
				8,
				80,
				0,
				8,
				16,
				84,
				8,
				115,
				82,
				7,
				31,
				0,
				8,
				112,
				0,
				8,
				48,
				0,
				9,
				192,
				80,
				7,
				10,
				0,
				8,
				96,
				0,
				8,
				32,
				0,
				9,
				160,
				0,
				8,
				0,
				0,
				8,
				128,
				0,
				8,
				64,
				0,
				9,
				224,
				80,
				7,
				6,
				0,
				8,
				88,
				0,
				8,
				24,
				0,
				9,
				144,
				83,
				7,
				59,
				0,
				8,
				120,
				0,
				8,
				56,
				0,
				9,
				208,
				81,
				7,
				17,
				0,
				8,
				104,
				0,
				8,
				40,
				0,
				9,
				176,
				0,
				8,
				8,
				0,
				8,
				136,
				0,
				8,
				72,
				0,
				9,
				240,
				80,
				7,
				4,
				0,
				8,
				84,
				0,
				8,
				20,
				85,
				8,
				227,
				83,
				7,
				43,
				0,
				8,
				116,
				0,
				8,
				52,
				0,
				9,
				200,
				81,
				7,
				13,
				0,
				8,
				100,
				0,
				8,
				36,
				0,
				9,
				168,
				0,
				8,
				4,
				0,
				8,
				132,
				0,
				8,
				68,
				0,
				9,
				232,
				80,
				7,
				8,
				0,
				8,
				92,
				0,
				8,
				28,
				0,
				9,
				152,
				84,
				7,
				83,
				0,
				8,
				124,
				0,
				8,
				60,
				0,
				9,
				216,
				82,
				7,
				23,
				0,
				8,
				108,
				0,
				8,
				44,
				0,
				9,
				184,
				0,
				8,
				12,
				0,
				8,
				140,
				0,
				8,
				76,
				0,
				9,
				248,
				80,
				7,
				3,
				0,
				8,
				82,
				0,
				8,
				18,
				85,
				8,
				163,
				83,
				7,
				35,
				0,
				8,
				114,
				0,
				8,
				50,
				0,
				9,
				196,
				81,
				7,
				11,
				0,
				8,
				98,
				0,
				8,
				34,
				0,
				9,
				164,
				0,
				8,
				2,
				0,
				8,
				130,
				0,
				8,
				66,
				0,
				9,
				228,
				80,
				7,
				7,
				0,
				8,
				90,
				0,
				8,
				26,
				0,
				9,
				148,
				84,
				7,
				67,
				0,
				8,
				122,
				0,
				8,
				58,
				0,
				9,
				212,
				82,
				7,
				19,
				0,
				8,
				106,
				0,
				8,
				42,
				0,
				9,
				180,
				0,
				8,
				10,
				0,
				8,
				138,
				0,
				8,
				74,
				0,
				9,
				244,
				80,
				7,
				5,
				0,
				8,
				86,
				0,
				8,
				22,
				192,
				8,
				0,
				83,
				7,
				51,
				0,
				8,
				118,
				0,
				8,
				54,
				0,
				9,
				204,
				81,
				7,
				15,
				0,
				8,
				102,
				0,
				8,
				38,
				0,
				9,
				172,
				0,
				8,
				6,
				0,
				8,
				134,
				0,
				8,
				70,
				0,
				9,
				236,
				80,
				7,
				9,
				0,
				8,
				94,
				0,
				8,
				30,
				0,
				9,
				156,
				84,
				7,
				99,
				0,
				8,
				126,
				0,
				8,
				62,
				0,
				9,
				220,
				82,
				7,
				27,
				0,
				8,
				110,
				0,
				8,
				46,
				0,
				9,
				188,
				0,
				8,
				14,
				0,
				8,
				142,
				0,
				8,
				78,
				0,
				9,
				252,
				96,
				7,
				256,
				0,
				8,
				81,
				0,
				8,
				17,
				85,
				8,
				131,
				82,
				7,
				31,
				0,
				8,
				113,
				0,
				8,
				49,
				0,
				9,
				194,
				80,
				7,
				10,
				0,
				8,
				97,
				0,
				8,
				33,
				0,
				9,
				162,
				0,
				8,
				1,
				0,
				8,
				129,
				0,
				8,
				65,
				0,
				9,
				226,
				80,
				7,
				6,
				0,
				8,
				89,
				0,
				8,
				25,
				0,
				9,
				146,
				83,
				7,
				59,
				0,
				8,
				121,
				0,
				8,
				57,
				0,
				9,
				210,
				81,
				7,
				17,
				0,
				8,
				105,
				0,
				8,
				41,
				0,
				9,
				178,
				0,
				8,
				9,
				0,
				8,
				137,
				0,
				8,
				73,
				0,
				9,
				242,
				80,
				7,
				4,
				0,
				8,
				85,
				0,
				8,
				21,
				80,
				8,
				258,
				83,
				7,
				43,
				0,
				8,
				117,
				0,
				8,
				53,
				0,
				9,
				202,
				81,
				7,
				13,
				0,
				8,
				101,
				0,
				8,
				37,
				0,
				9,
				170,
				0,
				8,
				5,
				0,
				8,
				133,
				0,
				8,
				69,
				0,
				9,
				234,
				80,
				7,
				8,
				0,
				8,
				93,
				0,
				8,
				29,
				0,
				9,
				154,
				84,
				7,
				83,
				0,
				8,
				125,
				0,
				8,
				61,
				0,
				9,
				218,
				82,
				7,
				23,
				0,
				8,
				109,
				0,
				8,
				45,
				0,
				9,
				186,
				0,
				8,
				13,
				0,
				8,
				141,
				0,
				8,
				77,
				0,
				9,
				250,
				80,
				7,
				3,
				0,
				8,
				83,
				0,
				8,
				19,
				85,
				8,
				195,
				83,
				7,
				35,
				0,
				8,
				115,
				0,
				8,
				51,
				0,
				9,
				198,
				81,
				7,
				11,
				0,
				8,
				99,
				0,
				8,
				35,
				0,
				9,
				166,
				0,
				8,
				3,
				0,
				8,
				131,
				0,
				8,
				67,
				0,
				9,
				230,
				80,
				7,
				7,
				0,
				8,
				91,
				0,
				8,
				27,
				0,
				9,
				150,
				84,
				7,
				67,
				0,
				8,
				123,
				0,
				8,
				59,
				0,
				9,
				214,
				82,
				7,
				19,
				0,
				8,
				107,
				0,
				8,
				43,
				0,
				9,
				182,
				0,
				8,
				11,
				0,
				8,
				139,
				0,
				8,
				75,
				0,
				9,
				246,
				80,
				7,
				5,
				0,
				8,
				87,
				0,
				8,
				23,
				192,
				8,
				0,
				83,
				7,
				51,
				0,
				8,
				119,
				0,
				8,
				55,
				0,
				9,
				206,
				81,
				7,
				15,
				0,
				8,
				103,
				0,
				8,
				39,
				0,
				9,
				174,
				0,
				8,
				7,
				0,
				8,
				135,
				0,
				8,
				71,
				0,
				9,
				238,
				80,
				7,
				9,
				0,
				8,
				95,
				0,
				8,
				31,
				0,
				9,
				158,
				84,
				7,
				99,
				0,
				8,
				127,
				0,
				8,
				63,
				0,
				9,
				222,
				82,
				7,
				27,
				0,
				8,
				111,
				0,
				8,
				47,
				0,
				9,
				190,
				0,
				8,
				15,
				0,
				8,
				143,
				0,
				8,
				79,
				0,
				9,
				254,
				96,
				7,
				256,
				0,
				8,
				80,
				0,
				8,
				16,
				84,
				8,
				115,
				82,
				7,
				31,
				0,
				8,
				112,
				0,
				8,
				48,
				0,
				9,
				193,
				80,
				7,
				10,
				0,
				8,
				96,
				0,
				8,
				32,
				0,
				9,
				161,
				0,
				8,
				0,
				0,
				8,
				128,
				0,
				8,
				64,
				0,
				9,
				225,
				80,
				7,
				6,
				0,
				8,
				88,
				0,
				8,
				24,
				0,
				9,
				145,
				83,
				7,
				59,
				0,
				8,
				120,
				0,
				8,
				56,
				0,
				9,
				209,
				81,
				7,
				17,
				0,
				8,
				104,
				0,
				8,
				40,
				0,
				9,
				177,
				0,
				8,
				8,
				0,
				8,
				136,
				0,
				8,
				72,
				0,
				9,
				241,
				80,
				7,
				4,
				0,
				8,
				84,
				0,
				8,
				20,
				85,
				8,
				227,
				83,
				7,
				43,
				0,
				8,
				116,
				0,
				8,
				52,
				0,
				9,
				201,
				81,
				7,
				13,
				0,
				8,
				100,
				0,
				8,
				36,
				0,
				9,
				169,
				0,
				8,
				4,
				0,
				8,
				132,
				0,
				8,
				68,
				0,
				9,
				233,
				80,
				7,
				8,
				0,
				8,
				92,
				0,
				8,
				28,
				0,
				9,
				153,
				84,
				7,
				83,
				0,
				8,
				124,
				0,
				8,
				60,
				0,
				9,
				217,
				82,
				7,
				23,
				0,
				8,
				108,
				0,
				8,
				44,
				0,
				9,
				185,
				0,
				8,
				12,
				0,
				8,
				140,
				0,
				8,
				76,
				0,
				9,
				249,
				80,
				7,
				3,
				0,
				8,
				82,
				0,
				8,
				18,
				85,
				8,
				163,
				83,
				7,
				35,
				0,
				8,
				114,
				0,
				8,
				50,
				0,
				9,
				197,
				81,
				7,
				11,
				0,
				8,
				98,
				0,
				8,
				34,
				0,
				9,
				165,
				0,
				8,
				2,
				0,
				8,
				130,
				0,
				8,
				66,
				0,
				9,
				229,
				80,
				7,
				7,
				0,
				8,
				90,
				0,
				8,
				26,
				0,
				9,
				149,
				84,
				7,
				67,
				0,
				8,
				122,
				0,
				8,
				58,
				0,
				9,
				213,
				82,
				7,
				19,
				0,
				8,
				106,
				0,
				8,
				42,
				0,
				9,
				181,
				0,
				8,
				10,
				0,
				8,
				138,
				0,
				8,
				74,
				0,
				9,
				245,
				80,
				7,
				5,
				0,
				8,
				86,
				0,
				8,
				22,
				192,
				8,
				0,
				83,
				7,
				51,
				0,
				8,
				118,
				0,
				8,
				54,
				0,
				9,
				205,
				81,
				7,
				15,
				0,
				8,
				102,
				0,
				8,
				38,
				0,
				9,
				173,
				0,
				8,
				6,
				0,
				8,
				134,
				0,
				8,
				70,
				0,
				9,
				237,
				80,
				7,
				9,
				0,
				8,
				94,
				0,
				8,
				30,
				0,
				9,
				157,
				84,
				7,
				99,
				0,
				8,
				126,
				0,
				8,
				62,
				0,
				9,
				221,
				82,
				7,
				27,
				0,
				8,
				110,
				0,
				8,
				46,
				0,
				9,
				189,
				0,
				8,
				14,
				0,
				8,
				142,
				0,
				8,
				78,
				0,
				9,
				253,
				96,
				7,
				256,
				0,
				8,
				81,
				0,
				8,
				17,
				85,
				8,
				131,
				82,
				7,
				31,
				0,
				8,
				113,
				0,
				8,
				49,
				0,
				9,
				195,
				80,
				7,
				10,
				0,
				8,
				97,
				0,
				8,
				33,
				0,
				9,
				163,
				0,
				8,
				1,
				0,
				8,
				129,
				0,
				8,
				65,
				0,
				9,
				227,
				80,
				7,
				6,
				0,
				8,
				89,
				0,
				8,
				25,
				0,
				9,
				147,
				83,
				7,
				59,
				0,
				8,
				121,
				0,
				8,
				57,
				0,
				9,
				211,
				81,
				7,
				17,
				0,
				8,
				105,
				0,
				8,
				41,
				0,
				9,
				179,
				0,
				8,
				9,
				0,
				8,
				137,
				0,
				8,
				73,
				0,
				9,
				243,
				80,
				7,
				4,
				0,
				8,
				85,
				0,
				8,
				21,
				80,
				8,
				258,
				83,
				7,
				43,
				0,
				8,
				117,
				0,
				8,
				53,
				0,
				9,
				203,
				81,
				7,
				13,
				0,
				8,
				101,
				0,
				8,
				37,
				0,
				9,
				171,
				0,
				8,
				5,
				0,
				8,
				133,
				0,
				8,
				69,
				0,
				9,
				235,
				80,
				7,
				8,
				0,
				8,
				93,
				0,
				8,
				29,
				0,
				9,
				155,
				84,
				7,
				83,
				0,
				8,
				125,
				0,
				8,
				61,
				0,
				9,
				219,
				82,
				7,
				23,
				0,
				8,
				109,
				0,
				8,
				45,
				0,
				9,
				187,
				0,
				8,
				13,
				0,
				8,
				141,
				0,
				8,
				77,
				0,
				9,
				251,
				80,
				7,
				3,
				0,
				8,
				83,
				0,
				8,
				19,
				85,
				8,
				195,
				83,
				7,
				35,
				0,
				8,
				115,
				0,
				8,
				51,
				0,
				9,
				199,
				81,
				7,
				11,
				0,
				8,
				99,
				0,
				8,
				35,
				0,
				9,
				167,
				0,
				8,
				3,
				0,
				8,
				131,
				0,
				8,
				67,
				0,
				9,
				231,
				80,
				7,
				7,
				0,
				8,
				91,
				0,
				8,
				27,
				0,
				9,
				151,
				84,
				7,
				67,
				0,
				8,
				123,
				0,
				8,
				59,
				0,
				9,
				215,
				82,
				7,
				19,
				0,
				8,
				107,
				0,
				8,
				43,
				0,
				9,
				183,
				0,
				8,
				11,
				0,
				8,
				139,
				0,
				8,
				75,
				0,
				9,
				247,
				80,
				7,
				5,
				0,
				8,
				87,
				0,
				8,
				23,
				192,
				8,
				0,
				83,
				7,
				51,
				0,
				8,
				119,
				0,
				8,
				55,
				0,
				9,
				207,
				81,
				7,
				15,
				0,
				8,
				103,
				0,
				8,
				39,
				0,
				9,
				175,
				0,
				8,
				7,
				0,
				8,
				135,
				0,
				8,
				71,
				0,
				9,
				239,
				80,
				7,
				9,
				0,
				8,
				95,
				0,
				8,
				31,
				0,
				9,
				159,
				84,
				7,
				99,
				0,
				8,
				127,
				0,
				8,
				63,
				0,
				9,
				223,
				82,
				7,
				27,
				0,
				8,
				111,
				0,
				8,
				47,
				0,
				9,
				191,
				0,
				8,
				15,
				0,
				8,
				143,
				0,
				8,
				79,
				0,
				9,
				255
			};
			InfTree.fixed_td = new int[]
			{
				80,
				5,
				1,
				87,
				5,
				257,
				83,
				5,
				17,
				91,
				5,
				4097,
				81,
				5,
				5,
				89,
				5,
				1025,
				85,
				5,
				65,
				93,
				5,
				16385,
				80,
				5,
				3,
				88,
				5,
				513,
				84,
				5,
				33,
				92,
				5,
				8193,
				82,
				5,
				9,
				90,
				5,
				2049,
				86,
				5,
				129,
				192,
				5,
				24577,
				80,
				5,
				2,
				87,
				5,
				385,
				83,
				5,
				25,
				91,
				5,
				6145,
				81,
				5,
				7,
				89,
				5,
				1537,
				85,
				5,
				97,
				93,
				5,
				24577,
				80,
				5,
				4,
				88,
				5,
				769,
				84,
				5,
				49,
				92,
				5,
				12289,
				82,
				5,
				13,
				90,
				5,
				3073,
				86,
				5,
				193,
				192,
				5,
				24577
			};
			InfTree.cplens = new int[]
			{
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				13,
				15,
				17,
				19,
				23,
				27,
				31,
				35,
				43,
				51,
				59,
				67,
				83,
				99,
				115,
				131,
				163,
				195,
				227,
				258,
				0,
				0
			};
			InfTree.cplext = new int[]
			{
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				1,
				1,
				1,
				1,
				2,
				2,
				2,
				2,
				3,
				3,
				3,
				3,
				4,
				4,
				4,
				4,
				5,
				5,
				5,
				5,
				0,
				112,
				112
			};
			InfTree.cpdist = new int[]
			{
				1,
				2,
				3,
				4,
				5,
				7,
				9,
				13,
				17,
				25,
				33,
				49,
				65,
				97,
				129,
				193,
				257,
				385,
				513,
				769,
				1025,
				1537,
				2049,
				3073,
				4097,
				6145,
				8193,
				12289,
				16385,
				24577
			};
			InfTree.cpdext = new int[]
			{
				0,
				0,
				0,
				0,
				1,
				1,
				2,
				2,
				3,
				3,
				4,
				4,
				5,
				5,
				6,
				6,
				7,
				7,
				8,
				8,
				9,
				9,
				10,
				10,
				11,
				11,
				12,
				12,
				13,
				13
			};
		}

		// Token: 0x04000345 RID: 837
		private const int MANY = 1440;

		// Token: 0x04000346 RID: 838
		private const int Z_OK = 0;

		// Token: 0x04000347 RID: 839
		private const int Z_STREAM_END = 1;

		// Token: 0x04000348 RID: 840
		private const int Z_NEED_DICT = 2;

		// Token: 0x04000349 RID: 841
		private const int Z_ERRNO = -1;

		// Token: 0x0400034A RID: 842
		private const int Z_STREAM_ERROR = -2;

		// Token: 0x0400034B RID: 843
		private const int Z_DATA_ERROR = -3;

		// Token: 0x0400034C RID: 844
		private const int Z_MEM_ERROR = -4;

		// Token: 0x0400034D RID: 845
		private const int Z_BUF_ERROR = -5;

		// Token: 0x0400034E RID: 846
		private const int Z_VERSION_ERROR = -6;

		// Token: 0x0400034F RID: 847
		internal const int fixed_bl = 9;

		// Token: 0x04000350 RID: 848
		internal const int fixed_bd = 5;

		// Token: 0x04000351 RID: 849
		internal const int BMAX = 15;

		// Token: 0x04000352 RID: 850
		internal static readonly int[] fixed_tl;

		// Token: 0x04000353 RID: 851
		internal static readonly int[] fixed_td;

		// Token: 0x04000354 RID: 852
		internal static readonly int[] cplens;

		// Token: 0x04000355 RID: 853
		internal static readonly int[] cplext;

		// Token: 0x04000356 RID: 854
		internal static readonly int[] cpdist;

		// Token: 0x04000357 RID: 855
		internal static readonly int[] cpdext;

		// Token: 0x04000358 RID: 856
		internal int[] f00006d = null;

		// Token: 0x04000359 RID: 857
		internal int[] f00006e = null;

		// Token: 0x0400035A RID: 858
		internal int[] f00006f = null;

		// Token: 0x0400035B RID: 859
		internal int[] f000070 = null;

		// Token: 0x0400035C RID: 860
		internal int[] f000071 = null;

		// Token: 0x0400035D RID: 861
		internal int[] f000072 = null;
	}
}
