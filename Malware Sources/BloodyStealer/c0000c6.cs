using System;
using System.Reflection;
using System.Reflection.Emit;

// Token: 0x020000C6 RID: 198
public class c0000c6
{
	// Token: 0x060006EE RID: 1774 RVA: 0x000349AC File Offset: 0x00032BAC
	static c0000c6()
	{
		c0000c6.f00008d = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
	}

	// Token: 0x060006EF RID: 1775 RVA: 0x000349D0 File Offset: 0x00032BD0
	[Obfuscation]
	public static void dau(int proxyDelegateTypeToken)
	{
		Type typeFromHandle = Type.GetTypeFromHandle(c0000c6.f00008d.ResolveTypeHandle(33554433 + proxyDelegateTypeToken));
		foreach (FieldInfo fieldInfo in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
		{
			string text = fieldInfo.Name;
			bool flag = false;
			if (text.EndsWith("%"))
			{
				flag = true;
				text = text.TrimEnd(new char[]
				{
					'%'
				});
			}
			uint num = BitConverter.ToUInt32(Convert.FromBase64String(text), 0);
			MethodInfo methodInfo = (MethodInfo)MethodBase.GetMethodFromHandle(c0000c6.f00008d.ResolveMethodHandle((int)(num + 167772161U)));
			Delegate value;
			if (methodInfo.IsStatic)
			{
				value = Delegate.CreateDelegate(fieldInfo.FieldType, methodInfo);
			}
			else
			{
				ParameterInfo[] parameters = methodInfo.GetParameters();
				int num2 = parameters.Length + 1;
				Type[] array = new Type[num2];
				array[0] = typeof(object);
				for (int j = 1; j < num2; j++)
				{
					array[j] = parameters[j - 1].ParameterType;
				}
				DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, methodInfo.ReturnType, array, typeFromHandle, true);
				ILGenerator ilgenerator = dynamicMethod.GetILGenerator();
				ilgenerator.Emit(OpCodes.Ldarg_0);
				if (num2 > 1)
				{
					ilgenerator.Emit(OpCodes.Ldarg_1);
				}
				if (num2 > 2)
				{
					ilgenerator.Emit(OpCodes.Ldarg_2);
				}
				if (num2 > 3)
				{
					ilgenerator.Emit(OpCodes.Ldarg_3);
				}
				if (num2 > 4)
				{
					for (int k = 4; k < num2; k++)
					{
						ilgenerator.Emit(OpCodes.Ldarg_S, k);
					}
				}
				ilgenerator.Emit(flag ? OpCodes.Callvirt : OpCodes.Call, methodInfo);
				ilgenerator.Emit(OpCodes.Ret);
				value = dynamicMethod.CreateDelegate(typeFromHandle);
			}
			fieldInfo.SetValue(null, value);
		}
	}

	// Token: 0x040003DB RID: 987
	private static ModuleHandle f00008d;

	// Token: 0x040003DC RID: 988
	public static string f00008e = "{FE3C441D-DF9D-407b-917D-0B4471A8296C}";
}
