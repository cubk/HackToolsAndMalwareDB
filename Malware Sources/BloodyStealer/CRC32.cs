using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Ionic.Zlib
{
	// Token: 0x02000090 RID: 144
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	[Guid("ebc25cf6-9120-4283-b972-0e5520d0000C")]
	public class CRC32
	{
		// Token: 0x1700011C RID: 284
		// (get) Token: 0x06000584 RID: 1412 RVA: 0x00024C04 File Offset: 0x00022E04
		public long TotalBytesRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._TotalBytesRead;
			}
		}

		// Token: 0x1700011D RID: 285
		// (get) Token: 0x06000585 RID: 1413 RVA: 0x00024C1C File Offset: 0x00022E1C
		public int Crc32Result
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return (int)(~(int)this._RunningCrc32Result);
			}
		}

		// Token: 0x06000586 RID: 1414 RVA: 0x00024C34 File Offset: 0x00022E34
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int GetCrc32(Stream input)
		{
			return this.GetCrc32AndCopy(input, null);
		}

		// Token: 0x06000587 RID: 1415 RVA: 0x00024C4C File Offset: 0x00022E4C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int GetCrc32AndCopy(Stream input, Stream output)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					byte[] array;
					int p;
					int num2;
					switch (num)
					{
					case 0:
						this._TotalBytesRead = 0L;
						num2 = delegate0144.f000185(input, array, 0, p);
						if (output != null)
						{
							delegate0109.f000133(output, array, 0, num2);
						}
						this._TotalBytesRead += (long)num2;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						output.Write(array, 0, num2);
						goto IL_11E;
					case 2:
						goto IL_12D;
					case 3:
						if (input == null)
						{
							goto Block_2;
						}
						array = new byte[8192];
						p = 8192;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_12D:
					if (num2 <= 0)
					{
						goto Block_4;
					}
					this.SlurpBlock(array, 0, num2);
					num2 = delegate0144.f000185(input, array, 0, p);
					if (output != null)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					IL_11E:
					this._TotalBytesRead += (long)num2;
					goto IL_12D;
				}
			}
			Block_2:
			throw new ZlibException(c0000c0.m00000f("Åi(DÏ\aCBØR=Xzò,\n¶ï\u001b\u0015YätÂ'\u009e\u0015»7Ö\u0096Úq\u0019"));
			Block_4:
			return (int)(~(int)this._RunningCrc32Result);
		}

		// Token: 0x06000588 RID: 1416 RVA: 0x00024D9C File Offset: 0x00022F9C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int ComputeCrc32(int W, byte B)
		{
			return this._InternalComputeCrc32((uint)W, B);
		}

		// Token: 0x06000589 RID: 1417 RVA: 0x00024DB4 File Offset: 0x00022FB4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int _InternalComputeCrc32(uint W, byte B)
		{
			return (int)(CRC32.crc32Table[(int)((UIntPtr)((W ^ (uint)B) & 255U))] ^ W >> 8);
		}

		// Token: 0x0600058A RID: 1418 RVA: 0x00024DD8 File Offset: 0x00022FD8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void SlurpBlock(byte[] block, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						goto IL_A0;
					case 1:
						num2++;
						goto IL_BC;
					case 2:
						goto IL_37;
					case 3:
						if (block == null)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						num2 = 0;
						goto IL_BC;
					}
					break;
					IL_37:
					int num3 = offset + num2;
					this._RunningCrc32Result = (this._RunningCrc32Result >> 8 ^ CRC32.crc32Table[(int)((UIntPtr)((uint)block[num3] ^ (this._RunningCrc32Result & 255U)))]);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_BC:
					if (num2 >= count)
					{
						goto Block_2;
					}
					goto IL_37;
				}
			}
			IL_A0:
			throw new ZlibException(c0000c0.m00000f("Åi(DÂ\bGV\u008c\u0010;Jnò?Gû÷\u001d\u0012\rªuÙsÜ\u0012þyÍ\u008fÚ3"));
			Block_2:
			this._TotalBytesRead += (long)count;
		}

		// Token: 0x0600058B RID: 1419 RVA: 0x00024EBC File Offset: 0x000230BC
		static CRC32()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			uint num = 3988292384U;
			CRC32.crc32Table = new uint[256];
			for (uint num2 = 0U; num2 < 256U; num2 += 1U)
			{
				uint num3 = num2;
				for (uint num4 = 8U; num4 > 0U; num4 -= 1U)
				{
					if ((num3 & 1U) == 1U)
					{
						num3 = (num3 >> 1 ^ num);
					}
					else
					{
						num3 >>= 1;
					}
				}
				CRC32.crc32Table[(int)((UIntPtr)num2)] = num3;
			}
		}

		// Token: 0x0600058C RID: 1420 RVA: 0x00024F48 File Offset: 0x00023148
		[MethodImpl(MethodImplOptions.NoInlining)]
		private uint gf2_matrix_times(uint[] matrix, uint vec)
		{
			uint num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num3;
					switch (num)
					{
					case 0:
						goto IL_6A;
					case 1:
						if (!flag)
						{
							return num2;
						}
						goto IL_6A;
					case 2:
						IL_36:
						vec >>= 1;
						num3++;
						goto IL_3F;
					case 3:
						num2 = 0U;
						num3 = 0;
						goto IL_3F;
					}
					break;
					IL_3F:
					flag = (vec != 0U);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_6A:
					flag = ((vec & 1U) != 1U);
					if (flag)
					{
						goto IL_36;
					}
					num2 ^= matrix[num3];
					num = delegate0da.f0000d7(-2);
				}
			}
			return num2;
		}

		// Token: 0x0600058D RID: 1421 RVA: 0x00024FF8 File Offset: 0x000231F8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void gf2_matrix_square(uint[] square, uint[] mat)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					int num2;
					switch (num)
					{
					case 0:
						goto IL_3A;
					case 1:
						if (!flag)
						{
							return;
						}
						square[num2] = this.gf2_matrix_times(mat, mat[num2]);
						num = delegate0da.f0000d7(-2);
						continue;
					case 2:
						num2++;
						goto IL_3A;
					case 3:
						num2 = 0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_3A:
					flag = (num2 < 32);
					num = delegate0da.f0000d7(-1);
				}
			}
		}

		// Token: 0x0600058E RID: 1422 RVA: 0x000250A8 File Offset: 0x000232A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Combine(int crc, int length)
		{
			uint num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						int i;
						uint[] array;
						while (i < 32)
						{
							uint num2;
							array[i] = num2;
							num2 <<= 1;
							i++;
						}
						uint[] array2;
						this.gf2_matrix_square(array2, array);
						this.gf2_matrix_square(array, array2);
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_16F;
					case 2:
					{
						uint num3 = (uint)length;
						for (;;)
						{
							uint[] array;
							uint[] array2;
							this.gf2_matrix_square(array2, array);
							if ((num3 & 1U) == 1U)
							{
								num4 = this.gf2_matrix_times(array2, num4);
							}
							num3 >>= 1;
							bool flag = num3 != 0U;
							if (!flag)
							{
								break;
							}
							this.gf2_matrix_square(array, array2);
							if ((num3 & 1U) == 1U)
							{
								num4 = this.gf2_matrix_times(array, num4);
							}
							num3 >>= 1;
							if (num3 == 0U)
							{
								goto IL_A8;
							}
						}
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						uint[] array2 = new uint[32];
						uint[] array = new uint[32];
						if (length == 0)
						{
							return;
						}
						num4 = ~this._RunningCrc32Result;
						array[0] = 3988292384U;
						uint num2 = 1U;
						int i = 1;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_A8:
			num4 ^= (uint)crc;
			this._RunningCrc32Result = ~num4;
			return;
			IL_16F:
			goto IL_A8;
		}

		// Token: 0x0600058F RID: 1423 RVA: 0x00025228 File Offset: 0x00023428
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CRC32()
		{
		}

		// Token: 0x0400023D RID: 573
		private const int BUFFER_SIZE = 8192;

		// Token: 0x0400023E RID: 574
		private long _TotalBytesRead;

		// Token: 0x0400023F RID: 575
		private static readonly uint[] crc32Table;

		// Token: 0x04000240 RID: 576
		private uint _RunningCrc32Result = uint.MaxValue;
	}
}
