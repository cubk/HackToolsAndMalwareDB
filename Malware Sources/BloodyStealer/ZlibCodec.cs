using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Ionic.Zlib
{
	// Token: 0x020000B3 RID: 179
	[Guid("ebc25cf6-9120-4283-b972-0e5520d0000D")]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	[ComVisible(true)]
	public sealed class ZlibCodec
	{
		// Token: 0x1700015A RID: 346
		// (get) Token: 0x060006A9 RID: 1705 RVA: 0x00033390 File Offset: 0x00031590
		public int Adler32
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return (int)this._Adler32;
			}
		}

		// Token: 0x060006AA RID: 1706 RVA: 0x000333A8 File Offset: 0x000315A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibCodec()
		{
		}

		// Token: 0x060006AB RID: 1707 RVA: 0x000333C8 File Offset: 0x000315C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibCodec(CompressionMode mode)
		{
			if (mode == CompressionMode.Compress)
			{
				int num = this.InitializeDeflate();
				if (num != 0)
				{
					throw new ZlibException(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013^Â\u001b:Eiû$\u001dó¢\b\t_ä~È5Ò\u0016ªr\u0096"));
				}
			}
			else
			{
				if (mode != CompressionMode.Decompress)
				{
					throw new ZlibException(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017ö\u001e'N[ã?\u0002÷ï(\nL²uß}"));
				}
				int num = this.InitializeInflate();
				if (num != 0)
				{
					throw new ZlibException(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013^Â\u001b:Eiû$\u001dó¢\b\t_äsÃ5Ò\u0016ªr\u0096"));
				}
			}
		}

		// Token: 0x060006AC RID: 1708 RVA: 0x00033464 File Offset: 0x00031664
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeInflate()
		{
			return this.InitializeInflate(this.WindowBits);
		}

		// Token: 0x060006AD RID: 1709 RVA: 0x00033480 File Offset: 0x00031680
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeInflate(bool expectRfc1950Header)
		{
			return this.InitializeInflate(this.WindowBits, expectRfc1950Header);
		}

		// Token: 0x060006AE RID: 1710 RVA: 0x0003349C File Offset: 0x0003169C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeInflate(int windowBits)
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.WindowBits = windowBits;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						return result;
					case 2:
						result = this.InitializeInflate(windowBits, true);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			return result;
		}

		// Token: 0x060006AF RID: 1711 RVA: 0x0003353C File Offset: 0x0003173C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeInflate(int windowBits, bool expectRfc1950Header)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (this.dstate != null)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						this.istate = new InflateManager(expectRfc1950Header);
						num = delegate0da.f0000d7(-1);
						continue;
					case 1:
						goto IL_B2;
					case 2:
						goto IL_36;
					case 3:
						this.WindowBits = windowBits;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			throw new ZlibException(c0000c0.m00000f("Èn8DË\bJ\u0017Â\u001d:\fkö!\v¶Ë\0\u000fY­{Á:Ä\u0012\u0097yÞ\u008f×iRbE¸ìF\u0084[\u001fèöúUÎ\\\u009a\u009f9\u009e®\\b¥\u0084òy\u009d\u0095\u0017E\u0094â÷zµdÉã"));
			IL_B2:
			return this.istate.Initialize(this, windowBits);
		}

		// Token: 0x060006B0 RID: 1712 RVA: 0x0003360C File Offset: 0x0003180C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int Inflate(FlushType flush)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = this.istate != null;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_92;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A2;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_92:
			throw new ZlibException(c0000c0.m00000f("ßnm-È\u000f_VØ\u0017n\u007f|ö9\u0002·"));
			IL_A2:
			return this.istate.Inflate(flush);
		}

		// Token: 0x060006B1 RID: 1713 RVA: 0x000336CC File Offset: 0x000318CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int EndInflate()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int result;
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							goto Block_1;
						}
						goto IL_36;
					}
					case 1:
						return result;
					case 2:
						goto IL_36;
					case 3:
					{
						bool flag = this.istate != null;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_36:
					result = this.istate.End();
					this.istate = null;
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_1:
			throw new ZlibException(c0000c0.m00000f("ßnm-È\u000f_VØ\u0017n\u007f|ö9\u0002·"));
		}

		// Token: 0x060006B2 RID: 1714 RVA: 0x0003377C File Offset: 0x0003197C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int SyncInflate()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = this.istate != null;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_92;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A2;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_92:
			throw new ZlibException(c0000c0.m00000f("ßnm-È\u000f_VØ\u0017n\u007f|ö9\u0002·"));
			IL_A2:
			return this.istate.Sync();
		}

		// Token: 0x060006B3 RID: 1715 RVA: 0x00033838 File Offset: 0x00031A38
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeDeflate()
		{
			return this._InternalInitializeDeflate(true);
		}

		// Token: 0x060006B4 RID: 1716 RVA: 0x00033850 File Offset: 0x00031A50
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeDeflate(CompressionLevel level)
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.CompressLevel = level;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						return result;
					case 2:
						result = this._InternalInitializeDeflate(true);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			return result;
		}

		// Token: 0x060006B5 RID: 1717 RVA: 0x000338F0 File Offset: 0x00031AF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeDeflate(CompressionLevel level, bool wantRfc1950Header)
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.CompressLevel = level;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						return result;
					case 2:
						result = this._InternalInitializeDeflate(wantRfc1950Header);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			return result;
		}

		// Token: 0x060006B6 RID: 1718 RVA: 0x00033990 File Offset: 0x00031B90
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeDeflate(CompressionLevel level, int bits)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.CompressLevel = level;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_8D;
					case 2:
						this.WindowBits = bits;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8D:
			return this._InternalInitializeDeflate(true);
		}

		// Token: 0x060006B7 RID: 1719 RVA: 0x00033A34 File Offset: 0x00031C34
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int InitializeDeflate(CompressionLevel level, int bits, bool wantRfc1950Header)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.CompressLevel = level;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_8D;
					case 2:
						this.WindowBits = bits;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8D:
			return this._InternalInitializeDeflate(wantRfc1950Header);
		}

		// Token: 0x060006B8 RID: 1720 RVA: 0x00033AD8 File Offset: 0x00031CD8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int _InternalInitializeDeflate(bool wantRfc1950Header)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							goto Block_1;
						}
						goto IL_36;
					}
					case 1:
						goto IL_9E;
					case 2:
						goto IL_36;
					case 3:
					{
						bool flag = this.istate == null;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_36:
					this.dstate = new DeflateManager();
					this.dstate.WantRfc1950HeaderBytes = wantRfc1950Header;
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_1:
			throw new ZlibException(c0000c0.m00000f("Èn8DË\bJ\u0017Â\u001d:\fkö!\v¶Ë\0\u000fY­{Á:Ä\u0012\u009arÞ\u008f×iRbE¸ìF\u0084[\u001fèöúUÎ\\\u009a\u009f9\u009e®\\b¥\u0084òy\u009d\u0095\u001aN\u0094â÷zµdÉã"));
			IL_9E:
			return this.dstate.Initialize(this, this.CompressLevel, this.WindowBits, this.Strategy);
		}

		// Token: 0x060006B9 RID: 1721 RVA: 0x00033BA4 File Offset: 0x00031DA4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int Deflate(FlushType flush)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = this.dstate != null;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_92;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A2;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_92:
			throw new ZlibException(c0000c0.m00000f("ßnm Ã\u000f_VØ\u0017n\u007f|ö9\u0002·"));
			IL_A2:
			return this.dstate.Deflate(flush);
		}

		// Token: 0x060006BA RID: 1722 RVA: 0x00033C64 File Offset: 0x00031E64
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int EndDeflate()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int result;
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							goto Block_1;
						}
						goto IL_36;
					}
					case 1:
						return result;
					case 2:
						goto IL_36;
					case 3:
					{
						bool flag = this.dstate != null;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_36:
					this.dstate = null;
					result = 0;
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_1:
			throw new ZlibException(c0000c0.m00000f("ßnm Ã\u000f_VØ\u0017n\u007f|ö9\u0002·"));
		}

		// Token: 0x060006BB RID: 1723 RVA: 0x00033D08 File Offset: 0x00031F08
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ResetDeflate()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = this.dstate != null;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_92;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A2;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_92:
			throw new ZlibException(c0000c0.m00000f("ßnm Ã\u000f_VØ\u0017n\u007f|ö9\u0002·"));
			IL_A2:
			this.dstate.Reset();
		}

		// Token: 0x060006BC RID: 1724 RVA: 0x00033DC4 File Offset: 0x00031FC4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int SetDeflateParams(CompressionLevel level, CompressionStrategy strategy)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = this.dstate != null;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_92;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A2;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_92:
			throw new ZlibException(c0000c0.m00000f("ßnm Ã\u000f_VØ\u0017n\u007f|ö9\u0002·"));
			IL_A2:
			return this.dstate.SetParams(level, strategy);
		}

		// Token: 0x060006BD RID: 1725 RVA: 0x00033E84 File Offset: 0x00032084
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int SetDictionary(byte[] dictionary)
		{
			bool flag;
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (!flag)
						{
							result = this.istate.SetDictionary(dictionary);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						flag = (this.dstate == null);
						num = delegate0da.f0000d7(-1);
						continue;
					case 1:
						goto IL_AB;
					case 2:
						goto IL_36;
					case 3:
						flag = (this.istate == null);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			return result;
			IL_AB:
			if (flag)
			{
				throw new ZlibException(c0000c0.m00000f("ßnm-È\u000f_VØ\u0017nCz·\t\u0002ðî\u000f\u0012HäiÙ2Ê\u0012ÿ"));
			}
			result = this.dstate.SetDictionary(dictionary);
			return result;
		}

		// Token: 0x060006BE RID: 1726 RVA: 0x00033F68 File Offset: 0x00032168
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void flush_pending()
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_13D;
					case 1:
						goto IL_1CD;
					case 2:
						goto IL_36;
					case 3:
						num2 = this.dstate.pendingCount;
						if (num2 > this.AvailableBytesOut)
						{
							num2 = this.AvailableBytesOut;
						}
						if (num2 == 0)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						if (this.dstate.pending.Length <= this.dstate.nextPending || this.OutputBuffer.Length <= this.NextOut || this.dstate.pending.Length < this.dstate.nextPending + num2 || this.OutputBuffer.Length < this.NextOut + num2)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						delegate0fe.f000121(this.dstate.pending, this.dstate.nextPending, this.OutputBuffer, this.NextOut, num2);
						this.NextOut += num2;
						this.dstate.nextPending += num2;
						this.TotalBytesOut += (long)num2;
						this.AvailableBytesOut -= num2;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					break;
				}
			}
			IL_36:
			throw new ZlibException(string.Format(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017ÿ\u0006/Xm¹mOæç\0\u0002Dª}\u0083\u001fÛ\u0019¹cÐÞÍ-JfLèèN\u0094W\u0003¯ÖôLÌAÉ\u0083(ªé"), this.dstate.pending.Length, this.dstate.pendingCount));
			IL_13D:
			return;
			IL_1CD:
			this.dstate.pendingCount -= num2;
			if (this.dstate.pendingCount == 0)
			{
				this.dstate.nextPending = 0;
			}
		}

		// Token: 0x060006BF RID: 1727 RVA: 0x0003417C File Offset: 0x0003237C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int read_buf(byte[] buf, int start, int size)
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_E9;
					case 1:
						goto IL_4B;
					case 2:
					{
						bool flag = !this.dstate.WantRfc1950HeaderBytes;
						if (flag)
						{
							goto IL_4B;
						}
						this._Adler32 = Adler.Adler32(this._Adler32, this.InputBuffer, this.NextIn, num2);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
						num2 = this.AvailableBytesIn;
						if (num2 > size)
						{
							num2 = size;
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_E9;
					}
					break;
					IL_E9:
					if (num2 == 0)
					{
						goto Block_2;
					}
					this.AvailableBytesIn -= num2;
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_4B:
			Array.Copy(this.InputBuffer, this.NextIn, buf, start, num2);
			this.NextIn += num2;
			this.TotalBytesIn += (long)num2;
			return num2;
			Block_2:
			return 0;
		}

		// Token: 0x060006C0 RID: 1728 RVA: 0x000342AC File Offset: 0x000324AC
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZlibCodec()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x040003B3 RID: 947
		public byte[] InputBuffer;

		// Token: 0x040003B4 RID: 948
		public int NextIn;

		// Token: 0x040003B5 RID: 949
		public int AvailableBytesIn;

		// Token: 0x040003B6 RID: 950
		public long TotalBytesIn;

		// Token: 0x040003B7 RID: 951
		public byte[] OutputBuffer;

		// Token: 0x040003B8 RID: 952
		public int NextOut;

		// Token: 0x040003B9 RID: 953
		public int AvailableBytesOut;

		// Token: 0x040003BA RID: 954
		public long TotalBytesOut;

		// Token: 0x040003BB RID: 955
		public string Message;

		// Token: 0x040003BC RID: 956
		internal DeflateManager dstate;

		// Token: 0x040003BD RID: 957
		internal InflateManager istate;

		// Token: 0x040003BE RID: 958
		internal uint _Adler32;

		// Token: 0x040003BF RID: 959
		public CompressionLevel CompressLevel = CompressionLevel.f000073;

		// Token: 0x040003C0 RID: 960
		public int WindowBits = 15;

		// Token: 0x040003C1 RID: 961
		public CompressionStrategy Strategy = CompressionStrategy.f000074;
	}
}
