using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;

namespace Application.Grabber.Browsers
{
	// Token: 0x0200002D RID: 45
	public class JsonObject : JsonValue, IDictionary<string, JsonValue>, ICollection<KeyValuePair<string, JsonValue>>, IEnumerable<KeyValuePair<string, JsonValue>>, IEnumerable
	{
		// Token: 0x17000039 RID: 57
		// (get) Token: 0x0600014E RID: 334 RVA: 0x000094E8 File Offset: 0x000076E8
		public override int Count
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.map.Count;
			}
		}

		// Token: 0x1700003A RID: 58
		public sealed override JsonValue this[string key]
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.map[key];
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this.map[key] = value;
			}
		}

		// Token: 0x1700003B RID: 59
		// (get) Token: 0x06000151 RID: 337 RVA: 0x00009538 File Offset: 0x00007738
		public override JsonType JsonType
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return JsonType.f00002a;
			}
		}

		// Token: 0x1700003C RID: 60
		// (get) Token: 0x06000152 RID: 338 RVA: 0x00009548 File Offset: 0x00007748
		public ICollection<string> Keys
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.map.Keys;
			}
		}

		// Token: 0x1700003D RID: 61
		// (get) Token: 0x06000153 RID: 339 RVA: 0x00009560 File Offset: 0x00007760
		public ICollection<JsonValue> Values
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.map.Values;
			}
		}

		// Token: 0x1700003E RID: 62
		// (get) Token: 0x06000154 RID: 340 RVA: 0x00009578 File Offset: 0x00007778
		bool ICollection<KeyValuePair<string, JsonValue>>.p000006
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x06000155 RID: 341 RVA: 0x00009588 File Offset: 0x00007788
		[MethodImpl(MethodImplOptions.NoInlining)]
		public JsonObject(params KeyValuePair<string, JsonValue>[] items)
		{
			this.map = new SortedDictionary<string, JsonValue>(delegate0108.f00012f());
			if (items != null)
			{
				this.AddRange(items);
			}
		}

		// Token: 0x06000156 RID: 342 RVA: 0x000095B0 File Offset: 0x000077B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public JsonObject(IEnumerable<KeyValuePair<string, JsonValue>> items)
		{
			if (items == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("øu(\tÕ"));
			}
			this.map = new SortedDictionary<string, JsonValue>(delegate0108.f00012f());
			this.AddRange(items);
		}

		// Token: 0x06000157 RID: 343 RVA: 0x000095E8 File Offset: 0x000077E8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public IEnumerator<KeyValuePair<string, JsonValue>> GetEnumerator()
		{
			return this.map.GetEnumerator();
		}

		// Token: 0x06000158 RID: 344 RVA: 0x00009608 File Offset: 0x00007808
		[MethodImpl(MethodImplOptions.NoInlining)]
		IEnumerator IEnumerable.GetEnumerator()
		{
			return this.map.GetEnumerator();
		}

		// Token: 0x06000159 RID: 345 RVA: 0x00009628 File Offset: 0x00007828
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Add(string key, JsonValue value)
		{
			if (key == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("úd4"));
			}
			this.map.Add(key, value);
		}

		// Token: 0x0600015A RID: 346 RVA: 0x00009658 File Offset: 0x00007858
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Add(KeyValuePair<string, JsonValue> pair)
		{
			this.Add(pair.Key, pair.Value);
		}

		// Token: 0x0600015B RID: 347 RVA: 0x0000967C File Offset: 0x0000787C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddRange(IEnumerable<KeyValuePair<string, JsonValue>> items)
		{
			if (items == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("øu(\tÕ"));
			}
			foreach (KeyValuePair<string, JsonValue> keyValuePair in items)
			{
				this.map.Add(keyValuePair.Key, keyValuePair.Value);
			}
		}

		// Token: 0x0600015C RID: 348 RVA: 0x000096D0 File Offset: 0x000078D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddRange(params KeyValuePair<string, JsonValue>[] items)
		{
			this.AddRange(items);
		}

		// Token: 0x0600015D RID: 349 RVA: 0x000096E4 File Offset: 0x000078E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Clear()
		{
			this.map.Clear();
		}

		// Token: 0x0600015E RID: 350 RVA: 0x000096FC File Offset: 0x000078FC
		[MethodImpl(MethodImplOptions.NoInlining)]
		bool ICollection<KeyValuePair<string, JsonValue>>.Contains(KeyValuePair<string, JsonValue> item)
		{
			return ((ICollection<KeyValuePair<string, JsonValue>>)this.map).Contains(item);
		}

		// Token: 0x0600015F RID: 351 RVA: 0x00009718 File Offset: 0x00007918
		[MethodImpl(MethodImplOptions.NoInlining)]
		bool ICollection<KeyValuePair<string, JsonValue>>.Remove(KeyValuePair<string, JsonValue> item)
		{
			return ((ICollection<KeyValuePair<string, JsonValue>>)this.map).Remove(item);
		}

		// Token: 0x06000160 RID: 352 RVA: 0x00009734 File Offset: 0x00007934
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override bool ContainsKey(string key)
		{
			if (key == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("úd4"));
			}
			return this.map.ContainsKey(key);
		}

		// Token: 0x06000161 RID: 353 RVA: 0x00009760 File Offset: 0x00007960
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void CopyTo(KeyValuePair<string, JsonValue>[] array, int arrayIndex)
		{
			((ICollection<KeyValuePair<string, JsonValue>>)this.map).CopyTo(array, arrayIndex);
		}

		// Token: 0x06000162 RID: 354 RVA: 0x0000977C File Offset: 0x0000797C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public bool Remove(string key)
		{
			if (key == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("úd4"));
			}
			return this.map.Remove(key);
		}

		// Token: 0x06000163 RID: 355 RVA: 0x000097A8 File Offset: 0x000079A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Save(Stream stream, bool parsing)
		{
			if (stream == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("âu?\u0001Ç\u0004"));
			}
			stream.WriteByte(123);
			foreach (KeyValuePair<string, JsonValue> keyValuePair in this.map)
			{
				delegate0107.f00012e(stream, 34);
				byte[] array = delegate0d7.f0000d1(delegate0d6.f0000cb(), base.EscapeString(keyValuePair.Key));
				delegate0109.f000132(stream, array, 0, array.Length);
				delegate0107.f00012e(stream, 34);
				delegate0107.f00012e(stream, 44);
				delegate0107.f00012e(stream, 32);
				if (keyValuePair.Value == null)
				{
					delegate0107.f00012e(stream, 110);
					delegate0107.f00012e(stream, 117);
					delegate0107.f00012e(stream, 108);
					delegate0107.f00012e(stream, 108);
				}
				else
				{
					keyValuePair.Value.Save(stream, parsing);
				}
			}
			stream.WriteByte(125);
		}

		// Token: 0x06000164 RID: 356 RVA: 0x000098B4 File Offset: 0x00007AB4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public bool TryGetValue(string key, out JsonValue value)
		{
			return this.map.TryGetValue(key, out value);
		}

		// Token: 0x06000165 RID: 357 RVA: 0x000098D0 File Offset: 0x00007AD0
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static JsonObject()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000071 RID: 113
		private SortedDictionary<string, JsonValue> map;
	}
}
