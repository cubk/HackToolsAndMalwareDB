using System;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x02000064 RID: 100
	internal class CompoundCriterion : SelectionCriterion
	{
		// Token: 0x1700008B RID: 139
		// (get) Token: 0x060002F5 RID: 757 RVA: 0x00011E8C File Offset: 0x0001008C
		// (set) Token: 0x060002F6 RID: 758 RVA: 0x00011EA0 File Offset: 0x000100A0
		internal SelectionCriterion Right
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._Right;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (value == null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_93;
						case 1:
							return;
						case 2:
							this.Conjunction = LogicalConjunction.NONE;
							num = delegate0da.f0000d7(-1);
							continue;
						case 3:
							this._Right = value;
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				return;
				IL_93:
				if (this.Conjunction == LogicalConjunction.NONE)
				{
					this.Conjunction = LogicalConjunction.AND;
				}
			}
		}

		// Token: 0x060002F7 RID: 759 RVA: 0x00011F54 File Offset: 0x00010154
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(string filename)
		{
			bool flag;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_A6;
					case 1:
						goto IL_E2;
					case 2:
						goto IL_36;
					case 3:
						flag = this.Left.Evaluate(filename);
						switch (this.Conjunction)
						{
						case LogicalConjunction.AND:
							if (flag)
							{
								flag = this.Right.Evaluate(filename);
								num = delegate0da.f0000d7(-2);
								continue;
							}
							return flag;
						case LogicalConjunction.OR:
							if (!flag)
							{
								flag = this.Right.Evaluate(filename);
								num = delegate0da.f0000d7(-1);
								continue;
							}
							return flag;
						case LogicalConjunction.XOR:
							goto IL_E7;
						default:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
					break;
				}
			}
			IL_36:
			return flag;
			IL_A6:
			throw new ArgumentException(c0000c0.m00000f("Òn#\u000eÓ\aPCÅ\u001d "));
			IL_E2:
			return flag;
			IL_E7:
			flag ^= this.Right.Evaluate(filename);
			return flag;
		}

		// Token: 0x060002F8 RID: 760 RVA: 0x00012058 File Offset: 0x00010258
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			StringBuilder p = new StringBuilder();
			delegate0f7.f000110(p, c0000c0.m00000f("¹")).Append((this.Left != null) ? this.Left.ToString() : c0000c0.m00000f("ÿt!\b")).Append(c0000c0.m00000f("±")).Append(this.Conjunction.ToString()).Append(c0000c0.m00000f("±")).Append((this.Right != null) ? this.Right.ToString() : c0000c0.m00000f("ÿt!\b")).Append(c0000c0.m00000f("¸"));
			return delegate0cd.f0000ab(p);
		}

		// Token: 0x060002F9 RID: 761 RVA: 0x00012118 File Offset: 0x00010318
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(ZipEntry entry)
		{
			bool flag;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_A6;
					case 1:
						goto IL_D6;
					case 2:
						goto IL_36;
					case 3:
						flag = this.Left.Evaluate(entry);
						switch (this.Conjunction)
						{
						case LogicalConjunction.AND:
							if (flag)
							{
								flag = this.Right.Evaluate(entry);
								num = delegate0da.f0000d7(-2);
								continue;
							}
							return flag;
						case LogicalConjunction.OR:
							if (!flag)
							{
								flag = this.Right.Evaluate(entry);
								num = delegate0da.f0000d7(-1);
								continue;
							}
							return flag;
						case LogicalConjunction.XOR:
							goto IL_DB;
						default:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
					break;
				}
			}
			IL_36:
			IL_A6:
			IL_D6:
			return flag;
			IL_DB:
			flag ^= this.Right.Evaluate(entry);
			return flag;
		}

		// Token: 0x060002FA RID: 762 RVA: 0x00012210 File Offset: 0x00010410
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CompoundCriterion()
		{
		}

		// Token: 0x060002FB RID: 763 RVA: 0x00012218 File Offset: 0x00010418
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static CompoundCriterion()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000120 RID: 288
		internal LogicalConjunction Conjunction;

		// Token: 0x04000121 RID: 289
		internal SelectionCriterion Left;

		// Token: 0x04000122 RID: 290
		private SelectionCriterion _Right;
	}
}
