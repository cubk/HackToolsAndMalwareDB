using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x0200007D RID: 125
	public class ReadProgressEventArgs : ZipProgressEventArgs
	{
		// Token: 0x060003B7 RID: 951 RVA: 0x00015E68 File Offset: 0x00014068
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ReadProgressEventArgs()
		{
		}

		// Token: 0x060003B8 RID: 952 RVA: 0x00015E70 File Offset: 0x00014070
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ReadProgressEventArgs(string archiveName, ZipProgressEventType flavor) : base(archiveName, flavor)
		{
		}

		// Token: 0x060003B9 RID: 953 RVA: 0x00015E7C File Offset: 0x0001407C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ReadProgressEventArgs Before(string archiveName, int entriesTotal)
		{
			return new ReadProgressEventArgs(archiveName, ZipProgressEventType.Reading_BeforeReadEntry)
			{
				EntriesTotal = entriesTotal
			};
		}

		// Token: 0x060003BA RID: 954 RVA: 0x00015E9C File Offset: 0x0001409C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ReadProgressEventArgs After(string archiveName, ZipEntry entry, int entriesTotal)
		{
			return new ReadProgressEventArgs(archiveName, ZipProgressEventType.Reading_AfterReadEntry)
			{
				EntriesTotal = entriesTotal,
				CurrentEntry = entry
			};
		}

		// Token: 0x060003BB RID: 955 RVA: 0x00015EC0 File Offset: 0x000140C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ReadProgressEventArgs Started(string archiveName)
		{
			return new ReadProgressEventArgs(archiveName, ZipProgressEventType.Reading_Started);
		}

		// Token: 0x060003BC RID: 956 RVA: 0x00015ED8 File Offset: 0x000140D8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ReadProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesXferred, long totalBytes)
		{
			ReadProgressEventArgs readProgressEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						readProgressEventArgs.CurrentEntry = entry;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_94;
					case 2:
						readProgressEventArgs.BytesTransferred = bytesXferred;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						readProgressEventArgs = new ReadProgressEventArgs(archiveName, ZipProgressEventType.Reading_ArchiveBytesRead);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_94:
			readProgressEventArgs.TotalBytesToTransfer = totalBytes;
			return readProgressEventArgs;
		}

		// Token: 0x060003BD RID: 957 RVA: 0x00015F84 File Offset: 0x00014184
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ReadProgressEventArgs Completed(string archiveName)
		{
			return new ReadProgressEventArgs(archiveName, ZipProgressEventType.Reading_Completed);
		}

		// Token: 0x060003BE RID: 958 RVA: 0x00015F9C File Offset: 0x0001419C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ReadProgressEventArgs()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}
	}
}
