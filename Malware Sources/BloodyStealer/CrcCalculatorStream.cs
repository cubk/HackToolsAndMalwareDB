using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x02000091 RID: 145
	public class CrcCalculatorStream : Stream, IDisposable
	{
		// Token: 0x1700011E RID: 286
		// (get) Token: 0x06000590 RID: 1424 RVA: 0x00025238 File Offset: 0x00023438
		public long TotalBytesSlurped
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f000067.TotalBytesRead;
			}
		}

		// Token: 0x06000591 RID: 1425 RVA: 0x00025254 File Offset: 0x00023454
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CrcCalculatorStream(Stream stream) : this(true, CrcCalculatorStream.UnsetLengthLimit, stream)
		{
		}

		// Token: 0x06000592 RID: 1426 RVA: 0x00025264 File Offset: 0x00023464
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CrcCalculatorStream(Stream stream, bool leaveOpen) : this(leaveOpen, CrcCalculatorStream.UnsetLengthLimit, stream)
		{
		}

		// Token: 0x06000593 RID: 1427 RVA: 0x00025274 File Offset: 0x00023474
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CrcCalculatorStream(Stream stream, long length) : this(true, length, stream)
		{
			if (length < 0L)
			{
				throw new ArgumentException(c0000c0.m00000f("ýd#\u0003Ò\u0001"));
			}
		}

		// Token: 0x06000594 RID: 1428 RVA: 0x000252AC File Offset: 0x000234AC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public CrcCalculatorStream(Stream stream, long length, bool leaveOpen) : this(leaveOpen, length, stream)
		{
			if (length < 0L)
			{
				throw new ArgumentException(c0000c0.m00000f("ýd#\u0003Ò\u0001"));
			}
		}

		// Token: 0x06000595 RID: 1429 RVA: 0x000252E4 File Offset: 0x000234E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private CrcCalculatorStream(bool leaveOpen, long length, Stream stream)
		{
			this._innerStream = stream;
			this.f000067 = new CRC32();
			this._lengthLimit = length;
			this._leaveOpen = leaveOpen;
		}

		// Token: 0x1700011F RID: 287
		// (get) Token: 0x06000596 RID: 1430 RVA: 0x00025318 File Offset: 0x00023518
		public int Crc
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f000067.Crc32Result;
			}
		}

		// Token: 0x17000120 RID: 288
		// (get) Token: 0x06000597 RID: 1431 RVA: 0x00025334 File Offset: 0x00023534
		// (set) Token: 0x06000598 RID: 1432 RVA: 0x0002534C File Offset: 0x0002354C
		public bool LeaveOpen
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._leaveOpen;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._leaveOpen = value;
			}
		}

		// Token: 0x06000599 RID: 1433 RVA: 0x00025360 File Offset: 0x00023560
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int count2;
					switch (num)
					{
					case 0:
					{
						if (this.f000067.TotalBytesRead >= this._lengthLimit)
						{
							goto Block_3;
						}
						long num2 = this._lengthLimit - this.f000067.TotalBytesRead;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_E8;
					case 2:
					{
						long num2;
						if (num2 < (long)count)
						{
							count2 = (int)num2;
							goto IL_48;
						}
						goto IL_48;
					}
					case 3:
						count2 = count;
						if (this._lengthLimit != CrcCalculatorStream.UnsetLengthLimit)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_48;
					}
					break;
					IL_48:
					num3 = this._innerStream.Read(buffer, offset, count2);
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_3:
			return 0;
			IL_E8:
			if (num3 > 0)
			{
				this.f000067.SlurpBlock(buffer, offset, num3);
			}
			return num3;
		}

		// Token: 0x0600059A RID: 1434 RVA: 0x0002547C File Offset: 0x0002367C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							this.f000067.SlurpBlock(buffer, offset, count);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_37;
					}
					case 1:
						return;
					case 2:
						goto IL_37;
					case 3:
					{
						bool flag = count <= 0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_37:
					this._innerStream.Write(buffer, offset, count);
					num = delegate0da.f0000d7(-1);
				}
			}
		}

		// Token: 0x17000121 RID: 289
		// (get) Token: 0x0600059B RID: 1435 RVA: 0x00025534 File Offset: 0x00023734
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.CanRead;
			}
		}

		// Token: 0x17000122 RID: 290
		// (get) Token: 0x0600059C RID: 1436 RVA: 0x00025550 File Offset: 0x00023750
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.CanSeek;
			}
		}

		// Token: 0x17000123 RID: 291
		// (get) Token: 0x0600059D RID: 1437 RVA: 0x0002556C File Offset: 0x0002376C
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._innerStream.CanWrite;
			}
		}

		// Token: 0x0600059E RID: 1438 RVA: 0x00025588 File Offset: 0x00023788
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			this._innerStream.Flush();
		}

		// Token: 0x17000124 RID: 292
		// (get) Token: 0x0600059F RID: 1439 RVA: 0x000255A0 File Offset: 0x000237A0
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				long result;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag;
							if (!flag)
							{
								result = this._innerStream.Length;
								num = delegate0da.f0000d7(-2);
								continue;
							}
							result = this._lengthLimit;
							num = delegate0da.f0000d7(-1);
							continue;
						}
						case 1:
							return result;
						case 2:
							return result;
						case 3:
						{
							bool flag = this._lengthLimit != CrcCalculatorStream.UnsetLengthLimit;
							num = delegate0da.f0000d7(0);
							continue;
						}
						}
						break;
					}
				}
				return result;
			}
		}

		// Token: 0x17000125 RID: 293
		// (get) Token: 0x060005A0 RID: 1440 RVA: 0x0002565C File Offset: 0x0002385C
		// (set) Token: 0x060005A1 RID: 1441 RVA: 0x00025678 File Offset: 0x00023878
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f000067.TotalBytesRead;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x060005A2 RID: 1442 RVA: 0x0002568C File Offset: 0x0002388C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005A3 RID: 1443 RVA: 0x000256A0 File Offset: 0x000238A0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005A4 RID: 1444 RVA: 0x000256B4 File Offset: 0x000238B4
		[MethodImpl(MethodImplOptions.NoInlining)]
		void IDisposable.Dispose()
		{
			this.Close();
		}

		// Token: 0x060005A5 RID: 1445 RVA: 0x000256C8 File Offset: 0x000238C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Close()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool leaveOpen = this._leaveOpen;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						return;
					case 2:
					{
						bool leaveOpen;
						if (!leaveOpen)
						{
							this._innerStream.Close();
							num = delegate0da.f0000d7(-1);
							continue;
						}
						return;
					}
					case 3:
						base.Close();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
		}

		// Token: 0x060005A6 RID: 1446 RVA: 0x00025774 File Offset: 0x00023974
		// Note: this type is marked as 'beforefieldinit'.
		static CrcCalculatorStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			CrcCalculatorStream.UnsetLengthLimit = -99L;
		}

		// Token: 0x04000241 RID: 577
		private static readonly long UnsetLengthLimit;

		// Token: 0x04000242 RID: 578
		internal Stream _innerStream;

		// Token: 0x04000243 RID: 579
		private CRC32 f000067;

		// Token: 0x04000244 RID: 580
		private long _lengthLimit = -99L;

		// Token: 0x04000245 RID: 581
		private bool _leaveOpen;
	}
}
