using System;
using System.Runtime.CompilerServices;
using System.Text;

namespace Application.Grabber.Browsers
{
	// Token: 0x02000029 RID: 41
	public sealed class Arrays
	{
		// Token: 0x0600011A RID: 282 RVA: 0x00007E00 File Offset: 0x00006000
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Arrays()
		{
		}

		// Token: 0x0600011B RID: 283 RVA: 0x00007E08 File Offset: 0x00006008
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool AreEqual(bool[] p0, bool[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						return true;
					case 1:
						goto IL_75;
					case 2:
						goto IL_36;
					case 3:
						if (p0 == p1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (p0 == null)
					{
						return false;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			return true;
			IL_75:
			if (p1 != null)
			{
				return Arrays.HaveSameContents(p0, p1);
			}
			return false;
		}

		// Token: 0x0600011C RID: 284 RVA: 0x00007E9C File Offset: 0x0000609C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool AreEqual(char[] p0, char[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						return true;
					case 1:
						goto IL_75;
					case 2:
						goto IL_36;
					case 3:
						if (p0 == p1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (p0 == null)
					{
						return false;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			return true;
			IL_75:
			if (p1 != null)
			{
				return Arrays.HaveSameContents(p0, p1);
			}
			return false;
		}

		// Token: 0x0600011D RID: 285 RVA: 0x00007F30 File Offset: 0x00006130
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool AreEqual(byte[] p0, byte[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						return true;
					case 1:
						goto IL_75;
					case 2:
						goto IL_36;
					case 3:
						if (p0 == p1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (p0 == null)
					{
						return false;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			return true;
			IL_75:
			if (p1 != null)
			{
				return Arrays.HaveSameContents(p0, p1);
			}
			return false;
		}

		// Token: 0x0600011E RID: 286 RVA: 0x00007FC4 File Offset: 0x000061C4
		[Obsolete("Use 'AreEqual' method instead")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool AreSame(byte[] p0, byte[] p1)
		{
			return Arrays.AreEqual(p0, p1);
		}

		// Token: 0x0600011F RID: 287 RVA: 0x00007FD8 File Offset: 0x000061D8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool ConstantTimeAreEqual(byte[] p0, byte[] p1)
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num3;
					switch (num)
					{
					case 0:
						return false;
					case 1:
						num2 |= (int)(p0[num3] ^ p1[num3]);
						goto IL_A4;
					case 2:
						goto IL_A4;
					case 3:
						num3 = p0.Length;
						if (num3 != p1.Length)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						num2 = 0;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					break;
					IL_A4:
					if (num3 == 0)
					{
						goto Block_2;
					}
					num3--;
					num = delegate0da.f0000d7(-1);
				}
			}
			return false;
			Block_2:
			return num2 == 0;
		}

		// Token: 0x06000120 RID: 288 RVA: 0x00008094 File Offset: 0x00006294
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool AreEqual(int[] p0, int[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						return true;
					case 1:
						goto IL_75;
					case 2:
						goto IL_36;
					case 3:
						if (p0 == p1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (p0 == null)
					{
						return false;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			return true;
			IL_75:
			if (p1 != null)
			{
				return Arrays.HaveSameContents(p0, p1);
			}
			return false;
		}

		// Token: 0x06000121 RID: 289 RVA: 0x00008128 File Offset: 0x00006328
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static bool HaveSameContents(bool[] p0, bool[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						return false;
					case 1:
						goto IL_8A;
					case 2:
						if (p0[num2] != p1[num2])
						{
							return false;
						}
						goto IL_8A;
					case 3:
						num2 = p0.Length;
						if (num2 != p1.Length)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_8A;
					}
					break;
					IL_8A:
					if (num2 == 0)
					{
						return true;
					}
					num2--;
					num = delegate0da.f0000d7(-2);
				}
			}
			return false;
		}

		// Token: 0x06000122 RID: 290 RVA: 0x000081C8 File Offset: 0x000063C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static bool HaveSameContents(char[] p0, char[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						return false;
					case 1:
						goto IL_8A;
					case 2:
						if (p0[num2] != p1[num2])
						{
							return false;
						}
						goto IL_8A;
					case 3:
						num2 = p0.Length;
						if (num2 != p1.Length)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_8A;
					}
					break;
					IL_8A:
					if (num2 == 0)
					{
						return true;
					}
					num2--;
					num = delegate0da.f0000d7(-2);
				}
			}
			return false;
		}

		// Token: 0x06000123 RID: 291 RVA: 0x00008268 File Offset: 0x00006468
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static bool HaveSameContents(byte[] p0, byte[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						return false;
					case 1:
						goto IL_8A;
					case 2:
						if (p0[num2] != p1[num2])
						{
							return false;
						}
						goto IL_8A;
					case 3:
						num2 = p0.Length;
						if (num2 != p1.Length)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_8A;
					}
					break;
					IL_8A:
					if (num2 == 0)
					{
						return true;
					}
					num2--;
					num = delegate0da.f0000d7(-2);
				}
			}
			return false;
		}

		// Token: 0x06000124 RID: 292 RVA: 0x00008308 File Offset: 0x00006508
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static bool HaveSameContents(int[] p0, int[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						return false;
					case 1:
						goto IL_8A;
					case 2:
						if (p0[num2] != p1[num2])
						{
							return false;
						}
						goto IL_8A;
					case 3:
						num2 = p0.Length;
						if (num2 != p1.Length)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_8A;
					}
					break;
					IL_8A:
					if (num2 == 0)
					{
						return true;
					}
					num2--;
					num = delegate0da.f0000d7(-2);
				}
			}
			return false;
		}

		// Token: 0x06000125 RID: 293 RVA: 0x000083A8 File Offset: 0x000065A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string ToString(object[] p0)
		{
			StringBuilder stringBuilder;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						stringBuilder.Append(p0[0]);
						num2 = 1;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						num2++;
						goto IL_C5;
					case 2:
						goto IL_C5;
					case 3:
						stringBuilder = new StringBuilder(91);
						if (p0.Length != 0)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_D0;
					}
					break;
					IL_C5:
					if (num2 >= p0.Length)
					{
						goto IL_D0;
					}
					delegate0fa.f000114(delegate0f7.f00010f(stringBuilder, c0000c0.m00000f("½!")), p0[num2]);
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_D0:
			stringBuilder.Append(']');
			return delegate0cd.f0000a6(stringBuilder);
		}

		// Token: 0x06000126 RID: 294 RVA: 0x0000849C File Offset: 0x0000669C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static int GetHashCode(byte[] data)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num3;
					switch (num)
					{
					case 0:
						goto IL_63;
					case 1:
						num2 ^= (int)data[num3];
						goto IL_89;
					case 2:
						goto IL_89;
					case 3:
						if (data == null)
						{
							return 0;
						}
						goto IL_63;
					}
					break;
					IL_89:
					if (--num3 < 0)
					{
						return num2;
					}
					num2 *= 257;
					num = delegate0da.f0000d7(-1);
					continue;
					IL_63:
					num3 = data.Length;
					num2 = num3 + 1;
					num = delegate0da.f0000d7(-2);
				}
			}
			return 0;
		}

		// Token: 0x06000127 RID: 295 RVA: 0x00008540 File Offset: 0x00006740
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] Clone(byte[] data)
		{
			if (data != null)
			{
				return (byte[])delegate0f6.f00010c(data);
			}
			return null;
		}

		// Token: 0x06000128 RID: 296 RVA: 0x00008564 File Offset: 0x00006764
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static int[] Clone(int[] data)
		{
			if (data != null)
			{
				return (int[])delegate0f6.f00010c(data);
			}
			return null;
		}

		// Token: 0x06000129 RID: 297 RVA: 0x00008588 File Offset: 0x00006788
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static Arrays()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}
	}
}
