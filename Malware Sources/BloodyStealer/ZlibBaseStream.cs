using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Ionic.Zlib
{
	// Token: 0x020000B1 RID: 177
	internal class ZlibBaseStream : Stream
	{
		// Token: 0x17000151 RID: 337
		// (get) Token: 0x0600068F RID: 1679 RVA: 0x00031E28 File Offset: 0x00030028
		internal int p000004
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				int result;
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag;
							if (!flag)
							{
								result = 0;
								num = delegate0da.f0000d7(-2);
								continue;
							}
							result = this.crc.Crc32Result;
							num = delegate0da.f0000d7(-1);
							continue;
						}
						case 1:
							return result;
						case 2:
							return result;
						case 3:
						{
							bool flag = this.crc != null;
							num = delegate0da.f0000d7(0);
							continue;
						}
						}
						break;
					}
				}
				return result;
			}
		}

		// Token: 0x06000690 RID: 1680 RVA: 0x00031ED8 File Offset: 0x000300D8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZlibBaseStream(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen)
		{
			this._flushMode = FlushType.None;
			this._stream = stream;
			this._leaveOpen = leaveOpen;
			this._compressionMode = compressionMode;
			this._flavor = flavor;
			this._level = level;
			if (flavor == ZlibStreamFlavor.GZIP)
			{
				this.crc = new CRC32();
			}
		}

		// Token: 0x17000152 RID: 338
		// (get) Token: 0x06000691 RID: 1681 RVA: 0x00031F68 File Offset: 0x00030168
		protected internal bool _wantCompress
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._compressionMode == CompressionMode.Compress;
			}
		}

		// Token: 0x17000153 RID: 339
		// (get) Token: 0x06000692 RID: 1682 RVA: 0x00031F80 File Offset: 0x00030180
		private ZlibCodec p000005
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							this._z = new ZlibCodec();
							bool flag;
							if (this._compressionMode == CompressionMode.Decompress)
							{
								this._z.InitializeInflate(flag);
								num = delegate0da.f0000d7(-2);
								continue;
							}
							this._z.Strategy = this.Strategy;
							this._z.InitializeDeflate(this._level, flag);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						case 1:
							goto IL_37;
						case 2:
							goto IL_36;
						case 3:
							if (this._z == null)
							{
								bool flag = this._flavor == ZlibStreamFlavor.ZLIB;
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_38;
						}
						break;
					}
				}
				IL_36:
				IL_37:
				IL_38:
				return this._z;
			}
		}

		// Token: 0x17000154 RID: 340
		// (get) Token: 0x06000693 RID: 1683 RVA: 0x00032088 File Offset: 0x00030288
		private byte[] workingBuffer
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = this._workingBuffer != null;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_92;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_A3;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_92:
				this._workingBuffer = new byte[this._bufferSize];
				IL_A3:
				return this._workingBuffer;
			}
		}

		// Token: 0x06000694 RID: 1684 RVA: 0x00032140 File Offset: 0x00030340
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
						if (!flag)
						{
							goto Block_8;
						}
						goto IL_12D;
					case 1:
						goto IL_1B6;
					case 2:
					{
						this._z.OutputBuffer = this.workingBuffer;
						this._z.NextOut = 0;
						this._z.AvailableBytesOut = this._workingBuffer.Length;
						int num2 = this._wantCompress ? this._z.Deflate(this._flushMode) : this._z.Inflate(this._flushMode);
						flag = (num2 == 0 || num2 == 1);
						if (!flag)
						{
							goto Block_3;
						}
						goto IL_1B6;
					}
					case 3:
						flag = (this.crc == null);
						if (!flag)
						{
							this.crc.SlurpBlock(buffer, offset, count);
						}
						flag = (this._streamMode != ZlibBaseStream.StreamMode.Undefined);
						if (!flag)
						{
							this._streamMode = ZlibBaseStream.StreamMode.Writer;
							goto IL_12D;
						}
						flag = (this._streamMode == ZlibBaseStream.StreamMode.Writer);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_19E:
					num = delegate0da.f0000d7(-2);
					continue;
					IL_1B6:
					this._stream.Write(this._workingBuffer, 0, this._workingBuffer.Length - this._z.AvailableBytesOut);
					bool flag2 = this._z.AvailableBytesIn == 0 && this._z.AvailableBytesOut != 0;
					flag = (this._flavor != ZlibStreamFlavor.GZIP || this._wantCompress);
					if (!flag)
					{
						flag2 = (this._z.AvailableBytesIn == 8 && this._z.AvailableBytesOut != 0);
					}
					flag = !flag2;
					if (!flag)
					{
						return;
					}
					goto IL_19E;
					IL_12D:
					flag = (count != 0);
					if (!flag)
					{
						goto Block_7;
					}
					this.p000005.InputBuffer = buffer;
					this._z.NextIn = offset;
					this._z.AvailableBytesIn = count;
					goto IL_19E;
				}
			}
			Block_3:
			throw new ZlibException((this._wantCompress ? c0000c0.m00000f("õd") : c0000c0.m00000f("øo")) + c0000c0.m00000f("÷m,\u0010Ï\aT\r\u008c") + this._z.Message);
			Block_7:
			return;
			Block_8:
			throw new ZlibException(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013`Þ\u001b:I(ö+\u0013óðN4H¥~Ä=ÙY"));
		}

		// Token: 0x06000695 RID: 1685 RVA: 0x000323A8 File Offset: 0x000305A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void finish()
		{
			byte[] array;
			int num2;
			int num3;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._stream.Write(this._workingBuffer, 0, this._workingBuffer.Length - this._z.AvailableBytesOut);
						goto IL_2BD;
					case 1:
						goto IL_3D1;
					case 2:
						goto IL_36;
					case 3:
						if (this._z == null)
						{
							goto Block_6;
						}
						if (this._streamMode == ZlibBaseStream.StreamMode.Writer)
						{
							goto IL_15D;
						}
						if (this._streamMode != ZlibBaseStream.StreamMode.Reader || this._flavor != ZlibStreamFlavor.GZIP)
						{
							return;
						}
						if (this._wantCompress)
						{
							goto IL_4D3;
						}
						if (this._z.TotalBytesOut == 0L)
						{
							goto Block_4;
						}
						array = new byte[8];
						if (this._z.AvailableBytesIn != 8)
						{
							delegate0fe.f000121(this._z.InputBuffer, this._z.NextIn, array, 0, this._z.AvailableBytesIn);
							num2 = 8 - this._z.AvailableBytesIn;
							num3 = this._stream.Read(array, this._z.AvailableBytesIn, num2);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_40B;
					}
					break;
					IL_15D:
					this._z.OutputBuffer = this.workingBuffer;
					this._z.NextOut = 0;
					this._z.AvailableBytesOut = this._workingBuffer.Length;
					int num4 = this._wantCompress ? this._z.Deflate(FlushType.Finish) : this._z.Inflate(FlushType.Finish);
					if (num4 != 1 && num4 != 0)
					{
						goto Block_9;
					}
					if (this._workingBuffer.Length - this._z.AvailableBytesOut > 0)
					{
						num = delegate0da.f0000d7(0);
						continue;
					}
					IL_2BD:
					bool flag = this._z.AvailableBytesIn == 0 && this._z.AvailableBytesOut != 0;
					if (this._flavor == ZlibStreamFlavor.GZIP && !this._wantCompress)
					{
						flag = (this._z.AvailableBytesIn == 8 && this._z.AvailableBytesOut != 0);
					}
					if (!flag)
					{
						goto IL_15D;
					}
					this.Flush();
					if (this._flavor != ZlibStreamFlavor.GZIP)
					{
						return;
					}
					if (!this._wantCompress)
					{
						goto IL_3C;
					}
					int crc32Result = this.crc.Crc32Result;
					this._stream.Write(delegate0136.f000173(crc32Result), 0, 4);
					int p = (int)(this.crc.TotalBytesRead & (long)((ulong)-1));
					this._stream.Write(delegate0136.f000173(p), 0, 4);
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_36:
			return;
			IL_3C:
			throw new ZlibException(c0000c0.m00000f("Æs$\u0010Ï\aT\u0017Û\u001b:D(ó(\u0004ùï\u001e\u0014H·iÄ<ÐW·d\u0098\u008dÙi\u00179\u0019èýO\u0082J\b¬»"));
			Block_4:
			Block_6:
			return;
			Block_9:
			string text = (this._wantCompress ? c0000c0.m00000f("õd") : c0000c0.m00000f("øo")) + c0000c0.m00000f("÷m,\u0010Ï\aT");
			if (this._z.Message == null)
			{
				int num4;
				throw new ZlibException(delegate0d5.f0000c9(c0000c0.m00000f("ê10^\u0086AAT\u008cOnW9êd"), text, num4));
			}
			throw new ZlibException(text + c0000c0.m00000f("«!") + this._z.Message);
			IL_3D1:
			if (num2 != num3)
			{
				throw new ZlibException(delegate0101.f000127(c0000c0.m00000f("Ás\"\u0010É\n\\[\u008c\u0017<^gåcG×ô\u000f\u000fA¥xÁ6ü\u000eªrËªØ Lz\u0011´­E\u0088N\b«áþ]\u0082\r"), this._z.AvailableBytesIn + num3));
			}
			goto IL_432;
			IL_40B:
			delegate0fe.f000121(this._z.InputBuffer, this._z.NextIn, array, 0, array.Length);
			IL_432:
			int num5 = BitConverter.ToInt32(array, 0);
			int crc32Result2 = this.crc.Crc32Result;
			int num6 = delegate0150.f00019c(array, 4);
			int num7 = (int)(this._z.TotalBytesOut & (long)((ulong)-1));
			if (crc32Result2 != num5)
			{
				throw new ZlibException(delegate0d5.f0000c9(c0000c0.m00000f("Ó`)Då;p\u0004\u009eR'B(Ð\u0017.Æ¢\u001d\u0012_¡{À}\u009e_¿tÌ\u0096×q\u001f1\\¢Õ\u0018\u008d\u0017LõðãIÇV\u0080\u009d}ÿ»\u0004,\u0094Ýã9Î"), crc32Result2, num5));
			}
			if (num7 != num6)
			{
				throw new ZlibException(delegate0d5.f0000c9(c0000c0.m00000f("Ó`)DÕ\0IR\u008c\u001b \fOÍ\u00047¶ñ\u001a\u0014H¥w\u0083s\u0096\u0016½cÍ\u0082Ú5Lz\u0011±¬\u001d\u0095F\u001d­öï\\Æ\u001d\u008fÉdþé"), num7, num6));
			}
			return;
			IL_4D3:
			throw new ZlibException(c0000c0.m00000f("Ãd,\0Ï\aT\u0017Û\u001b:D(ô\"\næð\v\u0015^­uÃs×\u0004þy×\u0097\u0096nB:\u001c÷ÿT\u0095ZC"));
		}

		// Token: 0x06000696 RID: 1686 RVA: 0x00032898 File Offset: 0x00030A98
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void end()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_87;
					case 1:
						goto IL_B4;
					case 2:
						this._z.EndDeflate();
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						if (this.p000005 == null)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						if (this._wantCompress)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_B9;
					}
					break;
				}
			}
			IL_87:
			return;
			IL_B4:
			goto IL_C5;
			IL_B9:
			this._z.EndInflate();
			IL_C5:
			this._z = null;
		}

		// Token: 0x06000697 RID: 1687 RVA: 0x00032974 File Offset: 0x00030B74
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Close()
		{
			bool flag = this._stream != null;
			if (flag)
			{
				this.finish();
			}
		}

		// Token: 0x06000698 RID: 1688 RVA: 0x000329A0 File Offset: 0x00030BA0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			this._stream.Flush();
		}

		// Token: 0x06000699 RID: 1689 RVA: 0x000329B8 File Offset: 0x00030BB8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x0600069A RID: 1690 RVA: 0x000329CC File Offset: 0x00030BCC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			this._stream.SetLength(value);
		}

		// Token: 0x0600069B RID: 1691 RVA: 0x000329E8 File Offset: 0x00030BE8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private string ReadZeroTerminatedString()
		{
			List<byte> list;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					bool flag;
					bool flag2;
					switch (num)
					{
					case 0:
						flag = (num2 == 1);
						if (!flag)
						{
							goto Block_3;
						}
						flag = (this._buf1[0] != 0);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_3E;
					case 2:
						if (!flag)
						{
							flag2 = true;
							goto IL_3E;
						}
						list.Add(this._buf1[0]);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						list = new List<byte>();
						flag2 = false;
						goto IL_9C;
					}
					break;
					IL_9C:
					num2 = this._stream.Read(this._buf1, 0, 1);
					num = delegate0da.f0000d7(0);
					continue;
					IL_3E:
					flag = !flag2;
					if (!flag)
					{
						goto Block_2;
					}
					goto IL_9C;
				}
			}
			Block_2:
			byte[] array = list.ToArray();
			return delegate0115.f000145(GZipStream.f000069, array, 0, array.Length);
			Block_3:
			throw new ZlibException(c0000c0.m00000f("Äo(\u001cÖ\fPCÉ\u0016niGÑm\u0015óã\n\u000fC£:ê\t÷'þ\u007fÝ\u0082ÒxEd"));
		}

		// Token: 0x0600069C RID: 1692 RVA: 0x00032B00 File Offset: 0x00030D00
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int _ReadAndValidateGzipHeader()
		{
			byte[] array;
			int num3;
			bool flag;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						goto IL_105;
					case 1:
						goto IL_18D;
					case 2:
					{
						num2 = this._stream.Read(array, 0, 2);
						num3 += num2;
						short num4 = (short)((int)array[0] + (int)array[1] * 256);
						byte[] array2 = new byte[(int)num4];
						num2 = this._stream.Read(array2, 0, array2.Length);
						flag = (num2 == (int)num4);
						if (!flag)
						{
							goto Block_1;
						}
						num3 += num2;
						goto IL_95;
					}
					case 3:
						num3 = 0;
						array = new byte[10];
						num2 = this._stream.Read(array, 0, array.Length);
						flag = (num2 != 0);
						if (!flag)
						{
							goto Block_2;
						}
						flag = (num2 == 10);
						if (!flag)
						{
							goto Block_3;
						}
						goto IL_105;
					}
					break;
					IL_95:
					flag = ((array[3] & 8) != 8);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_105:
					flag = (array[0] == 31 && array[1] == 139 && array[2] == 8);
					if (!flag)
					{
						goto Block_6;
					}
					int num5 = BitConverter.ToInt32(array, 4);
					this._GzipMtime = GZipStream._unixEpoch.AddSeconds((double)num5);
					num3 += num2;
					flag = ((array[3] & 4) != 4);
					if (flag)
					{
						goto IL_95;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_1:
			throw new ZlibException(c0000c0.m00000f("Äo(\u001cÖ\fPCÉ\u0016nIfó`\bð¯\b\u000fA¡:ß6ß\u0013·yßÃñG~\u001aLðèA\u0094[\u001fæ"));
			Block_2:
			return 0;
			Block_3:
			throw new ZlibException(c0000c0.m00000f("ßn9DÇIEVÀ\u001b*\fOÍ\u00047¶ñ\u001a\u0014H¥w\u0083"));
			Block_6:
			throw new ZlibException(c0000c0.m00000f("Ó`)Dá3zg\u008c\u001a+Mlò?I"));
			IL_18D:
			if (!flag)
			{
				this._GzipFileName = this.ReadZeroTerminatedString();
			}
			flag = ((array[3] & 16) != 16);
			if (!flag)
			{
				this._GzipComment = this.ReadZeroTerminatedString();
			}
			flag = ((array[3] & 2) != 2);
			if (!flag)
			{
				this.Read(this._buf1, 0, 1);
			}
			return num3;
		}

		// Token: 0x0600069D RID: 1693 RVA: 0x00032CF4 File Offset: 0x00030EF4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			bool flag2;
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
						flag = !this._wantCompress;
						goto IL_2AE;
					case 1:
						goto IL_3CA;
					case 2:
						this._z.AvailableBytesIn = this._stream.Read(this._workingBuffer, 0, this._workingBuffer.Length);
						flag2 = (this._z.AvailableBytesIn != 0);
						if (!flag2)
						{
							this.nomoreinput = true;
							goto IL_7A;
						}
						goto IL_7A;
					case 3:
						flag2 = (this._streamMode != ZlibBaseStream.StreamMode.Undefined);
						if (!flag2)
						{
							flag2 = this._stream.CanRead;
							if (!flag2)
							{
								goto Block_13;
							}
							this._streamMode = ZlibBaseStream.StreamMode.Reader;
							this.p000005.AvailableBytesIn = 0;
							flag2 = (this._flavor != ZlibStreamFlavor.GZIP);
							if (!flag2)
							{
								this._gzipHeaderByteCount = this._ReadAndValidateGzipHeader();
								flag2 = (this._gzipHeaderByteCount != 0);
								if (!flag2)
								{
									goto Block_15;
								}
							}
						}
						flag2 = (this._streamMode == ZlibBaseStream.StreamMode.Reader);
						if (!flag2)
						{
							goto Block_16;
						}
						flag2 = (count != 0);
						if (!flag2)
						{
							goto Block_17;
						}
						if (this.nomoreinput)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						flag = true;
						goto IL_2AE;
					}
					break;
					IL_7A:
					num2 = (this._wantCompress ? this._z.Deflate(this._flushMode) : this._z.Inflate(this._flushMode));
					flag2 = (!this.nomoreinput || num2 != -5);
					if (!flag2)
					{
						goto Block_4;
					}
					flag2 = (num2 == 0 || num2 == 1);
					if (!flag2)
					{
						goto Block_6;
					}
					flag2 = ((!this.nomoreinput && num2 != 1) || this._z.AvailableBytesOut != count);
					if (flag2)
					{
						flag2 = (this._z.AvailableBytesOut > 0 && !this.nomoreinput && num2 == 0);
						if (flag2)
						{
							goto IL_383;
						}
					}
					flag2 = (this._z.AvailableBytesOut <= 0);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_383:
					flag2 = (this._z.AvailableBytesIn != 0 || this.nomoreinput);
					if (!flag2)
					{
						this._z.NextIn = 0;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					goto IL_7A;
					IL_2AE:
					flag2 = flag;
					if (!flag2)
					{
						goto Block_19;
					}
					flag2 = (buffer != null);
					if (!flag2)
					{
						goto Block_20;
					}
					flag2 = (count >= 0);
					if (!flag2)
					{
						goto Block_21;
					}
					flag2 = (offset >= delegate016f.f0001c3(buffer, 0));
					if (!flag2)
					{
						goto Block_22;
					}
					flag2 = (offset + count <= delegate016f.f0001c4(buffer, 0));
					if (!flag2)
					{
						goto Block_23;
					}
					num2 = 0;
					this._z.OutputBuffer = buffer;
					this._z.NextOut = offset;
					this._z.AvailableBytesOut = count;
					this._z.InputBuffer = this.workingBuffer;
					goto IL_383;
				}
			}
			Block_4:
			return 0;
			Block_6:
			throw new ZlibException(string.Format(c0000c0.m00000f("ê10\u0002Ê\bG^Â\u0015t\f(å.Zí³\u0013F\r©iÊnÅE£"), this._wantCompress ? c0000c0.m00000f("õd") : c0000c0.m00000f("øo"), num2, this._z.Message));
			Block_13:
			throw new ZlibException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnE{·#\bâ¢\u001c\u0003L\u00a0{Ï?ÛY"));
			Block_15:
			return 0;
			Block_16:
			throw new ZlibException(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013eÉ\u0013*\fiñ9\u0002ä¢9\u0014D°sÃ4\u0090"));
			Block_17:
			return 0;
			Block_19:
			return 0;
			Block_20:
			throw new ArgumentNullException(c0000c0.m00000f("ót+\u0002Ã\u001b"));
			Block_21:
			throw new ArgumentOutOfRangeException(c0000c0.m00000f("òn8\nÒ"));
			Block_22:
			throw new ArgumentOutOfRangeException(c0000c0.m00000f("þg+\u0017Ã\u001d"));
			Block_23:
			throw new ArgumentOutOfRangeException(c0000c0.m00000f("òn8\nÒ"));
			IL_3CA:
			if (!flag2)
			{
				flag2 = (num2 != 0 || this._z.AvailableBytesIn != 0);
				if (!flag2)
				{
				}
				flag2 = !this.nomoreinput;
				if (!flag2)
				{
					flag2 = !this._wantCompress;
					if (!flag2)
					{
						num2 = this._z.Deflate(FlushType.Finish);
						flag2 = (num2 == 0 || num2 == 1);
						if (!flag2)
						{
							throw new ZlibException(delegate0d5.f0000c9(c0000c0.m00000f("Õd+\bÇ\u001dZYËHn\fzôp\u001c¦ÿNF@·}\u0090(\u008f\n"), num2, this._z.Message));
						}
					}
				}
			}
			num2 = count - this._z.AvailableBytesOut;
			flag2 = (this.crc == null);
			if (!flag2)
			{
				this.crc.SlurpBlock(buffer, offset, num2);
			}
			return num2;
		}

		// Token: 0x17000155 RID: 341
		// (get) Token: 0x0600069E RID: 1694 RVA: 0x00033194 File Offset: 0x00031394
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._stream.CanRead;
			}
		}

		// Token: 0x17000156 RID: 342
		// (get) Token: 0x0600069F RID: 1695 RVA: 0x000331B0 File Offset: 0x000313B0
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._stream.CanSeek;
			}
		}

		// Token: 0x17000157 RID: 343
		// (get) Token: 0x060006A0 RID: 1696 RVA: 0x000331CC File Offset: 0x000313CC
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._stream.CanWrite;
			}
		}

		// Token: 0x17000158 RID: 344
		// (get) Token: 0x060006A1 RID: 1697 RVA: 0x000331E8 File Offset: 0x000313E8
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._stream.Length;
			}
		}

		// Token: 0x17000159 RID: 345
		// (get) Token: 0x060006A2 RID: 1698 RVA: 0x00033204 File Offset: 0x00031404
		// (set) Token: 0x060006A3 RID: 1699 RVA: 0x00033218 File Offset: 0x00031418
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x060006A4 RID: 1700 RVA: 0x0003322C File Offset: 0x0003142C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void CompressString(string p0, Stream compressor)
		{
			byte[] array = delegate0d7.f0000d2(delegate0d6.f0000ce(), p0);
			delegate0109.f000133(compressor, array, 0, array.Length);
		}

		// Token: 0x060006A5 RID: 1701 RVA: 0x00033264 File Offset: 0x00031464
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void CompressBuffer(byte[] p0, Stream compressor)
		{
			delegate0109.f000133(compressor, p0, 0, p0.Length);
		}

		// Token: 0x060006A6 RID: 1702 RVA: 0x00033288 File Offset: 0x00031488
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string UncompressString(byte[] compressed, Stream decompressor)
		{
			byte[] array = new byte[1024];
			Encoding encoding = delegate0d6.f0000ce();
			MemoryStream memoryStream = new MemoryStream();
			int p;
			while ((p = decompressor.Read(array, 0, array.Length)) != 0)
			{
				delegate0109.f000133(memoryStream, array, 0, p);
			}
			delegate0149.f00018c(memoryStream, 0L, SeekOrigin.Begin);
			StreamReader p2 = new StreamReader(memoryStream, encoding);
			return delegate0cd.f0000b5(p2);
		}

		// Token: 0x060006A7 RID: 1703 RVA: 0x00033318 File Offset: 0x00031518
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static byte[] UncompressBuffer(byte[] compressed, Stream decompressor)
		{
			byte[] array = new byte[1024];
			MemoryStream p = new MemoryStream();
			int p2;
			while ((p2 = decompressor.Read(array, 0, array.Length)) != 0)
			{
				delegate0109.f000133(p, array, 0, p2);
			}
			return delegate0c8.f000092(p);
		}

		// Token: 0x060006A8 RID: 1704 RVA: 0x00033384 File Offset: 0x00031584
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZlibBaseStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x0400039D RID: 925
		protected internal ZlibCodec _z = null;

		// Token: 0x0400039E RID: 926
		protected internal ZlibBaseStream.StreamMode _streamMode = ZlibBaseStream.StreamMode.Undefined;

		// Token: 0x0400039F RID: 927
		protected internal FlushType _flushMode;

		// Token: 0x040003A0 RID: 928
		protected internal ZlibStreamFlavor _flavor;

		// Token: 0x040003A1 RID: 929
		protected internal CompressionMode _compressionMode;

		// Token: 0x040003A2 RID: 930
		protected internal CompressionLevel _level;

		// Token: 0x040003A3 RID: 931
		protected internal bool _leaveOpen;

		// Token: 0x040003A4 RID: 932
		protected internal byte[] _workingBuffer;

		// Token: 0x040003A5 RID: 933
		protected internal int _bufferSize = 16384;

		// Token: 0x040003A6 RID: 934
		protected internal byte[] _buf1 = new byte[1];

		// Token: 0x040003A7 RID: 935
		protected internal Stream _stream;

		// Token: 0x040003A8 RID: 936
		protected internal CompressionStrategy Strategy = CompressionStrategy.f000074;

		// Token: 0x040003A9 RID: 937
		private CRC32 crc;

		// Token: 0x040003AA RID: 938
		protected internal string _GzipFileName;

		// Token: 0x040003AB RID: 939
		protected internal string _GzipComment;

		// Token: 0x040003AC RID: 940
		protected internal DateTime _GzipMtime;

		// Token: 0x040003AD RID: 941
		protected internal int _gzipHeaderByteCount;

		// Token: 0x040003AE RID: 942
		private bool nomoreinput = false;

		// Token: 0x020000B2 RID: 178
		internal enum StreamMode
		{
			// Token: 0x040003B0 RID: 944
			Writer,
			// Token: 0x040003B1 RID: 945
			Reader,
			// Token: 0x040003B2 RID: 946
			Undefined
		}
	}
}
