using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x02000080 RID: 128
	public class ExtractProgressEventArgs : ZipProgressEventArgs
	{
		// Token: 0x060003CD RID: 973 RVA: 0x00016164 File Offset: 0x00014364
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ExtractProgressEventArgs(string archiveName, bool before, int entriesTotal, int entriesExtracted, ZipEntry entry, string extractLocation) : base(archiveName, before ? ZipProgressEventType.Extracting_BeforeExtractEntry : ZipProgressEventType.Extracting_AfterExtractEntry)
		{
			base.EntriesTotal = entriesTotal;
			base.CurrentEntry = entry;
			this._entriesExtracted = entriesExtracted;
			this._target = extractLocation;
		}

		// Token: 0x060003CE RID: 974 RVA: 0x0001619C File Offset: 0x0001439C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ExtractProgressEventArgs(string archiveName, ZipProgressEventType flavor) : base(archiveName, flavor)
		{
		}

		// Token: 0x060003CF RID: 975 RVA: 0x000161A8 File Offset: 0x000143A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal ExtractProgressEventArgs()
		{
		}

		// Token: 0x060003D0 RID: 976 RVA: 0x000161B0 File Offset: 0x000143B0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ExtractProgressEventArgs BeforeExtractEntry(string archiveName, ZipEntry entry, string extractLocation)
		{
			ExtractProgressEventArgs extractProgressEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						extractProgressEventArgs.ArchiveName = archiveName;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_93;
					case 2:
						extractProgressEventArgs.EventType = ZipProgressEventType.Extracting_BeforeExtractEntry;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						extractProgressEventArgs = new ExtractProgressEventArgs();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_93:
			extractProgressEventArgs.CurrentEntry = entry;
			extractProgressEventArgs._target = extractLocation;
			return extractProgressEventArgs;
		}

		// Token: 0x060003D1 RID: 977 RVA: 0x00016264 File Offset: 0x00014464
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ExtractProgressEventArgs ExtractExisting(string archiveName, ZipEntry entry, string extractLocation)
		{
			ExtractProgressEventArgs extractProgressEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						extractProgressEventArgs.ArchiveName = archiveName;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_93;
					case 2:
						extractProgressEventArgs.EventType = ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						extractProgressEventArgs = new ExtractProgressEventArgs();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_93:
			extractProgressEventArgs.CurrentEntry = entry;
			extractProgressEventArgs._target = extractLocation;
			return extractProgressEventArgs;
		}

		// Token: 0x060003D2 RID: 978 RVA: 0x00016318 File Offset: 0x00014518
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ExtractProgressEventArgs AfterExtractEntry(string archiveName, ZipEntry entry, string extractLocation)
		{
			ExtractProgressEventArgs extractProgressEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						extractProgressEventArgs.ArchiveName = archiveName;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_93;
					case 2:
						extractProgressEventArgs.EventType = ZipProgressEventType.Extracting_AfterExtractEntry;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						extractProgressEventArgs = new ExtractProgressEventArgs();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_93:
			extractProgressEventArgs.CurrentEntry = entry;
			extractProgressEventArgs._target = extractLocation;
			return extractProgressEventArgs;
		}

		// Token: 0x060003D3 RID: 979 RVA: 0x000163CC File Offset: 0x000145CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ExtractProgressEventArgs ExtractAllStarted(string archiveName, string extractLocation)
		{
			return new ExtractProgressEventArgs(archiveName, ZipProgressEventType.Extracting_BeforeExtractAll)
			{
				_target = extractLocation
			};
		}

		// Token: 0x060003D4 RID: 980 RVA: 0x000163EC File Offset: 0x000145EC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ExtractProgressEventArgs ExtractAllCompleted(string archiveName, string extractLocation)
		{
			return new ExtractProgressEventArgs(archiveName, ZipProgressEventType.Extracting_AfterExtractAll)
			{
				_target = extractLocation
			};
		}

		// Token: 0x060003D5 RID: 981 RVA: 0x0001640C File Offset: 0x0001460C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ExtractProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesWritten, long totalBytes)
		{
			ExtractProgressEventArgs extractProgressEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						extractProgressEventArgs.ArchiveName = archiveName;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_95;
					case 2:
						extractProgressEventArgs.CurrentEntry = entry;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						extractProgressEventArgs = new ExtractProgressEventArgs(archiveName, ZipProgressEventType.Extracting_EntryBytesWritten);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_95:
			extractProgressEventArgs.BytesTransferred = bytesWritten;
			extractProgressEventArgs.TotalBytesToTransfer = totalBytes;
			return extractProgressEventArgs;
		}

		// Token: 0x170000B2 RID: 178
		// (get) Token: 0x060003D6 RID: 982 RVA: 0x000164C0 File Offset: 0x000146C0
		public int EntriesExtracted
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._entriesExtracted;
			}
		}

		// Token: 0x170000B3 RID: 179
		// (get) Token: 0x060003D7 RID: 983 RVA: 0x000164D4 File Offset: 0x000146D4
		public string ExtractLocation
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._target;
			}
		}

		// Token: 0x060003D8 RID: 984 RVA: 0x000164E8 File Offset: 0x000146E8
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ExtractProgressEventArgs()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000185 RID: 389
		private int _entriesExtracted;

		// Token: 0x04000186 RID: 390
		private string _target;
	}
}
