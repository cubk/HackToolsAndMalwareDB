using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zlib;

namespace Ionic.Zip
{
	// Token: 0x02000053 RID: 83
	internal class ZipContainer
	{
		// Token: 0x0600026E RID: 622 RVA: 0x0000F474 File Offset: 0x0000D674
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipContainer(object p0)
		{
			this._zf = (p0 as ZipFile);
			this._zos = (p0 as ZipOutputStream);
			this._zis = (p0 as ZipInputStream);
		}

		// Token: 0x17000065 RID: 101
		// (get) Token: 0x0600026F RID: 623 RVA: 0x0000F4A0 File Offset: 0x0000D6A0
		public ZipFile ZipFile
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._zf;
			}
		}

		// Token: 0x17000066 RID: 102
		// (get) Token: 0x06000270 RID: 624 RVA: 0x0000F4B4 File Offset: 0x0000D6B4
		public ZipOutputStream ZipOutputStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._zos;
			}
		}

		// Token: 0x17000067 RID: 103
		// (get) Token: 0x06000271 RID: 625 RVA: 0x0000F4C8 File Offset: 0x0000D6C8
		public string Name
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.Name;
				}
				return this._zos.Name;
			}
		}

		// Token: 0x17000068 RID: 104
		// (get) Token: 0x06000272 RID: 626 RVA: 0x0000F4F8 File Offset: 0x0000D6F8
		public string Password
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf._Password;
				}
				return this._zos._password;
			}
		}

		// Token: 0x17000069 RID: 105
		// (get) Token: 0x06000273 RID: 627 RVA: 0x0000F528 File Offset: 0x0000D728
		public Zip64Option Zip64
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf._zip64;
				}
				return this._zos._zip64;
			}
		}

		// Token: 0x1700006A RID: 106
		// (get) Token: 0x06000274 RID: 628 RVA: 0x0000F558 File Offset: 0x0000D758
		public int BufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.BufferSize;
				}
				return 0;
			}
		}

		// Token: 0x1700006B RID: 107
		// (get) Token: 0x06000275 RID: 629 RVA: 0x0000F580 File Offset: 0x0000D780
		// (set) Token: 0x06000276 RID: 630 RVA: 0x0000F5B0 File Offset: 0x0000D7B0
		public ParallelDeflateOutputStream ParallelDeflater
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.ParallelDeflater;
				}
				return this._zos.ParallelDeflater;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							this._zf.ParallelDeflater = value;
							num = delegate0da.f0000d7(-2);
							continue;
						case 1:
							goto IL_7E;
						case 2:
							return;
						case 3:
							if (this._zf != null)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_7E;
						}
						break;
					}
				}
				return;
				IL_7E:
				this._zos.ParallelDeflater = value;
			}
		}

		// Token: 0x1700006C RID: 108
		// (get) Token: 0x06000277 RID: 631 RVA: 0x0000F648 File Offset: 0x0000D848
		public long ParallelDeflateThreshold
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.ParallelDeflateThreshold;
				}
				return this._zos.ParallelDeflateThreshold;
			}
		}

		// Token: 0x1700006D RID: 109
		// (get) Token: 0x06000278 RID: 632 RVA: 0x0000F678 File Offset: 0x0000D878
		public int CodecBufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.CodecBufferSize;
				}
				return this._zos.CodecBufferSize;
			}
		}

		// Token: 0x1700006E RID: 110
		// (get) Token: 0x06000279 RID: 633 RVA: 0x0000F6A8 File Offset: 0x0000D8A8
		public CompressionStrategy Strategy
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.Strategy;
				}
				return this._zos.Strategy;
			}
		}

		// Token: 0x1700006F RID: 111
		// (get) Token: 0x0600027A RID: 634 RVA: 0x0000F6D8 File Offset: 0x0000D8D8
		public Zip64Option UseZip64WhenSaving
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.UseZip64WhenSaving;
				}
				return this._zos.EnableZip64;
			}
		}

		// Token: 0x17000070 RID: 112
		// (get) Token: 0x0600027B RID: 635 RVA: 0x0000F708 File Offset: 0x0000D908
		public Encoding ProvisionalAlternateEncoding
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.ProvisionalAlternateEncoding;
				}
				return this._zis.ProvisionalAlternateEncoding;
			}
		}

		// Token: 0x17000071 RID: 113
		// (get) Token: 0x0600027C RID: 636 RVA: 0x0000F738 File Offset: 0x0000D938
		public Stream ReadStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zf != null)
				{
					return this._zf.ReadStream;
				}
				return this._zis.ReadStream;
			}
		}

		// Token: 0x0600027D RID: 637 RVA: 0x0000F768 File Offset: 0x0000D968
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipContainer()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x040000D4 RID: 212
		private ZipFile _zf;

		// Token: 0x040000D5 RID: 213
		private ZipOutputStream _zos;

		// Token: 0x040000D6 RID: 214
		private ZipInputStream _zis;
	}
}
