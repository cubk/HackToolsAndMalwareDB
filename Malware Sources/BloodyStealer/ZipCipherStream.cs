using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x02000076 RID: 118
	internal class ZipCipherStream : Stream
	{
		// Token: 0x06000385 RID: 901 RVA: 0x00015A5C File Offset: 0x00013C5C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipCipherStream(Stream p0, ZipCrypto cipher, CryptoMode mode)
		{
			this._cipher = cipher;
			this._s = p0;
			this._mode = mode;
		}

		// Token: 0x06000386 RID: 902 RVA: 0x00015A7C File Offset: 0x00013C7C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			int num2;
			int i;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					byte[] array2;
					switch (num)
					{
					case 0:
						goto IL_6F;
					case 1:
						goto IL_9D;
					case 2:
					{
						byte[] array = this._cipher.DecryptMessage(array2, num2);
						i = 0;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
						if (this._mode == CryptoMode.Encrypt)
						{
							goto Block_1;
						}
						goto IL_6F;
					}
					break;
					IL_6F:
					array2 = new byte[count];
					num2 = this._s.Read(array2, 0, count);
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_1:
			throw new NotImplementedException();
			IL_9D:
			while (i < num2)
			{
				byte[] array;
				buffer[offset + i] = array[i];
				i++;
			}
			return num2;
		}

		// Token: 0x06000387 RID: 903 RVA: 0x00015B44 File Offset: 0x00013D44
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			byte[] array;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int i;
					switch (num)
					{
					case 0:
						goto IL_81;
					case 1:
						goto IL_AA;
					case 2:
						while (i < count)
						{
							array[i] = buffer[offset + i];
							i++;
						}
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						if (this._mode == CryptoMode.Decrypt)
						{
							goto Block_2;
						}
						if (count == 0)
						{
							return;
						}
						goto IL_81;
					}
					break;
					IL_81:
					array = null;
					if (offset == 0)
					{
						goto IL_AF;
					}
					array = new byte[count];
					i = 0;
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_2:
			throw new NotImplementedException();
			IL_AA:
			goto IL_B1;
			IL_AF:
			array = buffer;
			IL_B1:
			byte[] array2 = this._cipher.EncryptMessage(array, count);
			this._s.Write(array2, 0, array2.Length);
		}

		// Token: 0x170000A5 RID: 165
		// (get) Token: 0x06000388 RID: 904 RVA: 0x00015C20 File Offset: 0x00013E20
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._mode == CryptoMode.Decrypt;
			}
		}

		// Token: 0x170000A6 RID: 166
		// (get) Token: 0x06000389 RID: 905 RVA: 0x00015C38 File Offset: 0x00013E38
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x170000A7 RID: 167
		// (get) Token: 0x0600038A RID: 906 RVA: 0x00015C48 File Offset: 0x00013E48
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._mode == CryptoMode.Encrypt;
			}
		}

		// Token: 0x0600038B RID: 907 RVA: 0x00015C60 File Offset: 0x00013E60
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
		}

		// Token: 0x170000A8 RID: 168
		// (get) Token: 0x0600038C RID: 908 RVA: 0x00015C70 File Offset: 0x00013E70
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x170000A9 RID: 169
		// (get) Token: 0x0600038D RID: 909 RVA: 0x00015C84 File Offset: 0x00013E84
		// (set) Token: 0x0600038E RID: 910 RVA: 0x00015C98 File Offset: 0x00013E98
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x0600038F RID: 911 RVA: 0x00015CAC File Offset: 0x00013EAC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06000390 RID: 912 RVA: 0x00015CC0 File Offset: 0x00013EC0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06000391 RID: 913 RVA: 0x00015CD4 File Offset: 0x00013ED4
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipCipherStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000161 RID: 353
		private ZipCrypto _cipher;

		// Token: 0x04000162 RID: 354
		private Stream _s;

		// Token: 0x04000163 RID: 355
		private CryptoMode _mode;
	}
}
