using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Application.Grabber.Browsers
{
	// Token: 0x0200002A RID: 42
	public class JavaScriptReader
	{
		// Token: 0x0600012A RID: 298 RVA: 0x00008594 File Offset: 0x00006794
		[MethodImpl(MethodImplOptions.NoInlining)]
		public JavaScriptReader(TextReader reader)
		{
			if (reader == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("ãd,\0Ã\u001b"));
			}
			this.Reader = reader;
			this.SBuilder = new StringBuilder();
		}

		// Token: 0x0600012B RID: 299 RVA: 0x000085CC File Offset: 0x000067CC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public object Read()
		{
			object result = this.ReadCore();
			this.SkipSpaces();
			if (this.ReadChar() >= 0)
			{
				throw this.JsonError(c0000c0.m00000f("ôy9\u0016ÇIP_Í\0/O|ò?\u0014¶ë\0Fg\u0097Uãs×\u0019®bÌ"));
			}
			return result;
		}

		// Token: 0x0600012C RID: 300 RVA: 0x00008604 File Offset: 0x00006804
		[MethodImpl(MethodImplOptions.NoInlining)]
		private object ReadCore()
		{
			this.SkipSpaces();
			int num = this.PeekChar();
			if (num < 0)
			{
				throw this.JsonError(c0000c0.m00000f("Øo.\vË\u0019_RØ\u0017nf[Ø\u0003Gÿì\u001e\u0013Y"));
			}
			if (num > 102)
			{
				if (num == 110)
				{
					this.Expect(c0000c0.m00000f("ÿt!\b"));
					return null;
				}
				if (num == 116)
				{
					this.Expect(c0000c0.m00000f("ås8\u0001"));
					return true;
				}
				if (num == 123)
				{
					this.ReadChar();
					Dictionary<string, object> dictionary = new Dictionary<string, object>();
					this.SkipSpaces();
					if (this.PeekChar() == 125)
					{
						this.ReadChar();
						return dictionary;
					}
					for (;;)
					{
						this.SkipSpaces();
						if (this.PeekChar() == 125)
						{
							break;
						}
						string key = this.ReadStringLiteral();
						this.SkipSpaces();
						this.Expect(':');
						this.SkipSpaces();
						dictionary[key] = this.ReadCore();
						this.SkipSpaces();
						num = this.ReadChar();
						if (num != 44 && num == 125)
						{
							goto IL_1A1;
						}
					}
					this.ReadChar();
					IL_1A1:
					int num2 = 0;
					KeyValuePair<string, object>[] array = new KeyValuePair<string, object>[dictionary.Count];
					foreach (KeyValuePair<string, object> keyValuePair in dictionary)
					{
						array[num2++] = keyValuePair;
					}
					return array;
				}
			}
			else
			{
				if (num == 34)
				{
					return this.ReadStringLiteral();
				}
				if (num != 91)
				{
					if (num == 102)
					{
						this.Expect(c0000c0.m00000f("÷`!\u0017Ã"));
						return false;
					}
				}
				else
				{
					this.ReadChar();
					List<object> list = new List<object>();
					this.SkipSpaces();
					if (this.PeekChar() == 93)
					{
						this.ReadChar();
						return list;
					}
					for (;;)
					{
						object item = this.ReadCore();
						list.Add(item);
						this.SkipSpaces();
						num = this.PeekChar();
						if (num != 44)
						{
							break;
						}
						this.ReadChar();
					}
					if (this.ReadChar() != 93)
					{
						throw this.JsonError(c0000c0.m00000f("ÛR\u0002*\u0086\bAEÍ\vnA}ä9Góì\nFZ­nÅs\u0099*ù"));
					}
					return list.ToArray();
				}
			}
			if ((48 <= num && num <= 57) || num == 45)
			{
				return this.ReadNumericLiteral();
			}
			throw this.JsonError(delegate0101.f000126(c0000c0.m00000f("Äo(\u001cÖ\fPCÉ\u0016nO`ö?\u0006õö\v\u0014\rãa\u009d.\u0099"), (char)num));
		}

		// Token: 0x0600012D RID: 301 RVA: 0x00008864 File Offset: 0x00006A64
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int PeekChar()
		{
			if (!this.HasPeek)
			{
				this.Peek = this.Reader.Read();
				this.HasPeek = true;
			}
			return this.Peek;
		}

		// Token: 0x0600012E RID: 302 RVA: 0x00008898 File Offset: 0x00006A98
		[MethodImpl(MethodImplOptions.NoInlining)]
		private int ReadChar()
		{
			object obj = this.HasPeek ? this.Peek : this.Reader.Read();
			this.HasPeek = false;
			if (this.Prev_Lf)
			{
				this.Line++;
				this.Column = 0;
				this.Prev_Lf = false;
			}
			object obj2 = obj;
			if (obj2 == 10)
			{
				this.Prev_Lf = true;
			}
			this.Column++;
			return obj2;
		}

		// Token: 0x0600012F RID: 303 RVA: 0x00008908 File Offset: 0x00006B08
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void SkipSpaces()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						int num2;
						if (num2 - 9 > 1)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_60;
					}
					case 1:
					{
						int num2;
						if (num2 == 32)
						{
							goto IL_60;
						}
						return;
					}
					case 2:
					{
						int num2;
						if (num2 != 13)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_60;
					}
					case 3:
					{
						IL_67:
						int num2 = this.PeekChar();
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_60:
					this.ReadChar();
					goto IL_67;
				}
			}
		}

		// Token: 0x06000130 RID: 304 RVA: 0x000089C0 File Offset: 0x00006BC0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private object ReadNumericLiteral()
		{
			StringBuilder stringBuilder;
			bool flag2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_1F9;
					case 1:
						goto IL_2A8;
					case 2:
						goto IL_36;
					case 3:
					{
						stringBuilder = new StringBuilder();
						if (this.PeekChar() == 45)
						{
							delegate0105.f00012b(stringBuilder, (char)this.ReadChar());
						}
						int num2 = 0;
						bool flag = this.PeekChar() == 48;
						int num3;
						for (;;)
						{
							num3 = this.PeekChar();
							if (num3 < 48 || 57 < num3)
							{
								break;
							}
							delegate0105.f00012b(stringBuilder, (char)this.ReadChar());
							if (flag && num2 == 1)
							{
								goto Block_13;
							}
							num2++;
						}
						if (num2 == 0)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						flag2 = false;
						int num4 = 0;
						if (this.PeekChar() == 46)
						{
							flag2 = true;
							delegate0105.f00012b(stringBuilder, (char)this.ReadChar());
							if (this.PeekChar() < 0)
							{
								goto Block_16;
							}
							for (;;)
							{
								num3 = this.PeekChar();
								if (num3 < 48 || 57 < num3)
								{
									break;
								}
								delegate0105.f00012b(stringBuilder, (char)this.ReadChar());
								num4++;
							}
							if (num4 == 0)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
						}
						num3 = this.PeekChar();
						if (num3 != 101 && num3 != 69)
						{
							goto Block_2;
						}
						stringBuilder.Append((char)this.ReadChar());
						num = delegate0da.f0000d7(-1);
						continue;
					}
					}
					break;
				}
			}
			IL_36:
			throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ù8\nóð\a\u0005\r¨sÙ6Ì\u0016²,\u0098\u0086ÎiE+LüâT"));
			Block_2:
			if (!flag2)
			{
				int num5;
				if (delegate0103.f000129(delegate0cd.f0000a6(stringBuilder), NumberStyles.Float, delegate0102.f000128(), ref num5))
				{
					return num5;
				}
				long num6;
				if (long.TryParse(stringBuilder.ToString(), NumberStyles.Float, delegate0102.f000128(), out num6))
				{
					return num6;
				}
				ulong num7;
				if (ulong.TryParse(stringBuilder.ToString(), NumberStyles.Float, delegate0102.f000128(), out num7))
				{
					return num7;
				}
			}
			decimal num8;
			if (decimal.TryParse(stringBuilder.ToString(), NumberStyles.Float, delegate0102.f000128(), out num8) && delegate0104.f00012a(num8, 0m))
			{
				return num8;
			}
			goto IL_356;
			Block_13:
			throw this.JsonError(c0000c0.m00000f("ýd,\0Ï\aT\u0017Ö\u0017<C{·,\u0015ó¢\0\tYä{Á?Ñ\0»s"));
			IL_1F9:
			throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ù8\nóð\a\u0005\r¨sÙ6Ì\u0016²,\u0098\u008dÙ=S#\vñù\0\u0096Q\u0018¦ñ"));
			Block_16:
			throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ù8\nóð\a\u0005\r¨sÙ6Ì\u0016²,\u0098\u0086ÎiE+LüâT"));
			IL_2A8:
			if (this.PeekChar() < 0)
			{
				throw new ArgumentException(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ù8\nóð\a\u0005\r¨sÙ6Ì\u0016²,\u0098\u008aØ~X'\u001côèT\u0095\u001e\b°åôWÇ[\u0080"));
			}
			int num9 = this.PeekChar();
			if (num9 != 43)
			{
				if (num9 == 45)
				{
					delegate0105.f00012b(stringBuilder, (char)this.ReadChar());
				}
			}
			else
			{
				stringBuilder.Append((char)this.ReadChar());
			}
			if (this.PeekChar() < 0)
			{
				throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ù8\nóð\a\u0005\r¨sÙ6Ì\u0016²,\u0098\u008aØ~X'\u001côèT\u0095\u001e\b°åôWÇ[\u0080"));
			}
			for (;;)
			{
				int num3 = this.PeekChar();
				if (num3 < 48 || 57 < num3)
				{
					break;
				}
				delegate0105.f00012b(stringBuilder, (char)this.ReadChar());
			}
			IL_356:
			return double.Parse(stringBuilder.ToString(), NumberStyles.Float, delegate0102.f000128());
		}

		// Token: 0x06000131 RID: 305 RVA: 0x00008D44 File Offset: 0x00006F44
		[MethodImpl(MethodImplOptions.NoInlining)]
		private string ReadStringLiteral()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					ushort num3;
					int num4;
					switch (num)
					{
					case 0:
						IL_1E7:
						if (num2 <= 92)
						{
							if (num2 != 34 && num2 != 47 && num2 != 92)
							{
								goto Block_16;
							}
							this.SBuilder.Append((char)num2);
							goto IL_185;
						}
						else if (num2 <= 102)
						{
							if (num2 == 98)
							{
								this.SBuilder.Append('\b');
								num = delegate0da.f0000d7(-2);
								continue;
							}
							if (num2 != 102)
							{
								goto Block_19;
							}
							this.SBuilder.Append('\f');
							goto IL_185;
						}
						else
						{
							if (num2 != 110)
							{
								switch (num2)
								{
								case 114:
									this.SBuilder.Append('\r');
									goto IL_185;
								case 116:
									this.SBuilder.Append('\t');
									goto IL_185;
								case 117:
									num3 = 0;
									num4 = 0;
									goto IL_126;
								}
								goto Block_21;
							}
							this.SBuilder.Append('\n');
							goto IL_185;
						}
						break;
					case 1:
						IL_C5:
						if (48 <= num2 && num2 <= 57)
						{
							num3 += (ushort)(num2 - 48);
						}
						if (65 <= num2 && num2 <= 70)
						{
							num3 += (ushort)(num2 - 65 + 10);
						}
						if (97 <= num2 && num2 <= 102)
						{
							num3 += (ushort)(num2 - 97 + 10);
						}
						num4++;
						goto IL_126;
					case 2:
						goto IL_185;
					case 3:
						if (this.PeekChar() != 34)
						{
							goto Block_8;
						}
						this.ReadChar();
						this.SBuilder.Length = 0;
						goto IL_185;
					}
					break;
					for (;;)
					{
						IL_185:
						num2 = this.ReadChar();
						if (num2 < 0)
						{
							goto IL_283;
						}
						if (num2 == 34)
						{
							goto IL_1BC;
						}
						if (num2 == 92)
						{
							break;
						}
						this.SBuilder.Append((char)num2);
					}
					num2 = this.ReadChar();
					if (num2 < 0)
					{
						goto Block_12;
					}
					goto IL_1E7;
					IL_126:
					if (num4 >= 4)
					{
						this.SBuilder.Append((char)num3);
						goto IL_185;
					}
					num3 = (ushort)(num3 << 4);
					if ((num2 = this.ReadChar()) >= 0)
					{
						goto IL_C5;
					}
					goto IL_141;
				}
			}
			IL_141:
			throw this.JsonError(c0000c0.m00000f("Øo.\vË\u0019_RØ\u0017nYfþ.\bòçN\u0005E¥hÌ0Ê\u0012¬7Ý\u0090Õ|G/LôäT\u0095L\f¤"));
			Block_8:
			throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ä9\u0015ÿì\tFA­nÈ!ß\u001bþq×\u0091Û|C"));
			IL_1BC:
			return this.SBuilder.ToString();
			Block_12:
			throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ä9\u0015ÿì\tFA­nÈ!ß\u001bå7Ñ\u008dÕrZ:\0ýùEÐ[\u001e«ôë\\\u0082F\u0091\u0089l²®Vs"));
			Block_16:
			Block_19:
			Block_21:
			throw this.JsonError(c0000c0.m00000f("Øo;\u0005Ê\0W\u0017æ!\u0001b(ä9\u0015ÿì\tFA­nÈ!ß\u001bå7Í\u008dÓeG/\u000fìèDÐ[\u001e«ôë\\\u0082V\u009c\u0099k¶£As¾"));
			IL_283:
			throw this.JsonError(c0000c0.m00000f("ÛR\u0002*\u0086\u001aGEÅ\u001c)\faäm\tùöN\u0005A«iÈ7"));
		}

		// Token: 0x06000132 RID: 306 RVA: 0x00008FE4 File Offset: 0x000071E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void Expect(char expected)
		{
			int num;
			if ((num = this.ReadChar()) != (int)expected)
			{
				throw this.JsonError(delegate0d5.f0000c8(c0000c0.m00000f("Ôy=\u0001Å\u001dVS\u008cU5\u001cu°aGñí\u001aF\n¿+Ðt"), expected, (char)num));
			}
		}

		// Token: 0x06000133 RID: 307 RVA: 0x0000902C File Offset: 0x0000722C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void Expect(string expected)
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_7E;
					case 1:
						num2++;
						goto IL_7E;
					case 2:
						if (this.ReadChar() == (int)expected[num2])
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A3;
					case 3:
						num2 = 0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_7E:
					if (num2 >= expected.Length)
					{
						return;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			return;
			IL_A3:
			throw this.JsonError(delegate0d5.f0000c8(c0000c0.m00000f("Ôy=\u0001Å\u001dVS\u008cU5\u001cu°aGòë\b\0H¶\u007fÉsß\u0003þl\u0089\u009e"), expected, num2));
		}

		// Token: 0x06000134 RID: 308 RVA: 0x00009100 File Offset: 0x00007300
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Exception JsonError(string msg)
		{
			return new ArgumentException(delegate0106.f00012c(c0000c0.m00000f("ê10J\u0086(G\u0017À\u001b I(ì|\u001aº¢\r\tA±wÃsÅE£"), msg, this.Line, this.Column));
		}

		// Token: 0x06000135 RID: 309 RVA: 0x00009140 File Offset: 0x00007340
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static JavaScriptReader()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000069 RID: 105
		private readonly StringBuilder SBuilder;

		// Token: 0x0400006A RID: 106
		private readonly TextReader Reader;

		// Token: 0x0400006B RID: 107
		private int Line = 1;

		// Token: 0x0400006C RID: 108
		private int Column;

		// Token: 0x0400006D RID: 109
		private int Peek;

		// Token: 0x0400006E RID: 110
		private bool HasPeek;

		// Token: 0x0400006F RID: 111
		private bool Prev_Lf;
	}
}
