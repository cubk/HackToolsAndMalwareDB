using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x0200007F RID: 127
	public class SaveProgressEventArgs : ZipProgressEventArgs
	{
		// Token: 0x060003C5 RID: 965 RVA: 0x0001601C File Offset: 0x0001421C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal SaveProgressEventArgs(string archiveName, bool before, int entriesTotal, int entriesSaved, ZipEntry entry) : base(archiveName, before ? ZipProgressEventType.Saving_BeforeWriteEntry : ZipProgressEventType.Saving_AfterWriteEntry)
		{
			base.EntriesTotal = entriesTotal;
			base.CurrentEntry = entry;
			this._entriesSaved = entriesSaved;
		}

		// Token: 0x060003C6 RID: 966 RVA: 0x0001604C File Offset: 0x0001424C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal SaveProgressEventArgs()
		{
		}

		// Token: 0x060003C7 RID: 967 RVA: 0x00016054 File Offset: 0x00014254
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal SaveProgressEventArgs(string archiveName, ZipProgressEventType flavor) : base(archiveName, flavor)
		{
		}

		// Token: 0x060003C8 RID: 968 RVA: 0x00016060 File Offset: 0x00014260
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static SaveProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesXferred, long totalBytes)
		{
			SaveProgressEventArgs saveProgressEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						saveProgressEventArgs.ArchiveName = archiveName;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_95;
					case 2:
						saveProgressEventArgs.CurrentEntry = entry;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						saveProgressEventArgs = new SaveProgressEventArgs(archiveName, ZipProgressEventType.Saving_EntryBytesRead);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_95:
			saveProgressEventArgs.BytesTransferred = bytesXferred;
			saveProgressEventArgs.TotalBytesToTransfer = totalBytes;
			return saveProgressEventArgs;
		}

		// Token: 0x060003C9 RID: 969 RVA: 0x00016114 File Offset: 0x00014314
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static SaveProgressEventArgs Started(string archiveName)
		{
			return new SaveProgressEventArgs(archiveName, ZipProgressEventType.Saving_Started);
		}

		// Token: 0x060003CA RID: 970 RVA: 0x0001612C File Offset: 0x0001432C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static SaveProgressEventArgs Completed(string archiveName)
		{
			return new SaveProgressEventArgs(archiveName, ZipProgressEventType.Saving_Completed);
		}

		// Token: 0x170000B1 RID: 177
		// (get) Token: 0x060003CB RID: 971 RVA: 0x00016144 File Offset: 0x00014344
		public int EntriesSaved
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._entriesSaved;
			}
		}

		// Token: 0x060003CC RID: 972 RVA: 0x00016158 File Offset: 0x00014358
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static SaveProgressEventArgs()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000184 RID: 388
		private int _entriesSaved;
	}
}
