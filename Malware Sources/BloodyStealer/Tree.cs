using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x020000A6 RID: 166
	internal sealed class Tree
	{
		// Token: 0x0600065E RID: 1630 RVA: 0x000306E4 File Offset: 0x0002E8E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int DistanceCode(int dist)
		{
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
						if (dist >= 256)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						num2 = (int)Tree._dist_code[dist];
						goto IL_55;
					case 1:
						return result;
					case 2:
						num2 = (int)Tree._dist_code[256 + SharedUtils.URShift(dist, 7)];
						goto IL_55;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_55:
					result = num2;
					num = delegate0da.f0000d7(-1);
				}
			}
			return result;
		}

		// Token: 0x0600065F RID: 1631 RVA: 0x000307A0 File Offset: 0x0002E9A0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void gen_bitlen(DeflateManager p0)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					int num4;
					bool flag;
					int num6;
					short[] array;
					switch (num)
					{
					case 0:
					{
						int maxLength;
						num2 = maxLength;
						int num3;
						num3++;
						goto IL_1D6;
					}
					case 1:
						for (;;)
						{
							flag = (num4 != 0);
							if (!flag)
							{
								break;
							}
							int num5 = p0.heap[--num6];
							flag = (num5 <= this.max_code);
							if (flag)
							{
								flag = ((int)array[num5 * 2 + 1] == num2);
								if (!flag)
								{
									p0.opt_len = (int)((long)p0.opt_len + ((long)num2 - (long)array[num5 * 2 + 1]) * (long)array[num5 * 2]);
									array[num5 * 2 + 1] = (short)num2;
								}
								num4--;
							}
						}
						num2--;
						goto IL_327;
					case 2:
						if (!flag)
						{
							int num3;
							flag = (num3 != 0);
							if (!flag)
							{
								return;
							}
							int maxLength;
							do
							{
								num2 = maxLength - 1;
								for (;;)
								{
									flag = (p0.bl_count[num2] == 0);
									if (!flag)
									{
										break;
									}
									num2--;
								}
								short[] bl_count = p0.bl_count;
								int num7 = num2;
								bl_count[num7] -= 1;
								p0.bl_count[num2 + 1] = p0.bl_count[num2 + 1] + 2;
								short[] bl_count2 = p0.bl_count;
								int num8 = maxLength;
								bl_count2[num8] -= 1;
								num3 -= 2;
								flag = (num3 > 0);
							}
							while (flag);
							num2 = maxLength;
							goto IL_327;
						}
						else
						{
							num4 = p0.heap[num6];
							num2 = (int)(array[(int)(array[num4 * 2 + 1] * 2 + 1)] + 1);
							int maxLength;
							flag = (num2 <= maxLength);
							if (!flag)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_1D6;
						}
						break;
					case 3:
					{
						array = this.dyn_tree;
						short[] treeCodes = this.staticTree.treeCodes;
						int[] extraBits = this.staticTree.extraBits;
						int extraBase = this.staticTree.extraBase;
						int maxLength = this.staticTree.maxLength;
						int num3 = 0;
						num2 = 0;
						for (;;)
						{
							flag = (num2 <= InternalConstants.MAX_BITS);
							if (!flag)
							{
								break;
							}
							p0.bl_count[num2] = 0;
							num2++;
						}
						array[p0.heap[p0.heap_max] * 2 + 1] = 0;
						num6 = p0.heap_max + 1;
						goto IL_273;
					}
					}
					break;
					IL_327:
					flag = (num2 != 0);
					if (!flag)
					{
						return;
					}
					num4 = (int)p0.bl_count[num2];
					num = delegate0da.f0000d7(-1);
					continue;
					IL_273:
					flag = (num6 < Tree.HEAP_SIZE);
					num = delegate0da.f0000d7(-2);
					continue;
					IL_1D6:
					array[num4 * 2 + 1] = (short)num2;
					flag = (num4 <= this.max_code);
					if (flag)
					{
						short[] bl_count3 = p0.bl_count;
						int num9 = num2;
						bl_count3[num9] += 1;
						int num10 = 0;
						int extraBase;
						flag = (num4 < extraBase);
						if (!flag)
						{
							int[] extraBits;
							num10 = extraBits[num4 - extraBase];
						}
						short num11 = array[num4 * 2];
						p0.opt_len += (int)num11 * (num2 + num10);
						short[] treeCodes;
						flag = (treeCodes == null);
						if (!flag)
						{
							p0.static_len += (int)num11 * ((int)treeCodes[num4 * 2 + 1] + num10);
						}
					}
					num6++;
					goto IL_273;
				}
			}
		}

		// Token: 0x06000660 RID: 1632 RVA: 0x00030AE8 File Offset: 0x0002ECE8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void build_tree(DeflateManager p0)
		{
			short[] array;
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					IL_05:
					int i;
					int elems;
					switch (num)
					{
					case 0:
						goto IL_37;
					case 1:
					{
						int num2 = p0.heap[1];
						p0.heap[--p0.heap_max] = i;
						p0.heap[--p0.heap_max] = num2;
						int num3;
						array[num3 * 2] = array[i * 2] + array[num2 * 2];
						p0.depth[num3] = (sbyte)(delegate016c.f0001c0((byte)p0.depth[i], (byte)p0.depth[num2]) + 1);
						array[i * 2 + 1] = (array[num2 * 2 + 1] = (short)num3);
						p0.heap[1] = num3++;
						p0.pqdownheap(array, 1);
						if (p0.heap_len < 2)
						{
							goto Block_6;
						}
						goto IL_A0;
					}
					case 2:
					{
						IL_54:
						int num3;
						while (p0.heap_len < 2)
						{
							num3 = (p0.heap[++p0.heap_len] = ((num4 < 2) ? (++num4) : 0));
							array[num3 * 2] = 1;
							p0.depth[num3] = 0;
							p0.opt_len--;
							short[] treeCodes;
							if (treeCodes != null)
							{
								p0.static_len -= (int)treeCodes[num3 * 2 + 1];
								num = delegate0da.f0000d7(-2);
								goto IL_05;
							}
						}
						this.max_code = num4;
						for (i = p0.heap_len / 2; i >= 1; i--)
						{
							p0.pqdownheap(array, i);
						}
						num3 = elems;
						goto IL_A0;
					}
					case 3:
					{
						array = this.dyn_tree;
						short[] treeCodes = this.staticTree.treeCodes;
						elems = this.staticTree.elems;
						num4 = -1;
						p0.heap_len = 0;
						p0.heap_max = Tree.HEAP_SIZE;
						i = 0;
						goto IL_46;
					}
					}
					break;
					IL_A0:
					i = p0.heap[1];
					p0.heap[1] = p0.heap[p0.heap_len--];
					p0.pqdownheap(array, 1);
					num = delegate0da.f0000d7(-1);
					continue;
					IL_46:
					if (i >= elems)
					{
						goto IL_54;
					}
					if (array[i * 2] == 0)
					{
						goto IL_37;
					}
					num4 = (p0.heap[++p0.heap_len] = i);
					p0.depth[i] = 0;
					IL_40:
					i++;
					goto IL_46;
					IL_37:
					array[i * 2 + 1] = 0;
					goto IL_40;
				}
			}
			Block_6:
			p0.heap[--p0.heap_max] = p0.heap[1];
			this.gen_bitlen(p0);
			Tree.gen_codes(array, num4, p0.bl_count);
		}

		// Token: 0x06000661 RID: 1633 RVA: 0x00030DE4 File Offset: 0x0002EFE4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void gen_codes(short[] tree, int max_code, short[] bl_count)
		{
			short[] array;
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num3;
					switch (num)
					{
					case 0:
					{
						short num2 = array[num3] = (short)(num2 + bl_count[num3 - 1] << 1);
						num3++;
						goto IL_9B;
					}
					case 1:
						goto IL_C8;
					case 2:
						goto IL_36;
					case 3:
					{
						array = new short[InternalConstants.MAX_BITS + 1];
						short num2 = 0;
						num3 = 1;
						goto IL_9B;
					}
					}
					break;
					IL_9B:
					if (num3 > InternalConstants.MAX_BITS)
					{
						num4 = 0;
						num = delegate0da.f0000d7(-2);
					}
					else
					{
						num = delegate0da.f0000d7(0);
					}
				}
			}
			IL_36:
			goto IL_EF;
			IL_C8:
			int num5 = num4 * 2;
			short[] array2 = array;
			int num7;
			int num6 = num7;
			short code;
			array2[num6] = (code = array2[num6]) + 1;
			tree[num5] = (short)Tree.bi_reverse((int)code, num7);
			IL_E9:
			num4++;
			IL_EF:
			if (num4 > max_code)
			{
				return;
			}
			num7 = (int)tree[num4 * 2 + 1];
			if (num7 == 0)
			{
				goto IL_E9;
			}
			goto IL_C8;
		}

		// Token: 0x06000662 RID: 1634 RVA: 0x00030EF0 File Offset: 0x0002F0F0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static int bi_reverse(int code, int len)
		{
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						num2 |= (code & 1);
						code >>= 1;
						num2 <<= 1;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_A1;
					case 2:
						if (--len <= 0)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_62;
					case 3:
						num2 = 0;
						goto IL_62;
					}
					break;
					IL_62:
					num = delegate0da.f0000d7(0);
				}
			}
			IL_A1:
			return num2 >> 1;
		}

		// Token: 0x06000663 RID: 1635 RVA: 0x00030FA4 File Offset: 0x0002F1A4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Tree()
		{
		}

		// Token: 0x06000664 RID: 1636 RVA: 0x00030FAC File Offset: 0x0002F1AC
		// Note: this type is marked as 'beforefieldinit'.
		static Tree()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			Tree.HEAP_SIZE = 2 * InternalConstants.L_CODES + 1;
			Tree.ExtraLengthBits = new int[]
			{
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				1,
				1,
				1,
				1,
				2,
				2,
				2,
				2,
				3,
				3,
				3,
				3,
				4,
				4,
				4,
				4,
				5,
				5,
				5,
				5,
				0
			};
			Tree.ExtraDistanceBits = new int[]
			{
				0,
				0,
				0,
				0,
				1,
				1,
				2,
				2,
				3,
				3,
				4,
				4,
				5,
				5,
				6,
				6,
				7,
				7,
				8,
				8,
				9,
				9,
				10,
				10,
				11,
				11,
				12,
				12,
				13,
				13
			};
			Tree.extra_blbits = new int[]
			{
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				2,
				3,
				7
			};
			Tree.bl_order = new sbyte[]
			{
				16,
				17,
				18,
				0,
				8,
				7,
				9,
				6,
				10,
				5,
				11,
				4,
				12,
				3,
				13,
				2,
				14,
				1,
				15
			};
			Tree._dist_code = new sbyte[]
			{
				0,
				1,
				2,
				3,
				4,
				4,
				5,
				5,
				6,
				6,
				6,
				6,
				7,
				7,
				7,
				7,
				8,
				8,
				8,
				8,
				8,
				8,
				8,
				8,
				9,
				9,
				9,
				9,
				9,
				9,
				9,
				9,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				11,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				12,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				13,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				14,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				0,
				0,
				16,
				17,
				18,
				18,
				19,
				19,
				20,
				20,
				20,
				20,
				21,
				21,
				21,
				21,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				28,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29,
				29
			};
			Tree.LengthCode = new sbyte[]
			{
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				8,
				9,
				9,
				10,
				10,
				11,
				11,
				12,
				12,
				12,
				12,
				13,
				13,
				13,
				13,
				14,
				14,
				14,
				14,
				15,
				15,
				15,
				15,
				16,
				16,
				16,
				16,
				16,
				16,
				16,
				16,
				17,
				17,
				17,
				17,
				17,
				17,
				17,
				17,
				18,
				18,
				18,
				18,
				18,
				18,
				18,
				18,
				19,
				19,
				19,
				19,
				19,
				19,
				19,
				19,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				21,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				22,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				23,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				24,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				25,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				26,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				27,
				28
			};
			Tree.LengthBase = new int[]
			{
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				10,
				12,
				14,
				16,
				20,
				24,
				28,
				32,
				40,
				48,
				56,
				64,
				80,
				96,
				112,
				128,
				160,
				192,
				224,
				0
			};
			Tree.DistanceBase = new int[]
			{
				0,
				1,
				2,
				3,
				4,
				6,
				8,
				12,
				16,
				24,
				32,
				48,
				64,
				96,
				128,
				192,
				256,
				384,
				512,
				768,
				1024,
				1536,
				2048,
				3072,
				4096,
				6144,
				8192,
				12288,
				16384,
				24576
			};
		}

		// Token: 0x0400035E RID: 862
		internal const int Buf_size = 16;

		// Token: 0x0400035F RID: 863
		private static readonly int HEAP_SIZE;

		// Token: 0x04000360 RID: 864
		internal static readonly int[] ExtraLengthBits;

		// Token: 0x04000361 RID: 865
		internal static readonly int[] ExtraDistanceBits;

		// Token: 0x04000362 RID: 866
		internal static readonly int[] extra_blbits;

		// Token: 0x04000363 RID: 867
		internal static readonly sbyte[] bl_order;

		// Token: 0x04000364 RID: 868
		private static readonly sbyte[] _dist_code;

		// Token: 0x04000365 RID: 869
		internal static readonly sbyte[] LengthCode;

		// Token: 0x04000366 RID: 870
		internal static readonly int[] LengthBase;

		// Token: 0x04000367 RID: 871
		internal static readonly int[] DistanceBase;

		// Token: 0x04000368 RID: 872
		internal short[] dyn_tree;

		// Token: 0x04000369 RID: 873
		internal int max_code;

		// Token: 0x0400036A RID: 874
		internal StaticTree staticTree;
	}
}
