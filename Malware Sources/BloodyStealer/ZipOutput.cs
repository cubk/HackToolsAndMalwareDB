using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Ionic.Zip
{
	// Token: 0x0200008B RID: 139
	internal class ZipOutput
	{
		// Token: 0x06000562 RID: 1378 RVA: 0x000241A0 File Offset: 0x000223A0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool WriteCentralDirectoryStructure(Stream p0, ICollection<ZipEntry> entries, uint numSegments, Zip64Option zip64, string comment, Encoding encoding)
		{
			ZipSegmentedStream zipSegmentedStream = p0 as ZipSegmentedStream;
			if (zipSegmentedStream != null)
			{
				zipSegmentedStream.ContiguousWrite = true;
			}
			MemoryStream memoryStream = new MemoryStream();
			foreach (ZipEntry zipEntry in entries)
			{
				if (zipEntry.IncludedInMostRecentSave)
				{
					zipEntry.WriteCentralDirectoryEntry(memoryStream);
				}
			}
			byte[] array = memoryStream.ToArray();
			delegate0109.f000133(p0, array, 0, array.Length);
			CountingStream countingStream = p0 as CountingStream;
			long num = (countingStream != null) ? countingStream.ComputedPosition : delegate0e3.f0000e5(p0);
			long num2 = num - (long)array.Length;
			uint num3 = (zipSegmentedStream != null) ? zipSegmentedStream.CurrentSegment : 0U;
			long num4 = num - num2;
			int num5 = ZipOutput.CountEntries(entries);
			bool flag = zip64 == Zip64Option.Always || num5 >= 65535 || num4 > (long)((ulong)-1) || num2 > (long)((ulong)-1);
			byte[] array2;
			if (flag)
			{
				if (zip64 == Zip64Option.f000059)
				{
					StackFrame p = new StackFrame(1);
					if (delegate0fd.f00011f(delegate0166.f0001b8(p)) == delegate013e.f00017c(typeof(ZipFile).TypeHandle))
					{
						throw new ZipException(c0000c0.m00000f("Åi(DÇ\u001bP_Å\u0004+\fzò<\u0012ÿð\v\u0015\r¥:÷\u001aîAê7û\u0086ØiE+\0¸ÉI\u0082[\u000e¼úé@\u008c\u0015·\u0097w¤©Qs¾Åíu\u0093\u0084:N\u0095®âfµlº¤x$\u0015DÚÕÖb\u007fA(\u0099+«[\u009c\u0082O.ä\u008e\u0014YgÉ<¦huO¢\u009cm\u0005"));
					}
					throw new ZipException(c0000c0.m00000f("Åi(DÇ\u001bP_Å\u0004+\fzò<\u0012ÿð\v\u0015\r¥:÷\u001aîAê7û\u0086ØiE+\0¸ÉI\u0082[\u000e¼úé@\u008c\u0015·\u0097w¤©Qs¾Åíu\u0093\u0084:N\u0095®âfµlº¤x-\t\\Ï\u008e÷Bni$\u0088p±I\u009a\u0086C\u0011à¢\u0014G6Ýl¤ujZµ\u009a`R¿"));
				}
				else
				{
					array = ZipOutput.GenZip64EndOfCentralDirectory(num2, num, num5, numSegments);
					array2 = ZipOutput.GenCentralDirectoryFooter(num2, num, zip64, num5, comment, encoding);
					if (num3 != 0U)
					{
						uint p2 = zipSegmentedStream.ComputeSegment(array.Length + array2.Length);
						int num6 = 16;
						delegate0fe.f000121(delegate0167.f0001ba(p2), 0, array, num6, 4);
						num6 += 4;
						delegate0fe.f000121(delegate0167.f0001ba(p2), 0, array, num6, 4);
						num6 = 60;
						delegate0fe.f000121(delegate0167.f0001ba(p2), 0, array, num6, 4);
						num6 += 4;
						num6 += 8;
						delegate0fe.f000121(delegate0167.f0001ba(p2), 0, array, num6, 4);
					}
					p0.Write(array, 0, array.Length);
				}
			}
			else
			{
				array2 = ZipOutput.GenCentralDirectoryFooter(num2, num, zip64, num5, comment, encoding);
			}
			if (num3 != 0U)
			{
				ushort p3 = (ushort)zipSegmentedStream.ComputeSegment(array2.Length);
				int num7 = 4;
				delegate0fe.f000121(delegate0168.f0001bb(p3), 0, array2, num7, 2);
				num7 += 2;
				delegate0fe.f000121(delegate0168.f0001bb(p3), 0, array2, num7, 2);
				num7 += 2;
			}
			p0.Write(array2, 0, array2.Length);
			if (zipSegmentedStream != null)
			{
				zipSegmentedStream.ContiguousWrite = false;
			}
			return flag;
		}

		// Token: 0x06000563 RID: 1379 RVA: 0x00024458 File Offset: 0x00022658
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static byte[] GenCentralDirectoryFooter(long StartOfCentralDirectory, long EndOfCentralDirectory, Zip64Option zip64, int entryCount, string comment, Encoding encoding)
		{
			byte[] array;
			int num2;
			byte[] array2;
			short num5;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						array[num2++] = 0;
						array[num2++] = 0;
						if (entryCount >= 65535 || zip64 == Zip64Option.Always)
						{
							for (int i = 0; i < 4; i++)
							{
								array[num2++] = byte.MaxValue;
							}
						}
						else
						{
							array[num2++] = (byte)(entryCount & 255);
							array[num2++] = (byte)((entryCount & 65280) >> 8);
							array[num2++] = (byte)(entryCount & 255);
							array[num2++] = (byte)((entryCount & 65280) >> 8);
						}
						long num3 = EndOfCentralDirectory - StartOfCentralDirectory;
						if (num3 < (long)((ulong)-1))
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_40;
					}
					case 1:
						goto IL_28B;
					case 2:
					{
						if (StartOfCentralDirectory >= (long)((ulong)-1))
						{
							goto IL_40;
						}
						long num3;
						array[num2++] = (byte)(num3 & 255L);
						array[num2++] = (byte)((num3 & 65280L) >> 8);
						array[num2++] = (byte)((num3 & 16711680L) >> 16);
						array[num2++] = (byte)((num3 & (long)((ulong)-16777216)) >> 24);
						array[num2++] = (byte)(StartOfCentralDirectory & 255L);
						array[num2++] = (byte)((StartOfCentralDirectory & 65280L) >> 8);
						array[num2++] = (byte)((StartOfCentralDirectory & 16711680L) >> 16);
						array[num2++] = (byte)((StartOfCentralDirectory & (long)((ulong)-16777216)) >> 24);
						goto IL_114;
					}
					case 3:
					{
						int num4 = 22;
						array2 = null;
						num5 = 0;
						if (comment != null && comment.Length != 0)
						{
							array2 = delegate0d7.f0000d2(encoding, comment);
							num5 = (short)array2.Length;
						}
						num4 += (int)num5;
						array = new byte[num4];
						num2 = 0;
						byte[] p = delegate0167.f0001ba(101010256U);
						delegate0fe.f000121(p, 0, array, num2, 4);
						num2 += 4;
						array[num2++] = 0;
						array[num2++] = 0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
					IL_114:
					if (comment != null)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_297;
					IL_40:
					for (int i = 0; i < 8; i++)
					{
						array[num2++] = byte.MaxValue;
					}
					goto IL_114;
				}
			}
			IL_28B:
			if (comment.Length != 0)
			{
				if ((int)num5 + num2 + 2 > array.Length)
				{
					num5 = (short)(array.Length - num2 - 2);
				}
				array[num2++] = (byte)(num5 & 255);
				array[num2++] = (byte)(((int)num5 & 65280) >> 8);
				if (num5 != 0)
				{
					int i = 0;
					while (i < (int)num5 && num2 + i < array.Length)
					{
						array[num2 + i] = array2[i];
						i++;
					}
					num2 += i;
					return array;
				}
				return array;
			}
			IL_297:
			array[num2++] = 0;
			array[num2++] = 0;
			return array;
		}

		// Token: 0x06000564 RID: 1380 RVA: 0x00024790 File Offset: 0x00022990
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static byte[] GenZip64EndOfCentralDirectory(long StartOfCentralDirectory, long EndOfCentralDirectory, int entryCount, uint numSegments)
		{
			byte[] array;
			int num2;
			byte[] p2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						array[num2++] = 0;
						array[num2++] = 45;
						array[num2++] = 0;
						for (int i = 0; i < 8; i++)
						{
							array[num2++] = 0;
						}
						long num3 = (long)entryCount;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_184;
					case 2:
					{
						long num3;
						Array.Copy(BitConverter.GetBytes(num3), 0, array, num2, 8);
						num2 += 8;
						delegate0fe.f000121(delegate0152.f00019e(num3), 0, array, num2, 8);
						num2 += 8;
						long p = EndOfCentralDirectory - StartOfCentralDirectory;
						delegate0fe.f000121(delegate0152.f00019e(p), 0, array, num2, 8);
						num2 += 8;
						delegate0fe.f000121(delegate0152.f00019e(StartOfCentralDirectory), 0, array, num2, 8);
						num2 += 8;
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						array = new byte[76];
						num2 = 0;
						p2 = delegate0167.f0001ba(101075792U);
						delegate0fe.f000121(p2, 0, array, num2, 4);
						num2 += 4;
						long p3 = 44L;
						delegate0fe.f000121(delegate0152.f00019e(p3), 0, array, num2, 8);
						num2 += 8;
						array[num2++] = 45;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_184:
			p2 = BitConverter.GetBytes(117853008U);
			delegate0fe.f000121(p2, 0, array, num2, 4);
			num2 += 4;
			uint p4 = (numSegments == 0U) ? 0U : (numSegments - 1U);
			delegate0fe.f000121(delegate0167.f0001ba(p4), 0, array, num2, 4);
			num2 += 4;
			delegate0fe.f000121(delegate0152.f00019e(EndOfCentralDirectory), 0, array, num2, 8);
			num2 += 8;
			delegate0fe.f000121(delegate0167.f0001ba(numSegments - 1U), 0, array, num2, 4);
			num2 += 4;
			return array;
		}

		// Token: 0x06000565 RID: 1381 RVA: 0x000249AC File Offset: 0x00022BAC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static int CountEntries(ICollection<ZipEntry> _entries)
		{
			int num = 0;
			foreach (ZipEntry zipEntry in _entries)
			{
				if (zipEntry.IncludedInMostRecentSave)
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06000566 RID: 1382 RVA: 0x000249E4 File Offset: 0x00022BE4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipOutput()
		{
		}

		// Token: 0x06000567 RID: 1383 RVA: 0x000249EC File Offset: 0x00022BEC
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipOutput()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}
	}
}
