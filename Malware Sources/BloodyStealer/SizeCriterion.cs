using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x0200005F RID: 95
	internal class SizeCriterion : SelectionCriterion
	{
		// Token: 0x060002D2 RID: 722 RVA: 0x00010CAC File Offset: 0x0000EEAC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			StringBuilder p = new StringBuilder();
			delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(p, c0000c0.m00000f("âh7\u0001\u0086")), EnumUtil.GetDescription(this.f000048)), c0000c0.m00000f("±")), this.Size.ToString());
			return delegate0cd.f0000ab(p);
		}

		// Token: 0x060002D3 RID: 723 RVA: 0x00010D24 File Offset: 0x0000EF24
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(string filename)
		{
			FileInfo p = new FileInfo(filename);
			return this._Evaluate(delegate0e3.f0000e6(p));
		}

		// Token: 0x060002D4 RID: 724 RVA: 0x00010D4C File Offset: 0x0000EF4C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool _Evaluate(long Length)
		{
			for (;;)
			{
				switch (delegate0da.f0000d7(-3))
				{
				case 0:
					goto IL_8E;
				case 1:
					goto IL_AF;
				case 2:
					goto IL_36;
				case 3:
					goto IL_57;
				}
			}
			IL_36:
			return Length <= this.Size;
			IL_57:
			bool result;
			switch (this.f000048)
			{
			case ComparisonOperator.GreaterThan:
				result = (Length > this.Size);
				break;
			case ComparisonOperator.GreaterThanOrEqualTo:
				IL_8E:
				result = (Length >= this.Size);
				break;
			case ComparisonOperator.LesserThan:
				result = (Length < this.Size);
				break;
			case ComparisonOperator.LesserThanOrEqualTo:
				goto IL_36;
			case ComparisonOperator.EqualTo:
				IL_AF:
				result = (Length == this.Size);
				break;
			case ComparisonOperator.NotEqualTo:
				result = (Length != this.Size);
				break;
			default:
				throw new ArgumentException(c0000c0.m00000f("Þq(\u0016Ç\u001d\\E"));
			}
			return result;
		}

		// Token: 0x060002D5 RID: 725 RVA: 0x00010E28 File Offset: 0x0000F028
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(ZipEntry entry)
		{
			return this._Evaluate(entry.UncompressedSize);
		}

		// Token: 0x060002D6 RID: 726 RVA: 0x00010E44 File Offset: 0x0000F044
		[MethodImpl(MethodImplOptions.NoInlining)]
		public SizeCriterion()
		{
		}

		// Token: 0x060002D7 RID: 727 RVA: 0x00010E4C File Offset: 0x0000F04C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static SizeCriterion()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000113 RID: 275
		internal ComparisonOperator f000048;

		// Token: 0x04000114 RID: 276
		internal long Size;
	}
}
