using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;

namespace Application.Grabber.Browsers
{
	// Token: 0x0200002B RID: 43
	public class JsonArray : JsonValue, IList<JsonValue>, ICollection<JsonValue>, IEnumerable<JsonValue>, IEnumerable
	{
		// Token: 0x17000035 RID: 53
		// (get) Token: 0x06000136 RID: 310 RVA: 0x0000914C File Offset: 0x0000734C
		public override int Count
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.list.Count;
			}
		}

		// Token: 0x17000036 RID: 54
		// (get) Token: 0x06000137 RID: 311 RVA: 0x00009164 File Offset: 0x00007364
		public bool IsReadOnly
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x17000037 RID: 55
		public sealed override JsonValue this[int index]
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.list[index];
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this.list[index] = value;
			}
		}

		// Token: 0x17000038 RID: 56
		// (get) Token: 0x0600013A RID: 314 RVA: 0x000091AC File Offset: 0x000073AC
		public override JsonType JsonType
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return JsonType.Array;
			}
		}

		// Token: 0x0600013B RID: 315 RVA: 0x000091BC File Offset: 0x000073BC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public JsonArray(params JsonValue[] items)
		{
			this.list = new List<JsonValue>();
			this.AddRange(items);
		}

		// Token: 0x0600013C RID: 316 RVA: 0x000091D8 File Offset: 0x000073D8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public JsonArray(IEnumerable<JsonValue> items)
		{
			if (items == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("øu(\tÕ"));
			}
			this.list = new List<JsonValue>(items);
		}

		// Token: 0x0600013D RID: 317 RVA: 0x00009200 File Offset: 0x00007400
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Add(JsonValue item)
		{
			if (item == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("øu(\t"));
			}
			this.list.Add(item);
		}

		// Token: 0x0600013E RID: 318 RVA: 0x0000922C File Offset: 0x0000742C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddRange(IEnumerable<JsonValue> items)
		{
			if (items == null)
			{
				throw new ArgumentNullException(c0000c0.m00000f("øu(\tÕ"));
			}
			this.list.AddRange(items);
		}

		// Token: 0x0600013F RID: 319 RVA: 0x00009258 File Offset: 0x00007458
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddRange(params JsonValue[] items)
		{
			if (items != null)
			{
				this.list.AddRange(items);
			}
		}

		// Token: 0x06000140 RID: 320 RVA: 0x00009274 File Offset: 0x00007474
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Clear()
		{
			this.list.Clear();
		}

		// Token: 0x06000141 RID: 321 RVA: 0x0000928C File Offset: 0x0000748C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public bool Contains(JsonValue item)
		{
			return this.list.Contains(item);
		}

		// Token: 0x06000142 RID: 322 RVA: 0x000092A8 File Offset: 0x000074A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void CopyTo(JsonValue[] array, int arrayIndex)
		{
			this.list.CopyTo(array, arrayIndex);
		}

		// Token: 0x06000143 RID: 323 RVA: 0x000092C4 File Offset: 0x000074C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int IndexOf(JsonValue item)
		{
			return this.list.IndexOf(item);
		}

		// Token: 0x06000144 RID: 324 RVA: 0x000092E0 File Offset: 0x000074E0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Insert(int index, JsonValue item)
		{
			this.list.Insert(index, item);
		}

		// Token: 0x06000145 RID: 325 RVA: 0x000092FC File Offset: 0x000074FC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public bool Remove(JsonValue item)
		{
			return this.list.Remove(item);
		}

		// Token: 0x06000146 RID: 326 RVA: 0x00009318 File Offset: 0x00007518
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void RemoveAt(int index)
		{
			this.list.RemoveAt(index);
		}

		// Token: 0x06000147 RID: 327 RVA: 0x00009334 File Offset: 0x00007534
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Save(Stream stream, bool parsing)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					switch (num)
					{
					case 0:
					{
						IL_B0:
						JsonValue jsonValue = this.list[num2];
						if (jsonValue != null)
						{
							jsonValue.Save(stream, parsing);
							goto IL_58;
						}
						stream.WriteByte(110);
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						stream.WriteByte(32);
						goto IL_F8;
					case 2:
						stream.WriteByte(117);
						delegate0107.f00012e(stream, 108);
						delegate0107.f00012e(stream, 108);
						goto IL_58;
					case 3:
						if (stream == null)
						{
							goto Block_2;
						}
						stream.WriteByte(91);
						num2 = 0;
						goto IL_FC;
					}
					break;
					IL_58:
					if (num2 < this.Count - 1)
					{
						delegate0107.f00012e(stream, 44);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_F8;
					IL_FC:
					if (num2 >= this.list.Count)
					{
						goto Block_4;
					}
					goto IL_B0;
					IL_F8:
					num2++;
					goto IL_FC;
				}
			}
			Block_2:
			throw new ArgumentNullException(c0000c0.m00000f("âu?\u0001Ç\u0004"));
			Block_4:
			delegate0107.f00012e(stream, 93);
		}

		// Token: 0x06000148 RID: 328 RVA: 0x00009460 File Offset: 0x00007660
		[MethodImpl(MethodImplOptions.NoInlining)]
		IEnumerator<JsonValue> IEnumerable<JsonValue>.GetEnumerator()
		{
			return this.list.GetEnumerator();
		}

		// Token: 0x06000149 RID: 329 RVA: 0x00009480 File Offset: 0x00007680
		[MethodImpl(MethodImplOptions.NoInlining)]
		IEnumerator IEnumerable.GetEnumerator()
		{
			return this.list.GetEnumerator();
		}

		// Token: 0x0600014A RID: 330 RVA: 0x000094A0 File Offset: 0x000076A0
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static JsonArray()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000070 RID: 112
		private List<JsonValue> list;
	}
}
