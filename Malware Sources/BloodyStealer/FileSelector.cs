using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x02000065 RID: 101
	public class FileSelector
	{
		// Token: 0x060002FC RID: 764 RVA: 0x00012224 File Offset: 0x00010424
		[MethodImpl(MethodImplOptions.NoInlining)]
		public FileSelector(string selectionCriteria) : this(selectionCriteria, true)
		{
		}

		// Token: 0x060002FD RID: 765 RVA: 0x00012230 File Offset: 0x00010430
		[MethodImpl(MethodImplOptions.NoInlining)]
		public FileSelector(string selectionCriteria, bool traverseDirectoryReparsePoints)
		{
			if (!delegate0d2.f0000c3(selectionCriteria))
			{
				this._Criterion = FileSelector._ParseCriterion(selectionCriteria);
			}
			this.TraverseReparsePoints = traverseDirectoryReparsePoints;
		}

		// Token: 0x1700008C RID: 140
		// (get) Token: 0x060002FE RID: 766 RVA: 0x00012258 File Offset: 0x00010458
		// (set) Token: 0x060002FF RID: 767 RVA: 0x00012280 File Offset: 0x00010480
		public string SelectionCriteria
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._Criterion == null)
				{
					return null;
				}
				return this._Criterion.ToString();
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							return;
						case 1:
							goto IL_96;
						case 2:
							goto IL_36;
						case 3:
							if (value == null)
							{
								this._Criterion = null;
								num = delegate0da.f0000d7(0);
								continue;
							}
							if (value.Trim() == c0000c0.m00000f(""))
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_96;
						}
						break;
					}
				}
				IL_36:
				this._Criterion = null;
				return;
				IL_96:
				this._Criterion = FileSelector._ParseCriterion(value);
			}
		}

		// Token: 0x1700008D RID: 141
		// (get) Token: 0x06000300 RID: 768 RVA: 0x00012330 File Offset: 0x00010530
		// (set) Token: 0x06000301 RID: 769 RVA: 0x00012344 File Offset: 0x00010544
		public bool TraverseReparsePoints { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x06000302 RID: 770 RVA: 0x00012358 File Offset: 0x00010558
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static SelectionCriterion _ParseCriterion(string p0)
		{
			if (p0 == null)
			{
				return null;
			}
			string[][] array = new string[][]
			{
				new string[]
				{
					c0000c0.m00000f("Í)\u0011L"),
					c0000c0.m00000f("¹!e")
				},
				new string[]
				{
					c0000c0.m00000f("Í(\u0011M"),
					c0000c0.m00000f("¸!d")
				},
				new string[]
				{
					c0000c0.m00000f("Í)e8õ@"),
					c0000c0.m00000f("¹!iU")
				},
				new string[]
				{
					c0000c0.m00000f("¹]\u001eMú@"),
					c0000c0.m00000f("µ0mM")
				},
				new string[]
				{
					c0000c0.m00000f("¹]\u001eMúA"),
					c0000c0.m00000f("µ0mL")
				},
				new string[]
				{
					c0000c0.m00000f("Í(e8õ@"),
					c0000c0.m00000f("¸!iU")
				},
				new string[]
				{
					c0000c0.m00000f("¹Z\u0013DûB\u001a\t\u0084)\u0010\fU¼d"),
					c0000c0.m00000f("µ0mZ\u0086M\u0001")
				},
				new string[]
				{
					c0000c0.m00000f("¹Z\u0013DûB\u001a\v\u0084)\u0010\fU¼d"),
					c0000c0.m00000f("µ0mX\u0086M\u0001")
				},
				new string[]
				{
					c0000c0.m00000f("¹Z\u0013DûB\u001a\u0016\u0091Z\u0015r(ÊfN"),
					c0000c0.m00000f("µ0mE\u009bI\u0017\u0005")
				},
				new string[]
				{
					c0000c0.m00000f("¹Z\u0013DûB\u001a\n\u0084)\u0010\fU¼d"),
					c0000c0.m00000f("µ0mY\u0086M\u0001")
				}
			};
			for (int i = 0; i < array.Length; i++)
			{
				Regex p = new Regex(array[i][0]);
				p0 = delegate013b.f000179(p, p0, array[i][1]);
			}
			if (p0.IndexOf(c0000c0.m00000f("±")) == -1)
			{
				p0 = delegate0d0.f0000bc(c0000c0.m00000f("ÿ` \u0001\u0086T\u0013"), p0);
			}
			string[] array2 = p0.Trim().Split(new char[]
			{
				' ',
				'\t'
			});
			if (array2.Length < 3)
			{
				throw new ArgumentException(p0);
			}
			SelectionCriterion selectionCriterion = null;
			Stack<FileSelector.ParseState> stack = new Stack<FileSelector.ParseState>();
			Stack<SelectionCriterion> stack2 = new Stack<SelectionCriterion>();
			stack.Push(FileSelector.ParseState.Start);
			int j = 0;
			while (j < array2.Length)
			{
				string text = delegate0cd.f0000ac(array2[j]);
				string key;
				if ((key = text) != null)
				{
					if (c00008e.f000065 == null)
					{
						c00008e.f000065 = new Dictionary<string, int>(16)
						{
							{
								c0000c0.m00000f("ðo)"),
								0
							},
							{
								c0000c0.m00000f("én?"),
								1
							},
							{
								c0000c0.m00000f("þs"),
								2
							},
							{
								c0000c0.m00000f("¹"),
								3
							},
							{
								c0000c0.m00000f("¸"),
								4
							},
							{
								c0000c0.m00000f("ðu$\tÃ"),
								5
							},
							{
								c0000c0.m00000f("òu$\tÃ"),
								6
							},
							{
								c0000c0.m00000f("üu$\tÃ"),
								7
							},
							{
								c0000c0.m00000f("ýd#\u0003Ò\u0001"),
								8
							},
							{
								c0000c0.m00000f("âh7\u0001"),
								9
							},
							{
								c0000c0.m00000f("÷h!\u0001È\b^R"),
								10
							},
							{
								c0000c0.m00000f("ÿ` \u0001"),
								11
							},
							{
								c0000c0.m00000f("ðu9\u0016Õ"),
								12
							},
							{
								c0000c0.m00000f("ðu9\u0016Ï\vFCÉ\u0001"),
								13
							},
							{
								c0000c0.m00000f("åx=\u0001"),
								14
							},
							{
								c0000c0.m00000f(""),
								15
							}
						};
					}
					int num;
					if (c00008e.f000065.TryGetValue(key, out num))
					{
						FileSelector.ParseState parseState;
						switch (num)
						{
						case 0:
						case 1:
						case 2:
						{
							parseState = stack.Peek();
							if (parseState != FileSelector.ParseState.CriterionDone)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							if (array2.Length <= j + 3)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							LogicalConjunction conjunction = (LogicalConjunction)Enum.Parse(typeof(LogicalConjunction), delegate0cd.f0000ad(array2[j]));
							selectionCriterion = new CompoundCriterion
							{
								Left = selectionCriterion,
								Right = null,
								Conjunction = conjunction
							};
							stack.Push(parseState);
							stack.Push(FileSelector.ParseState.ConjunctionPending);
							stack2.Push(selectionCriterion);
							break;
						}
						case 3:
							parseState = stack.Peek();
							if (parseState != FileSelector.ParseState.Start && parseState != FileSelector.ParseState.ConjunctionPending && parseState != FileSelector.ParseState.OpenParen)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							if (array2.Length <= j + 4)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							stack.Push(FileSelector.ParseState.OpenParen);
							break;
						case 4:
							parseState = stack.Pop();
							if (stack.Peek() != FileSelector.ParseState.OpenParen)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							stack.Pop();
							stack.Push(FileSelector.ParseState.CriterionDone);
							break;
						case 5:
						case 6:
						case 7:
						{
							if (array2.Length <= j + 2)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							DateTime dateTime = DateTime.ParseExact(array2[j + 2], c0000c0.m00000f("èx4\u001d\u008b$~\u001aÈ\u0016cd@­ \n¬ñ\u001d"), null);
							dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Local).ToUniversalTime();
							selectionCriterion = new TimeCriterion
							{
								Which = (WhichTime)delegate013f.f00017f(delegate013e.f00017c(typeof(WhichTime).TypeHandle), array2[j]),
								f000048 = (ComparisonOperator)EnumUtil.Parse(delegate013e.f00017c(typeof(ComparisonOperator).TypeHandle), array2[j + 1]),
								Time = dateTime
							};
							j += 2;
							stack.Push(FileSelector.ParseState.CriterionDone);
							break;
						}
						case 8:
						case 9:
						{
							if (array2.Length <= j + 2)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							string text2 = array2[j + 2];
							long size;
							if (text2.ToUpper().EndsWith(c0000c0.m00000f("Ú")))
							{
								size = delegate0140.f000180(text2.Substring(0, text2.Length - 1)) * 1024L;
							}
							else if (text2.ToUpper().EndsWith(c0000c0.m00000f("ÚC")))
							{
								size = delegate0140.f000180(text2.Substring(0, text2.Length - 2)) * 1024L;
							}
							else if (text2.ToUpper().EndsWith(c0000c0.m00000f("Ü")))
							{
								size = delegate0140.f000180(text2.Substring(0, text2.Length - 1)) * 1024L * 1024L;
							}
							else if (text2.ToUpper().EndsWith(c0000c0.m00000f("ÜC")))
							{
								size = delegate0140.f000180(text2.Substring(0, text2.Length - 2)) * 1024L * 1024L;
							}
							else if (text2.ToUpper().EndsWith(c0000c0.m00000f("Ö")))
							{
								size = delegate0140.f000180(text2.Substring(0, text2.Length - 1)) * 1024L * 1024L * 1024L;
							}
							else if (text2.ToUpper().EndsWith(c0000c0.m00000f("ÖC")))
							{
								size = delegate0140.f000180(text2.Substring(0, text2.Length - 2)) * 1024L * 1024L * 1024L;
							}
							else
							{
								size = long.Parse(array2[j + 2]);
							}
							selectionCriterion = new SizeCriterion
							{
								Size = size,
								f000048 = (ComparisonOperator)EnumUtil.Parse(delegate013e.f00017c(typeof(ComparisonOperator).TypeHandle), array2[j + 1])
							};
							j += 2;
							stack.Push(FileSelector.ParseState.CriterionDone);
							break;
						}
						case 10:
						case 11:
						{
							if (array2.Length <= j + 2)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							ComparisonOperator comparisonOperator = (ComparisonOperator)EnumUtil.Parse(typeof(ComparisonOperator), array2[j + 1]);
							if (comparisonOperator != ComparisonOperator.NotEqualTo && comparisonOperator != ComparisonOperator.EqualTo)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							string text3 = array2[j + 2];
							if (text3.StartsWith(c0000c0.m00000f("¶")))
							{
								int num2 = j;
								if (!text3.EndsWith(c0000c0.m00000f("¶")))
								{
									for (;;)
									{
										j++;
										if (array2.Length <= j + 2)
										{
											break;
										}
										text3 = text3 + c0000c0.m00000f("±") + array2[j + 2];
										if (delegate0141.f000181(array2[j + 2], c0000c0.m00000f("¶")))
										{
											goto IL_A37;
										}
									}
									throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, num2, array2.Length - num2));
								}
								IL_A37:
								text3 = text3.Substring(1, text3.Length - 2);
							}
							selectionCriterion = new NameCriterion
							{
								MatchingFileSpec = text3,
								f000048 = comparisonOperator
							};
							j += 2;
							stack.Push(FileSelector.ParseState.CriterionDone);
							break;
						}
						case 12:
						case 13:
						case 14:
						{
							if (array2.Length <= j + 2)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							ComparisonOperator comparisonOperator2 = (ComparisonOperator)EnumUtil.Parse(typeof(ComparisonOperator), array2[j + 1]);
							if (comparisonOperator2 != ComparisonOperator.NotEqualTo && comparisonOperator2 != ComparisonOperator.EqualTo)
							{
								throw new ArgumentException(delegate013c.f00017a(c0000c0.m00000f("±"), array2, j, array2.Length - j));
							}
							selectionCriterion = ((text == c0000c0.m00000f("åx=\u0001")) ? new TypeCriterion
							{
								AttributeString = array2[j + 2],
								f000048 = comparisonOperator2
							} : new AttributesCriterion
							{
								AttributeString = array2[j + 2],
								f000048 = comparisonOperator2
							});
							j += 2;
							stack.Push(FileSelector.ParseState.CriterionDone);
							break;
						}
						case 15:
							stack.Push(FileSelector.ParseState.Whitespace);
							break;
						default:
							goto IL_B81;
						}
						parseState = stack.Peek();
						if (parseState == FileSelector.ParseState.CriterionDone)
						{
							stack.Pop();
							if (stack.Peek() == FileSelector.ParseState.ConjunctionPending)
							{
								while (stack.Peek() == FileSelector.ParseState.ConjunctionPending)
								{
									CompoundCriterion compoundCriterion = stack2.Pop() as CompoundCriterion;
									compoundCriterion.Right = selectionCriterion;
									selectionCriterion = compoundCriterion;
									stack.Pop();
									parseState = stack.Pop();
									if (parseState != FileSelector.ParseState.CriterionDone)
									{
										throw new ArgumentException(c0000c0.m00000f("®>"));
									}
								}
							}
							else
							{
								stack.Push(FileSelector.ParseState.CriterionDone);
							}
						}
						if (parseState == FileSelector.ParseState.Whitespace)
						{
							stack.Pop();
						}
						j++;
						continue;
					}
				}
				IL_B81:
				throw new ArgumentException(c0000c0.m00000f("¶") + array2[j] + c0000c0.m00000f("¶"));
			}
			return selectionCriterion;
		}

		// Token: 0x06000303 RID: 771 RVA: 0x00012FB8 File Offset: 0x000111B8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			return delegate0ff.f000123(c0000c0.m00000f("×h!\u0001õ\f_RÏ\u0006!^ "), this._Criterion.ToString(), c0000c0.m00000f("¸"));
		}

		// Token: 0x06000304 RID: 772 RVA: 0x00012FF0 File Offset: 0x000111F0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool Evaluate(string filename)
		{
			return this._Criterion.Evaluate(filename);
		}

		// Token: 0x06000305 RID: 773 RVA: 0x0001300C File Offset: 0x0001120C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ICollection<string> SelectFiles(string directory)
		{
			return this.SelectFiles(directory, false);
		}

		// Token: 0x06000306 RID: 774 RVA: 0x00013024 File Offset: 0x00011224
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ReadOnlyCollection<string> SelectFiles(string directory, bool recurseDirectories)
		{
			if (this._Criterion == null)
			{
				throw new ArgumentException(c0000c0.m00000f("Âd!\u0001Å\u001dZXÂ1<E|ò?\u000e÷¢\u0006\a^ätÂ'\u009e\u0015»rÖÃÅxC"));
			}
			List<string> list = new List<string>();
			if (delegate0d2.f0000c2(directory))
			{
				string[] array = delegate0142.f000182(directory);
				foreach (string text in array)
				{
					if (this.Evaluate(text))
					{
						list.Add(text);
					}
				}
				if (recurseDirectories)
				{
					string[] array3 = delegate0142.f000183(directory);
					foreach (string text2 in array3)
					{
						if (this.TraverseReparsePoints || (delegate013a.f000178(text2) & FileAttributes.ReparsePoint) == (FileAttributes)0)
						{
							list.AddRange(this.SelectFiles(text2, recurseDirectories));
						}
					}
				}
			}
			return list.AsReadOnly();
		}

		// Token: 0x06000307 RID: 775 RVA: 0x00013118 File Offset: 0x00011318
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool Evaluate(ZipEntry entry)
		{
			return this._Criterion.Evaluate(entry);
		}

		// Token: 0x06000308 RID: 776 RVA: 0x00013134 File Offset: 0x00011334
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ICollection<ZipEntry> SelectEntries(ZipFile zip)
		{
			List<ZipEntry> list = new List<ZipEntry>();
			foreach (ZipEntry zipEntry in zip)
			{
				if (this.Evaluate(zipEntry))
				{
					list.Add(zipEntry);
				}
			}
			return list;
		}

		// Token: 0x06000309 RID: 777 RVA: 0x00013174 File Offset: 0x00011374
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ICollection<ZipEntry> SelectEntries(ZipFile zip, string directoryPathInArchive)
		{
			List<ZipEntry> list = new List<ZipEntry>();
			string text = (directoryPathInArchive == null) ? null : directoryPathInArchive.Replace(c0000c0.m00000f("¾"), c0000c0.m00000f("Í"));
			if (text != null)
			{
				while (text.EndsWith(c0000c0.m00000f("Í")))
				{
					text = text.Substring(0, text.Length - 1);
				}
			}
			foreach (ZipEntry zipEntry in zip)
			{
				if ((directoryPathInArchive == null || delegate0db.f0000d9(delegate0e4.f0000ed(zipEntry.FileName), directoryPathInArchive) || delegate0db.f0000d9(delegate0e4.f0000ed(zipEntry.FileName), text)) && this.Evaluate(zipEntry))
				{
					list.Add(zipEntry);
				}
			}
			return list;
		}

		// Token: 0x0600030A RID: 778 RVA: 0x00013238 File Offset: 0x00011438
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static FileSelector()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000123 RID: 291
		internal SelectionCriterion _Criterion;

		// Token: 0x04000124 RID: 292
		[CompilerGenerated]
		private bool f000049;

		// Token: 0x02000066 RID: 102
		private enum ParseState
		{
			// Token: 0x04000126 RID: 294
			Start,
			// Token: 0x04000127 RID: 295
			OpenParen,
			// Token: 0x04000128 RID: 296
			CriterionDone,
			// Token: 0x04000129 RID: 297
			ConjunctionPending,
			// Token: 0x0400012A RID: 298
			Whitespace
		}
	}
}
