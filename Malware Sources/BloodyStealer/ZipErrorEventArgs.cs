using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zip
{
	// Token: 0x02000081 RID: 129
	public class ZipErrorEventArgs : ZipProgressEventArgs
	{
		// Token: 0x060003D9 RID: 985 RVA: 0x000164F4 File Offset: 0x000146F4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ZipErrorEventArgs()
		{
		}

		// Token: 0x060003DA RID: 986 RVA: 0x000164FC File Offset: 0x000146FC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ZipErrorEventArgs Saving(string archiveName, ZipEntry entry, Exception exception)
		{
			ZipErrorEventArgs zipErrorEventArgs;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipErrorEventArgs.EventType = ZipProgressEventType.Error_Saving;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_93;
					case 2:
						zipErrorEventArgs.ArchiveName = archiveName;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						zipErrorEventArgs = new ZipErrorEventArgs();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_93:
			zipErrorEventArgs.CurrentEntry = entry;
			zipErrorEventArgs._exc = exception;
			return zipErrorEventArgs;
		}

		// Token: 0x170000B4 RID: 180
		// (get) Token: 0x060003DB RID: 987 RVA: 0x000165B0 File Offset: 0x000147B0
		public Exception Exception
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._exc;
			}
		}

		// Token: 0x170000B5 RID: 181
		// (get) Token: 0x060003DC RID: 988 RVA: 0x000165C4 File Offset: 0x000147C4
		public string FileName
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return base.CurrentEntry.LocalFileName;
			}
		}

		// Token: 0x060003DD RID: 989 RVA: 0x000165DC File Offset: 0x000147DC
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static ZipErrorEventArgs()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000187 RID: 391
		private Exception _exc;
	}
}
