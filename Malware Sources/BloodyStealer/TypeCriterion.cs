using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x02000062 RID: 98
	internal class TypeCriterion : SelectionCriterion
	{
		// Token: 0x17000089 RID: 137
		// (get) Token: 0x060002E5 RID: 741 RVA: 0x000114DC File Offset: 0x0000F6DC
		// (set) Token: 0x060002E6 RID: 742 RVA: 0x000114F4 File Offset: 0x0000F6F4
		internal string AttributeString
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.ObjectType.ToString();
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (value[0] != 'D')
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_BA;
						case 1:
							goto IL_AA;
						case 2:
							if (value[0] != 'F')
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_BA;
						case 3:
							if (value.Length == 1)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_AA;
						}
						break;
					}
				}
				IL_AA:
				throw new ArgumentException(c0000c0.m00000f("Âq(\aÏ\u000fJ\u0017ÍR=Efð!\u0002¶á\u0006\a_¥yÙ6ÌMþrÑ\u0097ÞxEj(¸âRÐx"));
				IL_BA:
				this.ObjectType = value[0];
			}
		}

		// Token: 0x060002E7 RID: 743 RVA: 0x000115C8 File Offset: 0x0000F7C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			StringBuilder p = new StringBuilder();
			delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(p, c0000c0.m00000f("åx=\u0001\u0086")), EnumUtil.GetDescription(this.f000048)), c0000c0.m00000f("±")), this.AttributeString);
			return delegate0cd.f0000ab(p);
		}

		// Token: 0x060002E8 RID: 744 RVA: 0x0001163C File Offset: 0x0000F83C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(string filename)
		{
			bool flag2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
						if (this.ObjectType != 'D')
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						flag = delegate0d2.f0000c2(filename);
						goto IL_4C;
					case 1:
						goto IL_C0;
					case 2:
						flag = File.Exists(filename);
						goto IL_4C;
					case 3:
						base.CriterionTrace(c0000c0.m00000f("Åx=\u0001å\u001bZCÉ\0'Cf­w\"àã\u0002\u0013L°\u007f\u0085(\u008e\n÷"), new object[]
						{
							filename
						});
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_4C:
					flag2 = flag;
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_C0:
			if (this.f000048 != ComparisonOperator.EqualTo)
			{
				flag2 = !flag2;
			}
			return flag2;
		}

		// Token: 0x060002E9 RID: 745 RVA: 0x00011720 File Offset: 0x0000F920
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(ZipEntry entry)
		{
			bool flag2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					bool flag;
					switch (num)
					{
					case 0:
						flag = !entry.IsDirectory;
						goto IL_97;
					case 1:
						goto IL_B0;
					case 2:
						if (this.f000048 != ComparisonOperator.EqualTo)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						return flag2;
					case 3:
						if (this.ObjectType != 'D')
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						flag = entry.IsDirectory;
						goto IL_97;
					}
					break;
					IL_97:
					flag2 = flag;
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_B0:
			flag2 = !flag2;
			return flag2;
		}

		// Token: 0x060002EA RID: 746 RVA: 0x000117E4 File Offset: 0x0000F9E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public TypeCriterion()
		{
		}

		// Token: 0x060002EB RID: 747 RVA: 0x000117EC File Offset: 0x0000F9EC
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static TypeCriterion()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x0400011C RID: 284
		private char ObjectType;

		// Token: 0x0400011D RID: 285
		internal ComparisonOperator f000048;
	}
}
