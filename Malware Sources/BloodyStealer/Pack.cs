using System;
using System.Runtime.CompilerServices;

namespace Application.Grabber.Browsers
{
	// Token: 0x02000023 RID: 35
	internal sealed class Pack
	{
		// Token: 0x060000FA RID: 250 RVA: 0x000078F4 File Offset: 0x00005AF4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private Pack()
		{
		}

		// Token: 0x060000FB RID: 251 RVA: 0x000078FC File Offset: 0x00005AFC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt32_To_BE(uint p0, byte[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						p1[1] = (byte)(p0 >> 16);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_95;
					case 2:
						p1[2] = (byte)(p0 >> 8);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						p1[0] = (byte)(p0 >> 24);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_95:
			p1[3] = (byte)p0;
		}

		// Token: 0x060000FC RID: 252 RVA: 0x000079A4 File Offset: 0x00005BA4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt32_To_BE(uint p0, byte[] p1, int off)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						p1[++off] = (byte)(p0 >> 16);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_9F;
					case 2:
						p1[++off] = (byte)(p0 >> 8);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						p1[off] = (byte)(p0 >> 24);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_9F:
			p1[++off] = (byte)p0;
		}

		// Token: 0x060000FD RID: 253 RVA: 0x00007A5C File Offset: 0x00005C5C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static uint BE_To_UInt32(byte[] p0)
		{
			return (uint)((int)p0[0] << 24 | (int)p0[1] << 16 | (int)p0[2] << 8 | (int)p0[3]);
		}

		// Token: 0x060000FE RID: 254 RVA: 0x00007A80 File Offset: 0x00005C80
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static uint BE_To_UInt32(byte[] p0, int off)
		{
			return (uint)((int)p0[off] << 24 | (int)p0[++off] << 16 | (int)p0[++off] << 8 | (int)p0[++off]);
		}

		// Token: 0x060000FF RID: 255 RVA: 0x00007AB4 File Offset: 0x00005CB4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ulong BE_To_UInt64(byte[] p0)
		{
			ulong num = (ulong)Pack.BE_To_UInt32(p0);
			uint num2 = Pack.BE_To_UInt32(p0, 4);
			return num << 32 | (ulong)num2;
		}

		// Token: 0x06000100 RID: 256 RVA: 0x00007AD8 File Offset: 0x00005CD8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ulong BE_To_UInt64(byte[] p0, int off)
		{
			ulong num = (ulong)Pack.BE_To_UInt32(p0, off);
			uint num2 = Pack.BE_To_UInt32(p0, off + 4);
			return num << 32 | (ulong)num2;
		}

		// Token: 0x06000101 RID: 257 RVA: 0x00007B00 File Offset: 0x00005D00
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt64_To_BE(ulong p0, byte[] p1)
		{
			Pack.UInt32_To_BE((uint)(p0 >> 32), p1);
			Pack.UInt32_To_BE((uint)p0, p1, 4);
		}

		// Token: 0x06000102 RID: 258 RVA: 0x00007B24 File Offset: 0x00005D24
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt64_To_BE(ulong p0, byte[] p1, int off)
		{
			Pack.UInt32_To_BE((uint)(p0 >> 32), p1, off);
			Pack.UInt32_To_BE((uint)p0, p1, off + 4);
		}

		// Token: 0x06000103 RID: 259 RVA: 0x00007B48 File Offset: 0x00005D48
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt32_To_LE(uint p0, byte[] p1)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						p1[1] = (byte)(p0 >> 8);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_92;
					case 2:
						p1[2] = (byte)(p0 >> 16);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						p1[0] = (byte)p0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_92:
			p1[3] = (byte)(p0 >> 24);
		}

		// Token: 0x06000104 RID: 260 RVA: 0x00007BF0 File Offset: 0x00005DF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt32_To_LE(uint p0, byte[] p1, int off)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						p1[++off] = (byte)(p0 >> 8);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_9C;
					case 2:
						p1[++off] = (byte)(p0 >> 16);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						p1[off] = (byte)p0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_9C:
			p1[++off] = (byte)(p0 >> 24);
		}

		// Token: 0x06000105 RID: 261 RVA: 0x00007CA8 File Offset: 0x00005EA8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static uint LE_To_UInt32(byte[] p0)
		{
			return (uint)((int)p0[0] | (int)p0[1] << 8 | (int)p0[2] << 16 | (int)p0[3] << 24);
		}

		// Token: 0x06000106 RID: 262 RVA: 0x00007CCC File Offset: 0x00005ECC
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static uint LE_To_UInt32(byte[] p0, int off)
		{
			return (uint)((int)p0[off] | (int)p0[++off] << 8 | (int)p0[++off] << 16 | (int)p0[++off] << 24);
		}

		// Token: 0x06000107 RID: 263 RVA: 0x00007D00 File Offset: 0x00005F00
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ulong LE_To_UInt64(byte[] p0)
		{
			uint num = Pack.LE_To_UInt32(p0);
			return (ulong)Pack.LE_To_UInt32(p0, 4) << 32 | (ulong)num;
		}

		// Token: 0x06000108 RID: 264 RVA: 0x00007D24 File Offset: 0x00005F24
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static ulong LE_To_UInt64(byte[] p0, int off)
		{
			uint num = Pack.LE_To_UInt32(p0, off);
			return (ulong)Pack.LE_To_UInt32(p0, off + 4) << 32 | (ulong)num;
		}

		// Token: 0x06000109 RID: 265 RVA: 0x00007D4C File Offset: 0x00005F4C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt64_To_LE(ulong p0, byte[] p1)
		{
			Pack.UInt32_To_LE((uint)p0, p1);
			Pack.UInt32_To_LE((uint)(p0 >> 32), p1, 4);
		}

		// Token: 0x0600010A RID: 266 RVA: 0x00007D70 File Offset: 0x00005F70
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static void UInt64_To_LE(ulong p0, byte[] p1, int off)
		{
			Pack.UInt32_To_LE((uint)p0, p1, off);
			Pack.UInt32_To_LE((uint)(p0 >> 32), p1, off + 4);
		}

		// Token: 0x0600010B RID: 267 RVA: 0x00007D94 File Offset: 0x00005F94
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static Pack()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}
	}
}
