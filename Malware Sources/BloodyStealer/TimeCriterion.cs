using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Ionic.Zip;

namespace Ionic
{
	// Token: 0x02000060 RID: 96
	internal class TimeCriterion : SelectionCriterion
	{
		// Token: 0x060002D8 RID: 728 RVA: 0x00010E58 File Offset: 0x0000F058
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			StringBuilder p = new StringBuilder();
			delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(p, this.Which.ToString()), c0000c0.m00000f("±")), EnumUtil.GetDescription(this.f000048)), c0000c0.m00000f("±")), this.Time.ToString(c0000c0.m00000f("èx4\u001d\u008b$~\u001aÈ\u0016cd@­ \n¬ñ\u001d")));
			return delegate0cd.f0000ab(p);
		}

		// Token: 0x060002D9 RID: 729 RVA: 0x00010EF4 File Offset: 0x0000F0F4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(string filename)
		{
			DateTime p;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_8B;
					case 1:
						goto IL_BB;
					case 2:
						goto IL_36;
					case 3:
						switch (this.Which)
						{
						case WhichTime.atime:
							p = File.GetLastAccessTimeUtc(filename);
							num = delegate0da.f0000d7(-2);
							continue;
						case WhichTime.mtime:
							p = File.GetLastWriteTimeUtc(filename);
							num = delegate0da.f0000d7(-1);
							continue;
						case WhichTime.ctime:
							goto IL_C0;
						default:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
					break;
				}
			}
			IL_36:
			goto IL_C7;
			IL_8B:
			throw new ArgumentException(c0000c0.m00000f("Þq(\u0016Ç\u001d\\E"));
			IL_BB:
			goto IL_C7;
			IL_C0:
			p = File.GetCreationTimeUtc(filename);
			IL_C7:
			return this._Evaluate(p);
		}

		// Token: 0x060002DA RID: 730 RVA: 0x00010FD0 File Offset: 0x0000F1D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool _Evaluate(DateTime p0)
		{
			for (;;)
			{
				switch (delegate0da.f0000d7(-3))
				{
				case 0:
					goto IL_96;
				case 1:
					goto IL_BA;
				case 2:
					goto IL_36;
				case 3:
					goto IL_5F;
				}
			}
			IL_36:
			return p0 <= this.Time;
			IL_5F:
			bool result;
			switch (this.f000048)
			{
			case ComparisonOperator.GreaterThan:
				result = (p0 > this.Time);
				break;
			case ComparisonOperator.GreaterThanOrEqualTo:
				IL_96:
				result = (p0 >= this.Time);
				break;
			case ComparisonOperator.LesserThan:
				result = delegate0139.f000176(p0, this.Time);
				break;
			case ComparisonOperator.LesserThanOrEqualTo:
				goto IL_36;
			case ComparisonOperator.EqualTo:
				IL_BA:
				result = (p0 == this.Time);
				break;
			case ComparisonOperator.NotEqualTo:
				result = (p0 != this.Time);
				break;
			default:
				throw new ArgumentException(c0000c0.m00000f("Þq(\u0016Ç\u001d\\E"));
			}
			return result;
		}

		// Token: 0x060002DB RID: 731 RVA: 0x000110B8 File Offset: 0x0000F2B8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal override bool Evaluate(ZipEntry entry)
		{
			DateTime p;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_8B;
					case 1:
						goto IL_BB;
					case 2:
						goto IL_36;
					case 3:
						switch (this.Which)
						{
						case WhichTime.atime:
							p = entry.AccessedTime;
							num = delegate0da.f0000d7(-2);
							continue;
						case WhichTime.mtime:
							p = entry.ModifiedTime;
							num = delegate0da.f0000d7(-1);
							continue;
						case WhichTime.ctime:
							goto IL_C0;
						default:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
					break;
				}
			}
			IL_36:
			goto IL_C7;
			IL_8B:
			throw new ArgumentException(c0000c0.m00000f("®>9\rË\f"));
			IL_BB:
			goto IL_C7;
			IL_C0:
			p = entry.CreationTime;
			IL_C7:
			return this._Evaluate(p);
		}

		// Token: 0x060002DC RID: 732 RVA: 0x00011194 File Offset: 0x0000F394
		[MethodImpl(MethodImplOptions.NoInlining)]
		public TimeCriterion()
		{
		}

		// Token: 0x060002DD RID: 733 RVA: 0x0001119C File Offset: 0x0000F39C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static TimeCriterion()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000115 RID: 277
		internal ComparisonOperator f000048;

		// Token: 0x04000116 RID: 278
		internal WhichTime Which;

		// Token: 0x04000117 RID: 279
		internal DateTime Time;
	}
}
