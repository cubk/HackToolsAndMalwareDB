using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using Ionic.Zlib;
using Microsoft.CSharp;

namespace Ionic.Zip
{
	// Token: 0x02000085 RID: 133
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	[ComVisible(true)]
	[Guid("ebc25cf6-9120-4283-b972-0e5520d00005")]
	public class ZipFile : IEnumerable<ZipEntry>, IEnumerable, IDisposable
	{
		// Token: 0x0600047C RID: 1148 RVA: 0x0001E478 File Offset: 0x0001C678
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddItem(string fileOrDirectoryName)
		{
			return this.AddItem(fileOrDirectoryName, null);
		}

		// Token: 0x0600047D RID: 1149 RVA: 0x0001E490 File Offset: 0x0001C690
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddItem(string fileOrDirectoryName, string directoryPathInArchive)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_7C;
					case 1:
						goto IL_85;
					case 2:
						goto IL_36;
					case 3:
						if (File.Exists(fileOrDirectoryName))
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					if (!Directory.Exists(fileOrDirectoryName))
					{
						goto IL_8E;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_7C:
			return this.AddFile(fileOrDirectoryName, directoryPathInArchive);
			IL_85:
			return this.AddDirectory(fileOrDirectoryName, directoryPathInArchive);
			IL_8E:
			throw new FileNotFoundException(string.Format(c0000c0.m00000f("Åi,\u0010\u0086\u000fZ[ÉR!^(ó$\u0015óá\u001a\t_½:\u0085(\u008e\n÷7Ü\u008cÓn\u0017$\u0003ì­E\u0088W\u001e¼´"), fileOrDirectoryName));
		}

		// Token: 0x0600047E RID: 1150 RVA: 0x0001E540 File Offset: 0x0001C740
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddFile(string fileName)
		{
			return this.AddFile(fileName, null);
		}

		// Token: 0x0600047F RID: 1151 RVA: 0x0001E558 File Offset: 0x0001C758
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddFile(string fileName, string directoryPathInArchive)
		{
			ZipEntry p;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						string nameInArchive;
						p = ZipEntry.CreateFromFile(fileName, nameInArchive);
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_99;
					case 2:
						if (this.Verbose)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_AF;
					case 3:
					{
						string nameInArchive = ZipEntry.NameInArchive(fileName, directoryPathInArchive);
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_99:
			this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ðe)\rÈ\u000e\u0013L\u009c\u000f`\u0002&"), fileName);
			IL_AF:
			return this._InternalAddEntry(p);
		}

		// Token: 0x06000480 RID: 1152 RVA: 0x0001E61C File Offset: 0x0001C81C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void RemoveEntries(ICollection<ZipEntry> entriesToRemove)
		{
			foreach (ZipEntry entry in entriesToRemove)
			{
				this.RemoveEntry(entry);
			}
		}

		// Token: 0x06000481 RID: 1153 RVA: 0x0001E64C File Offset: 0x0001C84C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void RemoveEntries(ICollection<string> entriesToRemove)
		{
			foreach (string fileName in entriesToRemove)
			{
				this.RemoveEntry(fileName);
			}
		}

		// Token: 0x06000482 RID: 1154 RVA: 0x0001E67C File Offset: 0x0001C87C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddFiles(IEnumerable<string> fileNames)
		{
			this.AddFiles(fileNames, null);
		}

		// Token: 0x06000483 RID: 1155 RVA: 0x0001E694 File Offset: 0x0001C894
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void UpdateFiles(IEnumerable<string> fileNames)
		{
			this.UpdateFiles(fileNames, null);
		}

		// Token: 0x06000484 RID: 1156 RVA: 0x0001E6AC File Offset: 0x0001C8AC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddFiles(IEnumerable<string> fileNames, string directoryPathInArchive)
		{
			this.AddFiles(fileNames, false, directoryPathInArchive);
		}

		// Token: 0x06000485 RID: 1157 RVA: 0x0001E6C4 File Offset: 0x0001C8C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddFiles(IEnumerable<string> fileNames, bool preserveDirHierarchy, string directoryPathInArchive)
		{
			this.OnAddStarted();
			if (preserveDirHierarchy)
			{
				foreach (string text in fileNames)
				{
					if (directoryPathInArchive != null)
					{
						string directoryPathInArchive2 = delegate0e4.f0000f1(delegate0d0.f0000bb(directoryPathInArchive, delegate0e4.f0000ed(text)));
						this.AddFile(text, directoryPathInArchive2);
					}
					else
					{
						this.AddFile(text, null);
					}
				}
			}
			else
			{
				foreach (string fileName in fileNames)
				{
					this.AddFile(fileName, directoryPathInArchive);
				}
			}
			this.OnAddCompleted();
		}

		// Token: 0x06000486 RID: 1158 RVA: 0x0001E758 File Offset: 0x0001C958
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void UpdateFiles(IEnumerable<string> fileNames, string directoryPathInArchive)
		{
			this.OnAddStarted();
			foreach (string fileName in fileNames)
			{
				this.UpdateFile(fileName, directoryPathInArchive);
			}
			this.OnAddCompleted();
		}

		// Token: 0x06000487 RID: 1159 RVA: 0x0001E794 File Offset: 0x0001C994
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateFile(string fileName)
		{
			return this.UpdateFile(fileName, null);
		}

		// Token: 0x06000488 RID: 1160 RVA: 0x0001E7AC File Offset: 0x0001C9AC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateFile(string fileName, string directoryPathInArchive)
		{
			string fileName2 = ZipEntry.NameInArchive(fileName, directoryPathInArchive);
			if (this[fileName2] != null)
			{
				this.RemoveEntry(fileName2);
			}
			return this.AddFile(fileName, directoryPathInArchive);
		}

		// Token: 0x06000489 RID: 1161 RVA: 0x0001E7DC File Offset: 0x0001C9DC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateDirectory(string directoryName)
		{
			return this.UpdateDirectory(directoryName, null);
		}

		// Token: 0x0600048A RID: 1162 RVA: 0x0001E7F4 File Offset: 0x0001C9F4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateDirectory(string directoryName, string directoryPathInArchive)
		{
			return this.AddOrUpdateDirectoryImpl(directoryName, directoryPathInArchive, AddOrUpdateAction.AddOrUpdate);
		}

		// Token: 0x0600048B RID: 1163 RVA: 0x0001E80C File Offset: 0x0001CA0C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void UpdateItem(string itemName)
		{
			this.UpdateItem(itemName, null);
		}

		// Token: 0x0600048C RID: 1164 RVA: 0x0001E824 File Offset: 0x0001CA24
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void UpdateItem(string itemName, string directoryPathInArchive)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.UpdateFile(itemName, directoryPathInArchive);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_7B;
					case 2:
						return;
					case 3:
						if (File.Exists(itemName))
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_7B;
					}
					break;
				}
			}
			return;
			IL_7B:
			if (Directory.Exists(itemName))
			{
				this.UpdateDirectory(itemName, directoryPathInArchive);
				return;
			}
			throw new FileNotFoundException(string.Format(c0000c0.m00000f("Åi,\u0010\u0086\u000fZ[ÉR!^(ó$\u0015óá\u001a\t_½:\u0085(\u008e\n÷7Ü\u008cÓn\u0017$\u0003ì­E\u0088W\u001e¼´"), itemName));
		}

		// Token: 0x0600048D RID: 1165 RVA: 0x0001E8D8 File Offset: 0x0001CAD8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddEntry(string entryName, string content)
		{
			return this.AddEntry(entryName, content, delegate0d6.f0000cf());
		}

		// Token: 0x0600048E RID: 1166 RVA: 0x0001E8F8 File Offset: 0x0001CAF8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddEntry(string entryName, string content, Encoding encoding)
		{
			MemoryStream memoryStream;
			StreamWriter streamWriter;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						streamWriter = new StreamWriter(memoryStream, encoding);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_93;
					case 2:
						streamWriter.Write(content);
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						memoryStream = new MemoryStream();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_93:
			streamWriter.Flush();
			delegate0149.f00018c(memoryStream, 0L, SeekOrigin.Begin);
			return this.AddEntry(entryName, memoryStream);
		}

		// Token: 0x0600048F RID: 1167 RVA: 0x0001E9B8 File Offset: 0x0001CBB8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddEntry(string entryName, Stream stream)
		{
			ZipEntry zipEntry;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipEntry.SetEntryTimes(delegate0cf.f0000b8(), delegate0cf.f0000b8(), delegate0cf.f0000b8());
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B5;
					case 2:
						if (this.Verbose)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_CB;
					case 3:
						zipEntry = ZipEntry.CreateForStream(entryName, stream);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_B5:
			this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ðe)\rÈ\u000e\u0013L\u009c\u000f`\u0002&"), entryName);
			IL_CB:
			return this._InternalAddEntry(zipEntry);
		}

		// Token: 0x06000490 RID: 1168 RVA: 0x0001EA98 File Offset: 0x0001CC98
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddEntry(string entryName, WriteDelegate writer)
		{
			ZipEntry p = ZipEntry.CreateForWriter(entryName, writer);
			if (this.Verbose)
			{
				this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ðe)\rÈ\u000e\u0013L\u009c\u000f`\u0002&"), entryName);
			}
			return this._InternalAddEntry(p);
		}

		// Token: 0x06000491 RID: 1169 RVA: 0x0001EAD4 File Offset: 0x0001CCD4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddEntry(string entryName, OpenDelegate opener, CloseDelegate closer)
		{
			ZipEntry zipEntry;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipEntry.SetEntryTimes(delegate0cf.f0000b8(), delegate0cf.f0000b8(), delegate0cf.f0000b8());
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B6;
					case 2:
						if (this.Verbose)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_CC;
					case 3:
						zipEntry = ZipEntry.CreateForJitStreamProvider(entryName, opener, closer);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_B6:
			this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ðe)\rÈ\u000e\u0013L\u009c\u000f`\u0002&"), entryName);
			IL_CC:
			return this._InternalAddEntry(zipEntry);
		}

		// Token: 0x06000492 RID: 1170 RVA: 0x0001EBB4 File Offset: 0x0001CDB4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ZipEntry _InternalAddEntry(ZipEntry p0)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						p0.ZipErrorAction = this.ZipErrorAction;
						p0.SetCompression = this.SetCompression;
						p0.ProvisionalAlternateEncoding = this.ProvisionalAlternateEncoding;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_EA;
					case 2:
						p0.Password = this._Password;
						p0.Encryption = this.Encryption;
						p0.EmitTimesInWindowsFormatWhenSaving = this._emitNtfsTimes;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						p0._container = new ZipContainer(this);
						p0.CompressionLevel = this.CompressionLevel;
						p0.ExtractExistingFile = this.ExtractExistingFile;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_EA:
			p0.EmitTimesInUnixFormatWhenSaving = this._emitUnixTimes;
			this.InternalAddEntry(p0.FileName, p0);
			this.AfterAddEntry(p0);
			return p0;
		}

		// Token: 0x06000493 RID: 1171 RVA: 0x0001ECCC File Offset: 0x0001CECC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateEntry(string entryName, string content)
		{
			return this.UpdateEntry(entryName, content, delegate0d6.f0000cf());
		}

		// Token: 0x06000494 RID: 1172 RVA: 0x0001ECEC File Offset: 0x0001CEEC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateEntry(string entryName, string content, Encoding encoding)
		{
			string fileName;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					string directoryPathInArchive;
					switch (num)
					{
					case 0:
						directoryPathInArchive = Path.GetDirectoryName(entryName);
						entryName = delegate0e4.f0000f0(entryName);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B8;
					case 2:
						goto IL_36;
					case 3:
						directoryPathInArchive = null;
						if (entryName.IndexOf('\\') != -1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					fileName = ZipEntry.NameInArchive(entryName, directoryPathInArchive);
					if (this[fileName] == null)
					{
						goto IL_BF;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_B8:
			this.RemoveEntry(fileName);
			IL_BF:
			return this.AddEntry(entryName, content, encoding);
		}

		// Token: 0x06000495 RID: 1173 RVA: 0x0001EDC4 File Offset: 0x0001CFC4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateEntry(string entryName, Stream stream)
		{
			string fileName;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					string directoryPathInArchive;
					switch (num)
					{
					case 0:
						directoryPathInArchive = Path.GetDirectoryName(entryName);
						entryName = delegate0e4.f0000f0(entryName);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B8;
					case 2:
						goto IL_36;
					case 3:
						directoryPathInArchive = null;
						if (entryName.IndexOf('\\') != -1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					fileName = ZipEntry.NameInArchive(entryName, directoryPathInArchive);
					if (this[fileName] == null)
					{
						goto IL_BF;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_B8:
			this.RemoveEntry(fileName);
			IL_BF:
			return this.AddEntry(entryName, stream);
		}

		// Token: 0x06000496 RID: 1174 RVA: 0x0001EE98 File Offset: 0x0001D098
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddEntry(string entryName, byte[] byteContent)
		{
			if (byteContent == null)
			{
				throw new ArgumentException(c0000c0.m00000f("ó`)DÇ\u001bTBÁ\u0017 X"), c0000c0.m00000f("óx9\u0001å\u0006]CÉ\u001c:"));
			}
			MemoryStream stream = new MemoryStream(byteContent);
			return this.AddEntry(entryName, stream);
		}

		// Token: 0x06000497 RID: 1175 RVA: 0x0001EED4 File Offset: 0x0001D0D4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry UpdateEntry(string entryName, byte[] byteContent)
		{
			string fileName;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					string directoryPathInArchive;
					switch (num)
					{
					case 0:
						directoryPathInArchive = Path.GetDirectoryName(entryName);
						entryName = delegate0e4.f0000f0(entryName);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B8;
					case 2:
						goto IL_36;
					case 3:
						directoryPathInArchive = null;
						if (entryName.IndexOf('\\') != -1)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_36;
					}
					break;
					IL_36:
					fileName = ZipEntry.NameInArchive(entryName, directoryPathInArchive);
					if (this[fileName] == null)
					{
						goto IL_BF;
					}
					num = delegate0da.f0000d7(-1);
				}
			}
			IL_B8:
			this.RemoveEntry(fileName);
			IL_BF:
			return this.AddEntry(entryName, byteContent);
		}

		// Token: 0x06000498 RID: 1176 RVA: 0x0001EFA8 File Offset: 0x0001D1A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddDirectory(string directoryName)
		{
			return this.AddDirectory(directoryName, null);
		}

		// Token: 0x06000499 RID: 1177 RVA: 0x0001EFC0 File Offset: 0x0001D1C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddDirectory(string directoryName, string directoryPathInArchive)
		{
			return this.AddOrUpdateDirectoryImpl(directoryName, directoryPathInArchive, AddOrUpdateAction.AddOnly);
		}

		// Token: 0x0600049A RID: 1178 RVA: 0x0001EFD8 File Offset: 0x0001D1D8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipEntry AddDirectoryByName(string directoryNameInArchive)
		{
			ZipEntry zipEntry;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipEntry.MarkAsDirectory();
						zipEntry.ProvisionalAlternateEncoding = this.ProvisionalAlternateEncoding;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_D3;
					case 2:
						zipEntry.SetEntryTimes(delegate0cf.f0000b8(), delegate0cf.f0000b8(), delegate0cf.f0000b8());
						zipEntry.EmitTimesInWindowsFormatWhenSaving = this._emitNtfsTimes;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						zipEntry = ZipEntry.CreateFromNothing(directoryNameInArchive);
						zipEntry._container = new ZipContainer(this);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_D3:
			zipEntry.EmitTimesInUnixFormatWhenSaving = this._emitUnixTimes;
			zipEntry._Source = ZipEntrySource.Stream;
			this.InternalAddEntry(zipEntry.FileName, zipEntry);
			this.AfterAddEntry(zipEntry);
			return zipEntry;
		}

		// Token: 0x0600049B RID: 1179 RVA: 0x0001F0E0 File Offset: 0x0001D2E0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ZipEntry AddOrUpdateDirectoryImpl(string directoryName, string rootDirectoryPathInArchive, AddOrUpdateAction action)
		{
			if (rootDirectoryPathInArchive == null)
			{
				rootDirectoryPathInArchive = c0000c0.m00000f("");
			}
			return this.AddOrUpdateDirectoryImpl(directoryName, rootDirectoryPathInArchive, action, true, 0);
		}

		// Token: 0x0600049C RID: 1180 RVA: 0x0001F108 File Offset: 0x0001D308
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void InternalAddEntry(string name, ZipEntry entry)
		{
			this._entries.Add(name, entry);
			this._zipEntriesAsList = null;
			this._contentsChanged = true;
		}

		// Token: 0x0600049D RID: 1181 RVA: 0x0001F130 File Offset: 0x0001D330
		[MethodImpl(MethodImplOptions.NoInlining)]
		private ZipEntry AddOrUpdateDirectoryImpl(string directoryName, string rootDirectoryPathInArchive, AddOrUpdateAction action, bool recurse, int level)
		{
			ZipEntry zipEntry;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					string text;
					switch (num)
					{
					case 0:
					{
						int num2;
						text = directoryName.Substring(num2 + 1);
						text = delegate0d0.f0000bb(rootDirectoryPathInArchive, text);
						goto IL_16E;
					}
					case 1:
						goto IL_212;
					case 2:
						IL_36:
						text = zipEntry.FileName;
						goto IL_3D;
					case 3:
						if (this.Verbose)
						{
							this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ê10DÝXN\u0019\u0082\\"), (action == AddOrUpdateAction.AddOnly) ? c0000c0.m00000f("ðe)\rÈ\u000e") : c0000c0.m00000f("Ðe)\rÈ\u000e\u0013XÞR;\\lö9\u000eøå"), directoryName);
						}
						if (level == 0)
						{
							this.OnAddStarted();
						}
						text = rootDirectoryPathInArchive;
						zipEntry = null;
						if (level > 0)
						{
							int num2 = directoryName.Length;
							for (int i = level; i > 0; i--)
							{
								num2 = directoryName.LastIndexOfAny(c0000c0.m00000f("¾]").ToCharArray(), num2 - 1, num2 - 1);
							}
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_16E;
					}
					break;
					IL_3D:
					string[] array = delegate0142.f000182(directoryName);
					if (recurse)
					{
						foreach (string fileName in array)
						{
							if (action == AddOrUpdateAction.AddOnly)
							{
								this.AddFile(fileName, text);
							}
							else
							{
								this.UpdateFile(fileName, text);
							}
						}
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_277;
					IL_16E:
					if (level <= 0 && !delegate0db.f0000da(rootDirectoryPathInArchive, c0000c0.m00000f("")))
					{
						goto IL_3D;
					}
					zipEntry = ZipEntry.CreateFromFile(directoryName, text);
					zipEntry._container = new ZipContainer(this);
					zipEntry.ProvisionalAlternateEncoding = this.ProvisionalAlternateEncoding;
					zipEntry.MarkAsDirectory();
					zipEntry.EmitTimesInWindowsFormatWhenSaving = this._emitNtfsTimes;
					zipEntry.EmitTimesInUnixFormatWhenSaving = this._emitUnixTimes;
					if (this._entries.ContainsKey(zipEntry.FileName))
					{
						goto IL_36;
					}
					this.InternalAddEntry(zipEntry.FileName, zipEntry);
					this.AfterAddEntry(zipEntry);
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_212:
			string[] directories = Directory.GetDirectories(directoryName);
			foreach (string text2 in directories)
			{
				FileAttributes fileAttributes = delegate013a.f000178(text2);
				if (this.AddDirectoryWillTraverseReparsePoints || (fileAttributes & FileAttributes.ReparsePoint) == (FileAttributes)0)
				{
					this.AddOrUpdateDirectoryImpl(text2, rootDirectoryPathInArchive, action, recurse, level + 1);
				}
			}
			IL_277:
			if (level == 0)
			{
				this.OnAddCompleted();
			}
			return zipEntry;
		}

		// Token: 0x0600049E RID: 1182 RVA: 0x0001F3C4 File Offset: 0x0001D5C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool CheckZip(string zipFileName)
		{
			ReadOnlyCollection<string> readOnlyCollection;
			return ZipFile.CheckZip(zipFileName, false, out readOnlyCollection);
		}

		// Token: 0x0600049F RID: 1183 RVA: 0x0001F3DC File Offset: 0x0001D5DC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool CheckZip(string zipFileName, bool fixIfNecessary, out ReadOnlyCollection<string> messages)
		{
			List<string> list = new List<string>();
			ZipFile zipFile = null;
			ZipFile zipFile2 = null;
			bool flag = true;
			zipFile = new ZipFile();
			zipFile.FullScan = true;
			zipFile.Initialize(zipFileName);
			zipFile2 = ZipFile.Read(zipFileName);
			foreach (ZipEntry zipEntry in zipFile)
			{
				foreach (ZipEntry zipEntry2 in zipFile2)
				{
					if (delegate0db.f0000d9(zipEntry.FileName, zipEntry2.FileName))
					{
						if (zipEntry._RelativeOffsetOfLocalHeader != zipEntry2._RelativeOffsetOfLocalHeader)
						{
							flag = false;
							list.Add(delegate0106.f00012d(c0000c0.m00000f("ê10^\u0086\u0004ZDÁ\u0013:O`·$\t¶Ð\v\nL°sÛ6ñ\u0011¸dÝ\u0097ù{{%\u000fùáh\u0095_\t­ç»\u0019\u008a\u0005\u008c\u0083(í\u0098\u0004 ±Å¿-ÇÀ+[À´Î?æ1É"), zipEntry.FileName, zipEntry._RelativeOffsetOfLocalHeader, zipEntry2._RelativeOffsetOfLocalHeader));
						}
						if (zipEntry._CompressedSize != zipEntry2._CompressedSize)
						{
							flag = false;
							list.Add(delegate0106.f00012d(c0000c0.m00000f("ê10^\u0086\u0004ZDÁ\u0013:O`·$\t¶Á\u0001\v]¶\u007fÞ Û\u0013\u008d~Â\u0086\u0096=\u001fz\u0014ã¼\u001a¨\u000f[µµº\u0004\u0082\u0005\u008c\u0083+í\u0098\u0004 ±Ì"), zipEntry.FileName, zipEntry._CompressedSize, zipEntry2._CompressedSize));
						}
						if (zipEntry._UncompressedSize != zipEntry2._UncompressedSize)
						{
							flag = false;
							list.Add(delegate0106.f00012d(c0000c0.m00000f("ê10^\u0086\u0004ZDÁ\u0013:O`·$\t¶×\0\u0005B©jß6Í\u0004»së\u008aÌx\u0017jD¨õ[Á\u00045ù£æ\u0019\u0083\bÔÈa¬ò\u000fNýÓã9"), zipEntry.FileName, zipEntry._UncompressedSize, zipEntry2._UncompressedSize));
						}
						if (zipEntry.CompressionMethod != zipEntry2.CompressionMethod)
						{
							flag = false;
							list.Add(delegate0106.f00012d(c0000c0.m00000f("ê10^\u0086\u0004ZDÁ\u0013:O`·$\t¶Á\u0001\v]¶\u007fÞ ×\u0018°ZÝ\u0097ÞrSjL°½X\u008b\u000fW\u0090¡æ\u0019\u0083\bÔÈa¬ò\u000fNø\u0098·"), zipEntry.FileName, zipEntry.CompressionMethod, zipEntry2.CompressionMethod));
						}
						if (zipEntry.Crc != zipEntry2.Crc)
						{
							flag = false;
							list.Add(delegate0106.f00012d(c0000c0.m00000f("ê10^\u0086\u0004ZDÁ\u0013:O`·$\t¶Á\u001c\u0005\u001eö:\u008d{\u008e\u000f¥&\u0082»\u0082`\u0017kQ¸½X\u008b\fW\u0090¡æ\u0010"), zipEntry.FileName, zipEntry.Crc, zipEntry2.Crc));
							break;
						}
						break;
					}
				}
			}
			zipFile2.Dispose();
			zipFile2 = null;
			if (!flag && fixIfNecessary)
			{
				string text = delegate0e4.f0000ee(zipFileName);
				text = delegate0101.f000127(c0000c0.m00000f("ê10;À\0KRÈ\\4Ex"), text);
				zipFile.Save(text);
			}
			messages = list.AsReadOnly();
			return flag;
		}

		// Token: 0x060004A0 RID: 1184 RVA: 0x0001F650 File Offset: 0x0001D850
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static void FixZipDirectory(string zipFileName)
		{
			ZipFile zipFile = new ZipFile();
			zipFile.FullScan = true;
			zipFile.Initialize(zipFileName);
			zipFile.Save(zipFileName);
		}

		// Token: 0x170000E3 RID: 227
		// (get) Token: 0x060004A1 RID: 1185 RVA: 0x0001F67C File Offset: 0x0001D87C
		public string Info
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				StringBuilder stringBuilder = new StringBuilder();
				delegate0f7.f000110(stringBuilder, delegate0101.f000127(c0000c0.m00000f("Ëh=\"Ï\u0005V\r\u008c\t~Q\u0002"), this.Name));
				if (!delegate0d2.f0000c3(this._Comment))
				{
					delegate0f7.f000110(stringBuilder, delegate0101.f000127(c0000c0.m00000f("±!\u000e\vË\u0004VYØHnW8êG"), this._Comment));
				}
				if (this._versionMadeBy != 0)
				{
					delegate0f7.f000110(stringBuilder, delegate0101.f000127(c0000c0.m00000f("±!;\u0001Ô\u001aZXÂR#Mlòm\u0005ï¸NVU¿*\u0097\v\u008a\nÔ"), this._versionMadeBy));
				}
				if (this._versionNeededToExtract != 0)
				{
					delegate0f7.f000110(stringBuilder, delegate0101.f000127(c0000c0.m00000f("±!;\u0001Ô\u001aZXÂR Imó(\u0003¶ö\u0001FH¼nß2Ý\u0003ä7\u0088\u009bÍ-\r\u0012Xå\u0087"), this._versionNeededToExtract));
				}
				stringBuilder.Append(delegate0101.f000127(c0000c0.m00000f("±!8\u0017Ã\u001a\u0013må\"x\u00182·6Wë\u0088"), this.InputUsesZip64));
				delegate0f7.f000110(stringBuilder, delegate0101.f000127(c0000c0.m00000f("±!)\rÕ\u0002\u0013YÙ\u001f,Iz·:\u000eâêN%iþ:ÖcÃ}"), this._diskNumberWithCd));
				foreach (ZipEntry zipEntry in this._entries.Values)
				{
					delegate0f7.f000110(stringBuilder, zipEntry.Info);
				}
				return stringBuilder.ToString();
			}
		}

		// Token: 0x170000E4 RID: 228
		// (get) Token: 0x060004A2 RID: 1186 RVA: 0x0001F7E4 File Offset: 0x0001D9E4
		// (set) Token: 0x060004A3 RID: 1187 RVA: 0x0001F7F8 File Offset: 0x0001D9F8
		public bool FullScan { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000E5 RID: 229
		// (get) Token: 0x060004A4 RID: 1188 RVA: 0x0001F80C File Offset: 0x0001DA0C
		// (set) Token: 0x060004A5 RID: 1189 RVA: 0x0001F820 File Offset: 0x0001DA20
		public bool SortEntriesBeforeSaving { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000E6 RID: 230
		// (get) Token: 0x060004A6 RID: 1190 RVA: 0x0001F834 File Offset: 0x0001DA34
		// (set) Token: 0x060004A7 RID: 1191 RVA: 0x0001F848 File Offset: 0x0001DA48
		public bool AddDirectoryWillTraverseReparsePoints { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000E7 RID: 231
		// (get) Token: 0x060004A8 RID: 1192 RVA: 0x0001F85C File Offset: 0x0001DA5C
		// (set) Token: 0x060004A9 RID: 1193 RVA: 0x0001F870 File Offset: 0x0001DA70
		public int BufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._BufferSize;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._BufferSize = value;
			}
		}

		// Token: 0x170000E8 RID: 232
		// (get) Token: 0x060004AA RID: 1194 RVA: 0x0001F884 File Offset: 0x0001DA84
		// (set) Token: 0x060004AB RID: 1195 RVA: 0x0001F898 File Offset: 0x0001DA98
		public int CodecBufferSize { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000E9 RID: 233
		// (get) Token: 0x060004AC RID: 1196 RVA: 0x0001F8AC File Offset: 0x0001DAAC
		// (set) Token: 0x060004AD RID: 1197 RVA: 0x0001F8C0 File Offset: 0x0001DAC0
		public bool FlattenFoldersOnExtract { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000EA RID: 234
		// (get) Token: 0x060004AE RID: 1198 RVA: 0x0001F8D4 File Offset: 0x0001DAD4
		// (set) Token: 0x060004AF RID: 1199 RVA: 0x0001F8E8 File Offset: 0x0001DAE8
		public CompressionStrategy Strategy
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._Strategy;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._Strategy = value;
			}
		}

		// Token: 0x170000EB RID: 235
		// (get) Token: 0x060004B0 RID: 1200 RVA: 0x0001F8FC File Offset: 0x0001DAFC
		// (set) Token: 0x060004B1 RID: 1201 RVA: 0x0001F910 File Offset: 0x0001DB10
		public string Name
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._name;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._name = value;
			}
		}

		// Token: 0x170000EC RID: 236
		// (get) Token: 0x060004B2 RID: 1202 RVA: 0x0001F924 File Offset: 0x0001DB24
		// (set) Token: 0x060004B3 RID: 1203 RVA: 0x0001F938 File Offset: 0x0001DB38
		public CompressionLevel CompressionLevel { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000ED RID: 237
		// (get) Token: 0x060004B4 RID: 1204 RVA: 0x0001F94C File Offset: 0x0001DB4C
		// (set) Token: 0x060004B5 RID: 1205 RVA: 0x0001F960 File Offset: 0x0001DB60
		public string Comment
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._Comment;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._Comment = value;
				this._contentsChanged = true;
			}
		}

		// Token: 0x170000EE RID: 238
		// (get) Token: 0x060004B6 RID: 1206 RVA: 0x0001F97C File Offset: 0x0001DB7C
		// (set) Token: 0x060004B7 RID: 1207 RVA: 0x0001F990 File Offset: 0x0001DB90
		public bool EmitTimesInWindowsFormatWhenSaving
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._emitNtfsTimes;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._emitNtfsTimes = value;
			}
		}

		// Token: 0x170000EF RID: 239
		// (get) Token: 0x060004B8 RID: 1208 RVA: 0x0001F9A4 File Offset: 0x0001DBA4
		// (set) Token: 0x060004B9 RID: 1209 RVA: 0x0001F9B8 File Offset: 0x0001DBB8
		public bool EmitTimesInUnixFormatWhenSaving
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._emitUnixTimes;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._emitUnixTimes = value;
			}
		}

		// Token: 0x170000F0 RID: 240
		// (get) Token: 0x060004BA RID: 1210 RVA: 0x0001F9CC File Offset: 0x0001DBCC
		internal bool Verbose
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._StatusMessageTextWriter != null;
			}
		}

		// Token: 0x060004BB RID: 1211 RVA: 0x0001F9E8 File Offset: 0x0001DBE8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public bool ContainsEntry(string name)
		{
			return this._entries.ContainsKey(name);
		}

		// Token: 0x170000F1 RID: 241
		// (get) Token: 0x060004BC RID: 1212 RVA: 0x0001FA04 File Offset: 0x0001DC04
		// (set) Token: 0x060004BD RID: 1213 RVA: 0x0001FA18 File Offset: 0x0001DC18
		public bool CaseSensitiveRetrieval
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._CaseSensitiveRetrieval;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				if (value != this._CaseSensitiveRetrieval)
				{
					this._CaseSensitiveRetrieval = value;
					this._initEntriesDictionary();
				}
			}
		}

		// Token: 0x170000F2 RID: 242
		// (get) Token: 0x060004BE RID: 1214 RVA: 0x0001FA40 File Offset: 0x0001DC40
		// (set) Token: 0x060004BF RID: 1215 RVA: 0x0001FA6C File Offset: 0x0001DC6C
		public bool UseUnicodeAsNecessary
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._provisionalAlternateEncoding == delegate0c7.f000090(c0000c0.m00000f("ÄU\vI\u009e"));
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._provisionalAlternateEncoding = (value ? Encoding.GetEncoding(c0000c0.m00000f("ÄU\vI\u009e")) : ZipFile.DefaultEncoding);
			}
		}

		// Token: 0x170000F3 RID: 243
		// (get) Token: 0x060004C0 RID: 1216 RVA: 0x0001FA98 File Offset: 0x0001DC98
		// (set) Token: 0x060004C1 RID: 1217 RVA: 0x0001FAAC File Offset: 0x0001DCAC
		public Zip64Option UseZip64WhenSaving
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._zip64;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._zip64 = value;
			}
		}

		// Token: 0x170000F4 RID: 244
		// (get) Token: 0x060004C2 RID: 1218 RVA: 0x0001FAC0 File Offset: 0x0001DCC0
		public bool? RequiresZip64
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._entries.Count > 65534)
				{
					return new bool?(true);
				}
				if (!this._hasBeenSaved || this._contentsChanged)
				{
					return null;
				}
				foreach (ZipEntry zipEntry in this._entries.Values)
				{
					if (zipEntry.RequiresZip64.Value)
					{
						return new bool?(true);
					}
				}
				return new bool?(false);
			}
		}

		// Token: 0x170000F5 RID: 245
		// (get) Token: 0x060004C3 RID: 1219 RVA: 0x0001FB5C File Offset: 0x0001DD5C
		public bool? OutputUsedZip64
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._OutputUsesZip64;
			}
		}

		// Token: 0x170000F6 RID: 246
		// (get) Token: 0x060004C4 RID: 1220 RVA: 0x0001FB70 File Offset: 0x0001DD70
		public bool? InputUsesZip64
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._entries.Count > 65534)
				{
					return new bool?(true);
				}
				foreach (ZipEntry zipEntry in this)
				{
					bool? result;
					if (zipEntry.Source != ZipEntrySource.ZipFile)
					{
						result = null;
					}
					else
					{
						if (!zipEntry._InputUsesZip64)
						{
							continue;
						}
						result = new bool?(true);
					}
					return result;
				}
				return new bool?(false);
			}
		}

		// Token: 0x170000F7 RID: 247
		// (get) Token: 0x060004C5 RID: 1221 RVA: 0x0001FBF4 File Offset: 0x0001DDF4
		// (set) Token: 0x060004C6 RID: 1222 RVA: 0x0001FC08 File Offset: 0x0001DE08
		public Encoding ProvisionalAlternateEncoding
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._provisionalAlternateEncoding;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._provisionalAlternateEncoding = value;
			}
		}

		// Token: 0x170000F8 RID: 248
		// (get) Token: 0x060004C7 RID: 1223 RVA: 0x0001FC1C File Offset: 0x0001DE1C
		// (set) Token: 0x060004C8 RID: 1224 RVA: 0x0001FC30 File Offset: 0x0001DE30
		public TextWriter StatusMessageTextWriter
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._StatusMessageTextWriter;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				this._StatusMessageTextWriter = value;
			}
		}

		// Token: 0x170000F9 RID: 249
		// (get) Token: 0x060004C9 RID: 1225 RVA: 0x0001FC44 File Offset: 0x0001DE44
		// (set) Token: 0x060004CA RID: 1226 RVA: 0x0001FC58 File Offset: 0x0001DE58
		public string TempFileFolder
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._TempFileFolder;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (value == null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_74;
						case 1:
							goto IL_74;
						case 2:
							return;
						case 3:
							this._TempFileFolder = value;
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				return;
				IL_74:
				if (!Directory.Exists(value))
				{
					throw new FileNotFoundException(delegate0101.f000127(c0000c0.m00000f("Åi,\u0010\u0086\rZEÉ\u0011:CzîmOí²\u0013O\r\u00a0uÈ \u009e\u0019±c\u0098\u0086ÎtD>B"), value));
				}
			}
		}

		// Token: 0x170000FA RID: 250
		// (set) Token: 0x060004CB RID: 1227 RVA: 0x0001FD00 File Offset: 0x0001DF00
		public string Password
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (this._Password == null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_98;
						case 1:
							return;
						case 2:
							this.Encryption = EncryptionAlgorithm.None;
							num = delegate0da.f0000d7(-1);
							continue;
						case 3:
							this._Password = value;
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				return;
				IL_98:
				if (this.Encryption == EncryptionAlgorithm.None)
				{
					this.Encryption = EncryptionAlgorithm.PkzipWeak;
				}
			}
		}

		// Token: 0x170000FB RID: 251
		// (get) Token: 0x060004CC RID: 1228 RVA: 0x0001FDB8 File Offset: 0x0001DFB8
		// (set) Token: 0x060004CD RID: 1229 RVA: 0x0001FDCC File Offset: 0x0001DFCC
		public ExtractExistingFileAction ExtractExistingFile { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000FC RID: 252
		// (get) Token: 0x060004CE RID: 1230 RVA: 0x0001FDE0 File Offset: 0x0001DFE0
		// (set) Token: 0x060004CF RID: 1231 RVA: 0x0001FE08 File Offset: 0x0001E008
		public ZipErrorAction ZipErrorAction
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this.ZipError != null)
				{
					this._zipErrorAction = ZipErrorAction.InvokeErrorEvent;
				}
				return this._zipErrorAction;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (this._zipErrorAction != ZipErrorAction.InvokeErrorEvent)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							return;
						case 1:
							goto IL_9E;
						case 2:
							if (this.ZipError != null)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							return;
						case 3:
							this._zipErrorAction = value;
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_9E:
				this.ZipError = null;
			}
		}

		// Token: 0x170000FD RID: 253
		// (get) Token: 0x060004D0 RID: 1232 RVA: 0x0001FEBC File Offset: 0x0001E0BC
		// (set) Token: 0x060004D1 RID: 1233 RVA: 0x0001FED0 File Offset: 0x0001E0D0
		public EncryptionAlgorithm Encryption
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._Encryption;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				if (value == EncryptionAlgorithm.Unsupported)
				{
					throw new InvalidOperationException(c0000c0.m00000f("Èn8DË\bJ\u0017Â\u001d:\f{ò9GÓì\r\u0014T´nÄ<ÐWªx\u0098\u0097Þ|Cj\u001aùáU\u0095\u0010"));
				}
				this._Encryption = value;
			}
		}

		// Token: 0x170000FE RID: 254
		// (get) Token: 0x060004D2 RID: 1234 RVA: 0x0001FEF8 File Offset: 0x0001E0F8
		// (set) Token: 0x060004D3 RID: 1235 RVA: 0x0001FF0C File Offset: 0x0001E10C
		public SetCompressionCallback SetCompression { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x170000FF RID: 255
		// (get) Token: 0x060004D4 RID: 1236 RVA: 0x0001FF20 File Offset: 0x0001E120
		// (set) Token: 0x060004D5 RID: 1237 RVA: 0x0001FF34 File Offset: 0x0001E134
		public int MaxOutputSegmentSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._maxOutputSegmentSize;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (value != 0)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_87;
						case 1:
							goto IL_87;
						case 2:
							goto IL_36;
						case 3:
							if (value < 65536)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_87;
						}
						break;
					}
				}
				IL_36:
				throw new ZipException(c0000c0.m00000f("Åi(DË\0]^Á\a#\fiô.\u0002æö\u000f\u0004A¡:Þ6Ù\u001a»yÌÃÅtM/Lñþ\0Æ\vXû£µ"));
				IL_87:
				this._maxOutputSegmentSize = value;
			}
		}

		// Token: 0x17000100 RID: 256
		// (get) Token: 0x060004D6 RID: 1238 RVA: 0x0001FFD0 File Offset: 0x0001E1D0
		public int NumberOfSegmentsForMostRecentSave
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return (int)(this._numberOfSegmentsForMostRecentSave + 1U);
			}
		}

		// Token: 0x17000101 RID: 257
		// (get) Token: 0x060004D8 RID: 1240 RVA: 0x000200AC File Offset: 0x0001E2AC
		// (set) Token: 0x060004D7 RID: 1239 RVA: 0x0001FFE8 File Offset: 0x0001E1E8
		public long ParallelDeflateThreshold
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._ParallelDeflateThreshold;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (value != -1L)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_AE;
						case 1:
							goto IL_9E;
						case 2:
							if (value < 65536L)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_AE;
						case 3:
							if (value != 0L)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_AE;
						}
						break;
					}
				}
				IL_9E:
				throw new ArgumentException(c0000c0.m00000f("Á`?\u0005Ê\u0005V[è\u0017(@iã(3þð\v\u0015E«vÉsÍ\u001f±bÔ\u0087\u0096\u007fRjA©¡\0À\u0012M§ç»\a\u0082\u0003ÁÍ*á"));
				IL_AE:
				this._ParallelDeflateThreshold = value;
			}
		}

		// Token: 0x060004D9 RID: 1241 RVA: 0x000200C0 File Offset: 0x0001E2C0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override string ToString()
		{
			return delegate0101.f000127(c0000c0.m00000f("Ëh=\"Ï\u0005V\r\u0096\t~Q"), this.Name);
		}

		// Token: 0x17000102 RID: 258
		// (get) Token: 0x060004DA RID: 1242 RVA: 0x000200E8 File Offset: 0x0001E2E8
		public static Version LibraryVersion
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return delegate0157.f0001a4(delegate0156.f0001a3(delegate0155.f0001a1()));
			}
		}

		// Token: 0x060004DB RID: 1243 RVA: 0x00020114 File Offset: 0x0001E314
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void NotifyEntryChanged()
		{
			this._contentsChanged = true;
		}

		// Token: 0x060004DC RID: 1244 RVA: 0x00020128 File Offset: 0x0001E328
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal Stream StreamForDiskNumber(uint diskNumber)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						if (diskNumber == 0U)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_A6;
					case 1:
						goto IL_9F;
					case 2:
						if (this._diskNumberWithCd == 0U)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A6;
					case 3:
						if (diskNumber + 1U != this._diskNumberWithCd)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_9F;
					}
					break;
				}
			}
			IL_9F:
			return this.ReadStream;
			IL_A6:
			return ZipSegmentedStream.ForReading(this._name, diskNumber, this._diskNumberWithCd);
		}

		// Token: 0x060004DD RID: 1245 RVA: 0x000201F0 File Offset: 0x0001E3F0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void Reset()
		{
			if (this._JustSaved)
			{
				ZipFile zipFile = new ZipFile();
				zipFile._name = this._name;
				zipFile.ProvisionalAlternateEncoding = this.ProvisionalAlternateEncoding;
				ZipFile.ReadIntoInstance(zipFile);
				foreach (ZipEntry zipEntry in zipFile)
				{
					foreach (ZipEntry zipEntry2 in this)
					{
						if (delegate0db.f0000d9(zipEntry.FileName, zipEntry2.FileName))
						{
							zipEntry2.CopyMetaData(zipEntry);
							break;
						}
					}
				}
				zipFile.Dispose();
				this._JustSaved = false;
			}
		}

		// Token: 0x060004DE RID: 1246 RVA: 0x0002029C File Offset: 0x0001E49C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipFile(string fileName)
		{
			this._InitInstance(fileName, null);
		}

		// Token: 0x060004DF RID: 1247 RVA: 0x00020308 File Offset: 0x0001E508
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipFile(string fileName, Encoding encoding)
		{
			this._InitInstance(fileName, null);
			this.ProvisionalAlternateEncoding = encoding;
		}

		// Token: 0x060004E0 RID: 1248 RVA: 0x0002037C File Offset: 0x0001E57C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipFile()
		{
			this._InitInstance(null, null);
		}

		// Token: 0x060004E1 RID: 1249 RVA: 0x000203E8 File Offset: 0x0001E5E8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipFile(Encoding encoding)
		{
			this._InitInstance(null, null);
			this.ProvisionalAlternateEncoding = encoding;
		}

		// Token: 0x060004E2 RID: 1250 RVA: 0x0002045C File Offset: 0x0001E65C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipFile(string fileName, TextWriter statusMessageWriter)
		{
			this._InitInstance(fileName, statusMessageWriter);
		}

		// Token: 0x060004E3 RID: 1251 RVA: 0x000204C8 File Offset: 0x0001E6C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ZipFile(string fileName, TextWriter statusMessageWriter, Encoding encoding)
		{
			this._InitInstance(fileName, statusMessageWriter);
			this.ProvisionalAlternateEncoding = encoding;
		}

		// Token: 0x060004E4 RID: 1252 RVA: 0x0002053C File Offset: 0x0001E73C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Initialize(string fileName)
		{
			this._InitInstance(fileName, null);
		}

		// Token: 0x060004E5 RID: 1253 RVA: 0x00020554 File Offset: 0x0001E754
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _initEntriesDictionary()
		{
			StringComparer comparer = this.CaseSensitiveRetrieval ? StringComparer.Ordinal : delegate0108.f000131();
			this._entries = ((this._entries == null) ? new Dictionary<string, ZipEntry>(comparer) : new Dictionary<string, ZipEntry>(this._entries, comparer));
		}

		// Token: 0x060004E6 RID: 1254 RVA: 0x000205A0 File Offset: 0x0001E7A0
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _InitInstance(string zipFileName, TextWriter statusMessageWriter)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.AddDirectoryWillTraverseReparsePoints = true;
						this.CompressionLevel = CompressionLevel.f000073;
						this.ParallelDeflateThreshold = 524288L;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_D3;
					case 2:
						this._initEntriesDictionary();
						if (!delegate0d2.f0000c1(this._name))
						{
							return;
						}
						if (this.FullScan)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_DE;
					case 3:
						this._name = zipFileName;
						this._StatusMessageTextWriter = statusMessageWriter;
						this._contentsChanged = true;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_D3:
			ZipFile.ReadIntoInstance_Orig(this);
			goto IL_E4;
			IL_DE:
			ZipFile.ReadIntoInstance(this);
			IL_E4:
			this._fileAlreadyExists = true;
		}

		// Token: 0x17000103 RID: 259
		// (get) Token: 0x060004E7 RID: 1255 RVA: 0x00020698 File Offset: 0x0001E898
		private List<ZipEntry> ZipEntriesAsList
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._zipEntriesAsList == null)
				{
					this._zipEntriesAsList = new List<ZipEntry>(this._entries.Values);
				}
				return this._zipEntriesAsList;
			}
		}

		// Token: 0x17000104 RID: 260
		public ZipEntry this[int p0]
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.ZipEntriesAsList[p0];
			}
		}

		// Token: 0x17000105 RID: 261
		public ZipEntry this[string fileName]
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				string key = SharedUtilities.NormalizePathForUseInZipFile(fileName);
				if (this._entries.ContainsKey(key))
				{
					return this._entries[key];
				}
				return null;
			}
		}

		// Token: 0x17000106 RID: 262
		// (get) Token: 0x060004EA RID: 1258 RVA: 0x0002071C File Offset: 0x0001E91C
		public ICollection<string> EntryFileNames
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._entries.Keys;
			}
		}

		// Token: 0x17000107 RID: 263
		// (get) Token: 0x060004EB RID: 1259 RVA: 0x00020734 File Offset: 0x0001E934
		public ICollection<ZipEntry> Entries
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._entries.Values;
			}
		}

		// Token: 0x17000108 RID: 264
		// (get) Token: 0x060004EC RID: 1260 RVA: 0x0002074C File Offset: 0x0001E94C
		public ICollection<ZipEntry> EntriesSorted
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				ZipFile.c000087 c = new ZipFile.c000087();
				List<ZipEntry> list = new List<ZipEntry>();
				foreach (ZipEntry item in this.Entries)
				{
					list.Add(item);
				}
				c.f000054 = (this.CaseSensitiveRetrieval ? StringComparison.Ordinal : StringComparison.OrdinalIgnoreCase);
				list.Sort(new Comparison<ZipEntry>(c.m00000d));
				return list.AsReadOnly();
			}
		}

		// Token: 0x17000109 RID: 265
		// (get) Token: 0x060004ED RID: 1261 RVA: 0x000207B8 File Offset: 0x0001E9B8
		public int Count
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._entries.Count;
			}
		}

		// Token: 0x060004EE RID: 1262 RVA: 0x000207D0 File Offset: 0x0001E9D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void RemoveEntry(ZipEntry entry)
		{
			this._entries.Remove(SharedUtilities.NormalizePathForUseInZipFile(entry.FileName));
			this._zipEntriesAsList = null;
			this._contentsChanged = true;
		}

		// Token: 0x060004EF RID: 1263 RVA: 0x00020804 File Offset: 0x0001EA04
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void RemoveEntry(string fileName)
		{
			ZipEntry zipEntry;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						string fileName2;
						zipEntry = this[fileName2];
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_94;
					case 2:
						if (zipEntry == null)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A4;
					case 3:
					{
						string fileName2 = ZipEntry.NameInArchive(fileName, null);
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_94:
			throw new ArgumentException(c0000c0.m00000f("Åi(DÃ\aGEÕR7C}·>\u0017óá\a\0D¡~\u008d$ß\u0004þy×\u0097\u0096{X?\u0002ü­I\u009e\u001e\u0019\u00a0ð»CËEÔ\u0099k´¨\\`©Ë"));
			IL_A4:
			this.RemoveEntry(zipEntry);
		}

		// Token: 0x060004F0 RID: 1264 RVA: 0x000208BC File Offset: 0x0001EABC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Dispose()
		{
			this.Dispose(true);
			delegate0e6.f0000f6(this);
		}

		// Token: 0x060004F1 RID: 1265 RVA: 0x000208DC File Offset: 0x0001EADC
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected virtual void Dispose(bool disposeManagedResources)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._readstream.Dispose();
						this._readstream = null;
						goto IL_C7;
					case 1:
						goto IL_F5;
					case 2:
						if (this._writestream != null)
						{
							this._writestream.Dispose();
							this._writestream = null;
							goto IL_53;
						}
						goto IL_53;
					case 3:
						if (this._disposed)
						{
							return;
						}
						if (!disposeManagedResources)
						{
							goto IL_107;
						}
						if (this._ReadStreamIsOurs && this._readstream != null)
						{
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_C7;
					}
					break;
					IL_53:
					if (this.ParallelDeflater != null)
					{
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_107;
					IL_C7:
					if (this._temporaryFileName == null || this._name == null)
					{
						goto IL_53;
					}
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_F5:
			this.ParallelDeflater.Dispose();
			this.ParallelDeflater = null;
			IL_107:
			this._disposed = true;
		}

		// Token: 0x1700010A RID: 266
		// (get) Token: 0x060004F2 RID: 1266 RVA: 0x000209F8 File Offset: 0x0001EBF8
		internal Stream ReadStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							if (this._name != null)
							{
								num = delegate0da.f0000d7(-2);
								continue;
							}
							goto IL_B1;
						case 1:
							goto IL_AA;
						case 2:
							this._readstream = delegate0135.f000171(this._name);
							num = delegate0da.f0000d7(-1);
							continue;
						case 3:
							if (this._readstream == null)
							{
								num = delegate0da.f0000d7(0);
								continue;
							}
							goto IL_B1;
						}
						break;
					}
				}
				IL_AA:
				this._ReadStreamIsOurs = true;
				IL_B1:
				return this._readstream;
			}
		}

		// Token: 0x1700010B RID: 267
		// (get) Token: 0x060004F3 RID: 1267 RVA: 0x00020ABC File Offset: 0x0001ECBC
		// (set) Token: 0x060004F4 RID: 1268 RVA: 0x00020B94 File Offset: 0x0001ED94
		private Stream WriteStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
							goto IL_7D;
						case 1:
							goto IL_8F;
						case 2:
							goto IL_05;
						case 3:
							if (this._writestream != null)
							{
								goto Block_2;
							}
							goto IL_7D;
						}
						break;
						IL_05:
						if (this._maxOutputSegmentSize != 0)
						{
							this._writestream = ZipSegmentedStream.ForWriting(this._name, this._maxOutputSegmentSize);
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_96;
						IL_7D:
						if (this._name == null)
						{
							goto Block_3;
						}
						goto IL_05;
					}
				}
				Block_2:
				return this._writestream;
				Block_3:
				return this._writestream;
				IL_8F:
				return this._writestream;
				IL_96:
				SharedUtilities.CreateAndOpenUniqueTempFile(this.TempFileFolder ?? delegate0e4.f0000ed(this._name), out this._writestream, out this._temporaryFileName);
				return this._writestream;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				if (value != null)
				{
					throw new ZipException(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013DÉ\u0006nX`òm\u0014âð\v\a@änÂsßW°xÖÎØh[&LîìL\u0085[C"));
				}
				this._writestream = null;
			}
		}

		// Token: 0x1700010C RID: 268
		// (get) Token: 0x060004F5 RID: 1269 RVA: 0x00020BBC File Offset: 0x0001EDBC
		private string ArchiveNameForEvent
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._name == null)
				{
					return c0000c0.m00000f("¹r9\u0016Ã\b^\u001e");
				}
				return this._name;
			}
		}

		// Token: 0x14000001 RID: 1
		// (add) Token: 0x060004F6 RID: 1270 RVA: 0x00020BE4 File Offset: 0x0001EDE4
		// (remove) Token: 0x060004F7 RID: 1271 RVA: 0x00020C10 File Offset: 0x0001EE10
		public event EventHandler<SaveProgressEventArgs> SaveProgress
		{
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			add
			{
				this.SaveProgress = (EventHandler<SaveProgressEventArgs>)delegate0158.f0001a5(this.SaveProgress, value);
			}
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			remove
			{
				this.SaveProgress = (EventHandler<SaveProgressEventArgs>)delegate0158.f0001a6(this.SaveProgress, value);
			}
		}

		// Token: 0x060004F8 RID: 1272 RVA: 0x00020C3C File Offset: 0x0001EE3C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal bool OnSaveBlock(ZipEntry entry, long bytesXferred, long totalBytesToXfer)
		{
			if (this.SaveProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				SaveProgressEventArgs saveProgressEventArgs = SaveProgressEventArgs.ByteUpdate(this.ArchiveNameForEvent, entry, bytesXferred, totalBytesToXfer);
				this.SaveProgress(this, saveProgressEventArgs);
				if (saveProgressEventArgs.Cancel)
				{
					this._saveOperationCanceled = true;
				}
			}
			return this._saveOperationCanceled;
		}

		// Token: 0x060004F9 RID: 1273 RVA: 0x00020C98 File Offset: 0x0001EE98
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnSaveEntry(int current, ZipEntry entry, bool before)
		{
			if (this.SaveProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				SaveProgressEventArgs saveProgressEventArgs = new SaveProgressEventArgs(this.ArchiveNameForEvent, before, this._entries.Count, current, entry);
				this.SaveProgress(this, saveProgressEventArgs);
				if (saveProgressEventArgs.Cancel)
				{
					this._saveOperationCanceled = true;
				}
			}
		}

		// Token: 0x060004FA RID: 1274 RVA: 0x00020CF8 File Offset: 0x0001EEF8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnSaveEvent(ZipProgressEventType eventFlavor)
		{
			if (this.SaveProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				SaveProgressEventArgs saveProgressEventArgs = new SaveProgressEventArgs(this.ArchiveNameForEvent, eventFlavor);
				this.SaveProgress(this, saveProgressEventArgs);
				if (saveProgressEventArgs.Cancel)
				{
					this._saveOperationCanceled = true;
				}
			}
		}

		// Token: 0x060004FB RID: 1275 RVA: 0x00020D4C File Offset: 0x0001EF4C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnSaveStarted()
		{
			if (this.SaveProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				SaveProgressEventArgs e = SaveProgressEventArgs.Started(this.ArchiveNameForEvent);
				this.SaveProgress(this, e);
			}
		}

		// Token: 0x060004FC RID: 1276 RVA: 0x00020D90 File Offset: 0x0001EF90
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnSaveCompleted()
		{
			if (this.SaveProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				SaveProgressEventArgs e = SaveProgressEventArgs.Completed(this.ArchiveNameForEvent);
				this.SaveProgress(this, e);
			}
		}

		// Token: 0x14000002 RID: 2
		// (add) Token: 0x060004FD RID: 1277 RVA: 0x00020DD4 File Offset: 0x0001EFD4
		// (remove) Token: 0x060004FE RID: 1278 RVA: 0x00020E00 File Offset: 0x0001F000
		public event EventHandler<ReadProgressEventArgs> ReadProgress
		{
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			add
			{
				this.ReadProgress = (EventHandler<ReadProgressEventArgs>)delegate0158.f0001a5(this.ReadProgress, value);
			}
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			remove
			{
				this.ReadProgress = (EventHandler<ReadProgressEventArgs>)delegate0158.f0001a6(this.ReadProgress, value);
			}
		}

		// Token: 0x060004FF RID: 1279 RVA: 0x00020E2C File Offset: 0x0001F02C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnReadStarted()
		{
			if (this.ReadProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ReadProgressEventArgs e = ReadProgressEventArgs.Started(this.ArchiveNameForEvent);
				this.ReadProgress(this, e);
			}
		}

		// Token: 0x06000500 RID: 1280 RVA: 0x00020E70 File Offset: 0x0001F070
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnReadCompleted()
		{
			if (this.ReadProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ReadProgressEventArgs e = ReadProgressEventArgs.Completed(this.ArchiveNameForEvent);
				this.ReadProgress(this, e);
			}
		}

		// Token: 0x06000501 RID: 1281 RVA: 0x00020EB4 File Offset: 0x0001F0B4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void OnReadBytes(ZipEntry entry)
		{
			if (this.ReadProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ReadProgressEventArgs e = ReadProgressEventArgs.ByteUpdate(this.ArchiveNameForEvent, entry, this.ReadStream.Position, this.LengthOfReadStream);
				this.ReadProgress(this, e);
			}
		}

		// Token: 0x06000502 RID: 1282 RVA: 0x00020F08 File Offset: 0x0001F108
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void OnReadEntry(bool before, ZipEntry entry)
		{
			if (this.ReadProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ReadProgressEventArgs e = before ? ReadProgressEventArgs.Before(this.ArchiveNameForEvent, this._entries.Count) : ReadProgressEventArgs.After(this.ArchiveNameForEvent, entry, this._entries.Count);
				this.ReadProgress(this, e);
			}
		}

		// Token: 0x1700010D RID: 269
		// (get) Token: 0x06000503 RID: 1283 RVA: 0x00020F74 File Offset: 0x0001F174
		private long LengthOfReadStream
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				if (this._lengthOfReadStream == -99L)
				{
					this._lengthOfReadStream = (this._ReadStreamIsOurs ? SharedUtilities.GetFileLength(this._name) : -1L);
				}
				return this._lengthOfReadStream;
			}
		}

		// Token: 0x14000003 RID: 3
		// (add) Token: 0x06000504 RID: 1284 RVA: 0x00020FB8 File Offset: 0x0001F1B8
		// (remove) Token: 0x06000505 RID: 1285 RVA: 0x00020FE4 File Offset: 0x0001F1E4
		public event EventHandler<ExtractProgressEventArgs> ExtractProgress
		{
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			add
			{
				this.ExtractProgress = (EventHandler<ExtractProgressEventArgs>)delegate0158.f0001a5(this.ExtractProgress, value);
			}
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			remove
			{
				this.ExtractProgress = (EventHandler<ExtractProgressEventArgs>)delegate0158.f0001a6(this.ExtractProgress, value);
			}
		}

		// Token: 0x06000506 RID: 1286 RVA: 0x00021010 File Offset: 0x0001F210
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnExtractEntry(int current, bool before, ZipEntry currentEntry, string path)
		{
			if (this.ExtractProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ExtractProgressEventArgs extractProgressEventArgs = new ExtractProgressEventArgs(this.ArchiveNameForEvent, before, this._entries.Count, current, currentEntry, path);
				this.ExtractProgress(this, extractProgressEventArgs);
				if (extractProgressEventArgs.Cancel)
				{
					this._extractOperationCanceled = true;
				}
			}
		}

		// Token: 0x06000507 RID: 1287 RVA: 0x00021074 File Offset: 0x0001F274
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal bool OnExtractBlock(ZipEntry entry, long bytesWritten, long totalBytesToWrite)
		{
			if (this.ExtractProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ExtractProgressEventArgs extractProgressEventArgs = ExtractProgressEventArgs.ByteUpdate(this.ArchiveNameForEvent, entry, bytesWritten, totalBytesToWrite);
				this.ExtractProgress(this, extractProgressEventArgs);
				if (extractProgressEventArgs.Cancel)
				{
					this._extractOperationCanceled = true;
				}
			}
			return this._extractOperationCanceled;
		}

		// Token: 0x06000508 RID: 1288 RVA: 0x000210D0 File Offset: 0x0001F2D0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal bool OnSingleEntryExtract(ZipEntry entry, string path, bool before)
		{
			if (this.ExtractProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ExtractProgressEventArgs extractProgressEventArgs = before ? ExtractProgressEventArgs.BeforeExtractEntry(this.ArchiveNameForEvent, entry, path) : ExtractProgressEventArgs.AfterExtractEntry(this.ArchiveNameForEvent, entry, path);
				this.ExtractProgress(this, extractProgressEventArgs);
				if (extractProgressEventArgs.Cancel)
				{
					this._extractOperationCanceled = true;
				}
			}
			return this._extractOperationCanceled;
		}

		// Token: 0x06000509 RID: 1289 RVA: 0x0002113C File Offset: 0x0001F33C
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal bool OnExtractExisting(ZipEntry entry, string path)
		{
			if (this.ExtractProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ExtractProgressEventArgs extractProgressEventArgs = ExtractProgressEventArgs.ExtractExisting(this.ArchiveNameForEvent, entry, path);
				this.ExtractProgress(this, extractProgressEventArgs);
				if (extractProgressEventArgs.Cancel)
				{
					this._extractOperationCanceled = true;
				}
			}
			return this._extractOperationCanceled;
		}

		// Token: 0x0600050A RID: 1290 RVA: 0x00021198 File Offset: 0x0001F398
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnExtractAllCompleted(string path)
		{
			if (this.ExtractProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ExtractProgressEventArgs e = ExtractProgressEventArgs.ExtractAllCompleted(this.ArchiveNameForEvent, path);
				this.ExtractProgress(this, e);
			}
		}

		// Token: 0x0600050B RID: 1291 RVA: 0x000211DC File Offset: 0x0001F3DC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnExtractAllStarted(string path)
		{
			if (this.ExtractProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ExtractProgressEventArgs e = ExtractProgressEventArgs.ExtractAllStarted(this.ArchiveNameForEvent, path);
				this.ExtractProgress(this, e);
			}
		}

		// Token: 0x14000004 RID: 4
		// (add) Token: 0x0600050C RID: 1292 RVA: 0x00021220 File Offset: 0x0001F420
		// (remove) Token: 0x0600050D RID: 1293 RVA: 0x0002124C File Offset: 0x0001F44C
		public event EventHandler<AddProgressEventArgs> AddProgress
		{
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			add
			{
				this.AddProgress = (EventHandler<AddProgressEventArgs>)delegate0158.f0001a5(this.AddProgress, value);
			}
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			remove
			{
				this.AddProgress = (EventHandler<AddProgressEventArgs>)delegate0158.f0001a6(this.AddProgress, value);
			}
		}

		// Token: 0x0600050E RID: 1294 RVA: 0x00021278 File Offset: 0x0001F478
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnAddStarted()
		{
			if (this.AddProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				AddProgressEventArgs e = AddProgressEventArgs.Started(this.ArchiveNameForEvent);
				this.AddProgress(this, e);
			}
		}

		// Token: 0x0600050F RID: 1295 RVA: 0x000212BC File Offset: 0x0001F4BC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void OnAddCompleted()
		{
			if (this.AddProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				AddProgressEventArgs e = AddProgressEventArgs.Completed(this.ArchiveNameForEvent);
				this.AddProgress(this, e);
			}
		}

		// Token: 0x06000510 RID: 1296 RVA: 0x00021300 File Offset: 0x0001F500
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void AfterAddEntry(ZipEntry entry)
		{
			if (this.AddProgress != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				AddProgressEventArgs e = AddProgressEventArgs.AfterEntry(this.ArchiveNameForEvent, entry, this._entries.Count);
				this.AddProgress(this, e);
			}
		}

		// Token: 0x14000005 RID: 5
		// (add) Token: 0x06000511 RID: 1297 RVA: 0x00021350 File Offset: 0x0001F550
		// (remove) Token: 0x06000512 RID: 1298 RVA: 0x0002137C File Offset: 0x0001F57C
		public event EventHandler<ZipErrorEventArgs> ZipError
		{
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			add
			{
				this.ZipError = (EventHandler<ZipErrorEventArgs>)delegate0158.f0001a5(this.ZipError, value);
			}
			[MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)]
			remove
			{
				this.ZipError = (EventHandler<ZipErrorEventArgs>)delegate0158.f0001a6(this.ZipError, value);
			}
		}

		// Token: 0x06000513 RID: 1299 RVA: 0x000213A8 File Offset: 0x0001F5A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal bool OnZipErrorSaving(ZipEntry entry, Exception exc)
		{
			if (this.ZipError != null)
			{
				delegate0e6.f0000f4(this.f00004f);
				ZipErrorEventArgs zipErrorEventArgs = ZipErrorEventArgs.Saving(this.Name, entry, exc);
				this.ZipError(this, zipErrorEventArgs);
				if (zipErrorEventArgs.Cancel)
				{
					this._saveOperationCanceled = true;
				}
			}
			return this._saveOperationCanceled;
		}

		// Token: 0x06000514 RID: 1300 RVA: 0x00021404 File Offset: 0x0001F604
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractAll(string path)
		{
			this._InternalExtractAll(path, true);
		}

		// Token: 0x06000515 RID: 1301 RVA: 0x0002141C File Offset: 0x0001F61C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractAll(string path, ExtractExistingFileAction extractExistingFile)
		{
			this.ExtractExistingFile = extractExistingFile;
			this._InternalExtractAll(path, true);
		}

		// Token: 0x06000516 RID: 1302 RVA: 0x00021438 File Offset: 0x0001F638
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _InternalExtractAll(string path, bool overrideExtractExistingProperty)
		{
			bool flag = this.Verbose;
			this._inExtractAll = true;
			this.OnExtractAllStarted(path);
			int num = 0;
			foreach (ZipEntry zipEntry in this._entries.Values)
			{
				if (flag)
				{
					this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("\u009bz|H\u008b[\u0001J\u008c\t|\0%¯0Gí±BRPä:\u008d(\u008a[ó/ÅÃ\u0096f\a7"), new object[]
					{
						c0000c0.m00000f("ß` \u0001"),
						c0000c0.m00000f("Ün)\rÀ\0VS"),
						c0000c0.m00000f("Âh7\u0001"),
						c0000c0.m00000f("Ã`9\rÉ"),
						c0000c0.m00000f("Á`.\u000fÃ\r")
					});
					this.StatusMessageTextWriter.WriteLine(new string('-', 72));
					flag = false;
				}
				if (this.Verbose)
				{
					this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ê0aI\u0094[N\u0017×@b\u00010êm\u001c¥®Z\\kôg\u0088s\u009eW¥#\u0094Î\u008e`\u00171\\å"), new object[]
					{
						zipEntry.FileName,
						zipEntry.LastModified.ToString(c0000c0.m00000f("èx4\u001d\u008b$~\u001aÈ\u0016nd@­ \n¬ñ\u001d")),
						zipEntry.UncompressedSize,
						zipEntry.CompressionRatio,
						zipEntry.CompressedSize
					});
					if (!delegate0d2.f0000c3(zipEntry.Comment))
					{
						this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("±!\u000e\vË\u0004VYØHnW8ê"), zipEntry.Comment);
					}
				}
				zipEntry.Password = this._Password;
				this.OnExtractEntry(num, true, zipEntry, path);
				if (overrideExtractExistingProperty)
				{
					zipEntry.ExtractExistingFile = this.ExtractExistingFile;
				}
				zipEntry.Extract(path);
				num++;
				this.OnExtractEntry(num, false, zipEntry, path);
				if (this._extractOperationCanceled)
				{
					break;
				}
			}
			foreach (ZipEntry zipEntry2 in this._entries.Values)
			{
				if (zipEntry2.IsDirectory || zipEntry2.FileName.EndsWith(c0000c0.m00000f("¾")))
				{
					string fileOrDirectory = zipEntry2.FileName.StartsWith(c0000c0.m00000f("¾")) ? Path.Combine(path, zipEntry2.FileName.Substring(1)) : delegate0d0.f0000bb(path, zipEntry2.FileName);
					zipEntry2._SetTimes(fileOrDirectory, false);
				}
			}
			this.OnExtractAllCompleted(path);
		}

		// Token: 0x06000517 RID: 1303 RVA: 0x00021690 File Offset: 0x0001F890
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName)
		{
			return ZipFile.Read(fileName, null, ZipFile.DefaultEncoding);
		}

		// Token: 0x06000518 RID: 1304 RVA: 0x000216AC File Offset: 0x0001F8AC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, EventHandler<ReadProgressEventArgs> readProgress)
		{
			return ZipFile.Read(fileName, null, ZipFile.DefaultEncoding, readProgress);
		}

		// Token: 0x06000519 RID: 1305 RVA: 0x000216C8 File Offset: 0x0001F8C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, TextWriter statusMessageWriter)
		{
			return ZipFile.Read(fileName, statusMessageWriter, ZipFile.DefaultEncoding);
		}

		// Token: 0x0600051A RID: 1306 RVA: 0x000216E4 File Offset: 0x0001F8E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, TextWriter statusMessageWriter, EventHandler<ReadProgressEventArgs> readProgress)
		{
			return ZipFile.Read(fileName, statusMessageWriter, ZipFile.DefaultEncoding, readProgress);
		}

		// Token: 0x0600051B RID: 1307 RVA: 0x00021700 File Offset: 0x0001F900
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, Encoding encoding)
		{
			return ZipFile.Read(fileName, null, encoding);
		}

		// Token: 0x0600051C RID: 1308 RVA: 0x00021718 File Offset: 0x0001F918
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, Encoding encoding, EventHandler<ReadProgressEventArgs> readProgress)
		{
			return ZipFile.Read(fileName, null, encoding, readProgress);
		}

		// Token: 0x0600051D RID: 1309 RVA: 0x00021730 File Offset: 0x0001F930
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, TextWriter statusMessageWriter, Encoding encoding)
		{
			return ZipFile.Read(fileName, statusMessageWriter, encoding, null);
		}

		// Token: 0x0600051E RID: 1310 RVA: 0x00021748 File Offset: 0x0001F948
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(string fileName, TextWriter statusMessageWriter, Encoding encoding, EventHandler<ReadProgressEventArgs> readProgress)
		{
			ZipFile zipFile;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipFile._StatusMessageTextWriter = statusMessageWriter;
						zipFile._name = fileName;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_A6;
					case 2:
						if (readProgress != null)
						{
							zipFile.ReadProgress = readProgress;
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_A6;
					case 3:
						zipFile = new ZipFile();
						zipFile.ProvisionalAlternateEncoding = encoding;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_A6:
			if (zipFile.Verbose)
			{
				delegate0133.f00016f(zipFile._StatusMessageTextWriter, c0000c0.m00000f("ãd,\0Ï\aT\u0017Ê\0!A(ì}\u001a¸¬@"), fileName);
			}
			ZipFile.ReadIntoInstance(zipFile);
			zipFile._fileAlreadyExists = true;
			return zipFile;
		}

		// Token: 0x0600051F RID: 1311 RVA: 0x00021830 File Offset: 0x0001FA30
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream)
		{
			return ZipFile.Read(zipStream, null, ZipFile.DefaultEncoding);
		}

		// Token: 0x06000520 RID: 1312 RVA: 0x0002184C File Offset: 0x0001FA4C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, EventHandler<ReadProgressEventArgs> readProgress)
		{
			return ZipFile.Read(zipStream, null, ZipFile.DefaultEncoding, readProgress);
		}

		// Token: 0x06000521 RID: 1313 RVA: 0x00021868 File Offset: 0x0001FA68
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, TextWriter statusMessageWriter)
		{
			return ZipFile.Read(zipStream, statusMessageWriter, ZipFile.DefaultEncoding);
		}

		// Token: 0x06000522 RID: 1314 RVA: 0x00021884 File Offset: 0x0001FA84
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, TextWriter statusMessageWriter, EventHandler<ReadProgressEventArgs> readProgress)
		{
			return ZipFile.Read(zipStream, statusMessageWriter, ZipFile.DefaultEncoding, readProgress);
		}

		// Token: 0x06000523 RID: 1315 RVA: 0x000218A0 File Offset: 0x0001FAA0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, Encoding encoding)
		{
			return ZipFile.Read(zipStream, null, encoding);
		}

		// Token: 0x06000524 RID: 1316 RVA: 0x000218B8 File Offset: 0x0001FAB8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, Encoding encoding, EventHandler<ReadProgressEventArgs> readProgress)
		{
			return ZipFile.Read(zipStream, null, encoding, readProgress);
		}

		// Token: 0x06000525 RID: 1317 RVA: 0x000218D0 File Offset: 0x0001FAD0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, TextWriter statusMessageWriter, Encoding encoding)
		{
			return ZipFile.Read(zipStream, statusMessageWriter, encoding, null);
		}

		// Token: 0x06000526 RID: 1318 RVA: 0x000218E8 File Offset: 0x0001FAE8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(Stream zipStream, TextWriter statusMessageWriter, Encoding encoding, EventHandler<ReadProgressEventArgs> readProgress)
		{
			ZipFile zipFile;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipFile._provisionalAlternateEncoding = encoding;
						if (readProgress != null)
						{
							ZipFile zipFile2 = zipFile;
							zipFile2.ReadProgress = (EventHandler<ReadProgressEventArgs>)Delegate.Combine(zipFile2.ReadProgress, readProgress);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						goto IL_36;
					case 1:
						goto IL_FC;
					case 2:
						goto IL_36;
					case 3:
						if (zipStream == null)
						{
							goto Block_2;
						}
						zipFile = new ZipFile();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_36:
					zipFile._StatusMessageTextWriter = statusMessageWriter;
					zipFile._readstream = ((delegate0e3.f0000e5(zipStream) == 0L) ? zipStream : new OffsetStream(zipStream));
					zipFile._ReadStreamIsOurs = false;
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_2:
			throw new ArgumentException(c0000c0.m00000f("Åi(DÕ\u001dARÍ\u001fnA}ä9GôçN\bBª7Ã&Ò\u001b"), c0000c0.m00000f("ëh=7Ò\u001bVVÁ"));
			IL_FC:
			if (zipFile.Verbose)
			{
				delegate010c.f000138(zipFile._StatusMessageTextWriter, c0000c0.m00000f("ãd,\0Ï\aT\u0017Ê\0!A(ä9\u0015óã\u0003H\u0003ê"));
			}
			ZipFile.ReadIntoInstance(zipFile);
			return zipFile;
		}

		// Token: 0x06000527 RID: 1319 RVA: 0x00021A20 File Offset: 0x0001FC20
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(byte[] buffer)
		{
			return ZipFile.Read(buffer, null, ZipFile.DefaultEncoding);
		}

		// Token: 0x06000528 RID: 1320 RVA: 0x00021A3C File Offset: 0x0001FC3C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(byte[] buffer, TextWriter statusMessageWriter)
		{
			return ZipFile.Read(buffer, statusMessageWriter, ZipFile.DefaultEncoding);
		}

		// Token: 0x06000529 RID: 1321 RVA: 0x00021A58 File Offset: 0x0001FC58
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static ZipFile Read(byte[] buffer, TextWriter statusMessageWriter, Encoding encoding)
		{
			ZipFile zipFile;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						zipFile._provisionalAlternateEncoding = encoding;
						zipFile._readstream = new MemoryStream(buffer);
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_B0;
					case 2:
						zipFile._ReadStreamIsOurs = true;
						if (zipFile.Verbose)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_C5;
					case 3:
						zipFile = new ZipFile();
						zipFile._StatusMessageTextWriter = statusMessageWriter;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_B0:
			zipFile._StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ãd,\0Ï\aT\u0017Ê\0!A(õ4\u0013óÙ3H\u0003ê"));
			IL_C5:
			ZipFile.ReadIntoInstance(zipFile);
			return zipFile;
		}

		// Token: 0x0600052A RID: 1322 RVA: 0x00021B34 File Offset: 0x0001FD34
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static void ReadIntoInstance(ZipFile p0)
		{
			Stream readStream = p0.ReadStream;
			if (!delegate012e.f000167(readStream))
			{
				ZipFile.ReadIntoInstance_Orig(p0);
			}
			else
			{
				p0.OnReadStarted();
				uint num = ZipFile.VerifyBeginningOfZipFile(readStream);
				if (num != 101010256U)
				{
					int num2 = 0;
					bool flag = false;
					long num3 = delegate0e3.f0000e7(readStream) - 64L;
					long num4 = delegate0159.f0001a7(delegate0e3.f0000e7(readStream) - 16384L, 10L);
					do
					{
						delegate0149.f00018c(readStream, num3, SeekOrigin.Begin);
						long num5 = SharedUtilities.FindSignature(readStream, 101010256);
						if (num5 != -1L)
						{
							break;
						}
						num2++;
						num3 -= (long)(32 * (num2 + 1) * num2);
						if (num3 < 0L)
						{
							num3 = 0L;
						}
					}
					while (!flag && num3 > num4);
					if (flag)
					{
						p0._locEndOfCDS = delegate0e3.f0000e5(readStream) - 4L;
						byte[] array = new byte[16];
						delegate0144.f000185(readStream, array, 0, array.Length);
						p0._diskNumberWithCd = (uint)delegate015a.f0001a8(array, 2);
						if (p0._diskNumberWithCd == 65535U)
						{
							throw new ZipException(c0000c0.m00000f("Âq,\nÈ\fW\u0017Í\0-Daá(\u0014¶õ\a\u0012EäwÂ!ÛWª\u007fÙ\u008d\u0096+\u0002\u007f_¬­S\u0095Y\0­ûïJ\u0082T\u0086\u009d9¹¯A6¿\u0090î`\u0088\u0082'E\u0096®÷zð8\u0088¤{B\bAÒ\u009e­"));
						}
						p0._diskNumberWithCd += 1U;
						int p = 12;
						uint num6 = delegate015b.f0001a9(array, p);
						if (num6 == 4294967295U)
						{
							ZipFile.Zip64SeekToCentralDirectory(p0);
						}
						else
						{
							readStream.Seek((long)((ulong)num6), SeekOrigin.Begin);
						}
						ZipFile.ReadCentralDirectory(p0);
					}
					else
					{
						readStream.Seek(0L, SeekOrigin.Begin);
						ZipFile.ReadIntoInstance_Orig(p0);
					}
					p0._contentsChanged = false;
				}
			}
		}

		// Token: 0x0600052B RID: 1323 RVA: 0x00021CE4 File Offset: 0x0001FEE4
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static void Zip64SeekToCentralDirectory(ZipFile p0)
		{
			byte[] array;
			long p;
			Stream readStream;
			uint num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						p = BitConverter.ToInt64(array, 8);
						delegate0149.f00018c(readStream, p, SeekOrigin.Begin);
						num2 = (uint)SharedUtilities.ReadInt(readStream);
						if (num2 != 101075792U)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						delegate0144.f000185(readStream, array, 0, 8);
						long num3 = delegate0117.f000148(array, 0);
						array = new byte[num3];
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 1:
						goto IL_128;
					case 2:
						goto IL_36;
					case 3:
						readStream = p0.ReadStream;
						array = new byte[16];
						delegate0149.f00018c(readStream, -40L, SeekOrigin.Current);
						delegate0144.f000185(readStream, array, 0, 16);
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_36:
			throw new BadReadException(string.Format(c0000c0.m00000f("±!\u0017\rÖ/Z[ÉHt~mö)O¿¸N$L\u00a0:Þ:Ù\u0019¿cÍ\u0091Ó=\u001fz\u0014ã½\u001a¨\u0006\u0010áµ÷VÍ^\u009d\u0096~÷¦Zdì¿×@ÑÄse\u009dÍÒ.\u0082)\u0083¢z\u0006\\IËÛó~ir5\u0080rñ,Ä\u009fZL¿\u00a0EJ"), num2, delegate0e3.f0000e5(readStream)));
			IL_128:
			readStream.Read(array, 0, array.Length);
			p = delegate0117.f000148(array, 36);
			delegate0149.f00018c(readStream, p, SeekOrigin.Begin);
		}

		// Token: 0x0600052C RID: 1324 RVA: 0x00021E44 File Offset: 0x00020044
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static uint VerifyBeginningOfZipFile(Stream p0)
		{
			return (uint)SharedUtilities.ReadInt(p0);
		}

		// Token: 0x0600052D RID: 1325 RVA: 0x00021E5C File Offset: 0x0002005C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static void ReadCentralDirectory(ZipFile p0)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					ZipEntry zipEntry;
					switch (num)
					{
					case 0:
						p0.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ôo9\u0016ßIH\aÑ"), zipEntry.FileName);
						goto IL_D9;
					case 1:
						goto IL_11D;
					case 2:
					{
						bool flag;
						if (flag)
						{
							p0.UseZip64WhenSaving = Zip64Option.Always;
						}
						if (p0._locEndOfCDS > 0L)
						{
							delegate0149.f00018c(p0.ReadStream, p0._locEndOfCDS, SeekOrigin.Begin);
						}
						ZipFile.ReadCentralDirectoryFooter(p0);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						bool flag = false;
						goto IL_F8;
					}
					}
					break;
					IL_F8:
					if ((zipEntry = ZipEntry.ReadDirEntry(p0)) == null)
					{
						num = delegate0da.f0000d7(-2);
						continue;
					}
					zipEntry.ResetDirEntry();
					p0.OnReadEntry(true, null);
					if (p0.Verbose)
					{
						num = delegate0da.f0000d7(0);
						continue;
					}
					IL_D9:
					p0._entries.Add(zipEntry.FileName, zipEntry);
					if (zipEntry._InputUsesZip64)
					{
						bool flag = true;
						goto IL_F8;
					}
					goto IL_F8;
				}
			}
			IL_11D:
			if (p0.Verbose && !delegate0d2.f0000c3(p0.Comment))
			{
				delegate0133.f00016f(p0.StatusMessageTextWriter, c0000c0.m00000f("Ëh=DÀ\0_R\u008c1!Aeò#\u0013¬¢\u0015VP"), p0.Comment);
			}
			if (p0.Verbose)
			{
				delegate0133.f00016f(p0.StatusMessageTextWriter, c0000c0.m00000f("ãd,\0\u0086\0]\u0017×B3\fmù9\u0015ÿç\u001dH"), p0._entries.Count);
			}
			p0.OnReadCompleted();
		}

		// Token: 0x0600052E RID: 1326 RVA: 0x00022004 File Offset: 0x00020204
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static void ReadIntoInstance_Orig(ZipFile p0)
		{
			p0.OnReadStarted();
			p0._entries = new Dictionary<string, ZipEntry>();
			if (p0.Verbose)
			{
				if (p0.Name == null)
				{
					delegate010c.f000138(p0.StatusMessageTextWriter, c0000c0.m00000f("Ãd,\0Ï\aT\u0017Ö\u001b>\fnå\"\n¶ñ\u001a\u0014H¥w\u0083}\u0090"));
				}
				else
				{
					p0.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("Ãd,\0Ï\aT\u0017Ö\u001b>\fs§0I¸¬"), p0.Name);
				}
			}
			bool first = true;
			ZipContainer p = new ZipContainer(p0);
			ZipEntry zipEntry;
			while ((zipEntry = ZipEntry.ReadEntry(p, first)) != null)
			{
				if (p0.Verbose)
				{
					delegate0133.f00016f(p0.StatusMessageTextWriter, c0000c0.m00000f("±!6TÛ"), zipEntry.FileName);
				}
				p0._entries.Add(zipEntry.FileName, zipEntry);
				first = false;
			}
			ZipEntry zipEntry2;
			while ((zipEntry2 = ZipEntry.ReadDirEntry(p0)) != null)
			{
				ZipEntry zipEntry3 = p0._entries[zipEntry2.FileName];
				if (zipEntry3 != null)
				{
					zipEntry3._Comment = zipEntry2.Comment;
					if (zipEntry2.IsDirectory)
					{
						zipEntry3.MarkAsDirectory();
					}
				}
			}
			if (p0._locEndOfCDS > 0L)
			{
				delegate0149.f00018c(p0.ReadStream, p0._locEndOfCDS, SeekOrigin.Begin);
			}
			ZipFile.ReadCentralDirectoryFooter(p0);
			if (p0.Verbose && !delegate0d2.f0000c3(p0.Comment))
			{
				delegate0133.f00016f(p0.StatusMessageTextWriter, c0000c0.m00000f("Ëh=DÀ\0_R\u008c1!Aeò#\u0013¬¢\u0015VP"), p0.Comment);
			}
			p0.OnReadCompleted();
		}

		// Token: 0x0600052F RID: 1327 RVA: 0x00022164 File Offset: 0x00020364
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static void ReadCentralDirectoryFooter(ZipFile p0)
		{
			byte[] array;
			int num4;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						long num2;
						if (num2 < 44L)
						{
							goto Block_3;
						}
						int num3;
						p0._versionMadeBy = delegate015a.f0001a8(array, num3);
						num3 += 2;
						p0._versionNeededToExtract = delegate015a.f0001a8(array, num3);
						num3 += 2;
						p0._diskNumberWithCd = delegate015b.f0001a9(array, num3);
						num3 += 2;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_184;
					case 2:
					{
						long num2;
						array = new byte[num2 - 44L];
						Stream readStream;
						delegate0144.f000185(readStream, array, 0, array.Length);
						num4 = SharedUtilities.ReadSignature(readStream);
						if ((long)num4 != 117853008L)
						{
							goto Block_1;
						}
						array = new byte[16];
						delegate0144.f000185(readStream, array, 0, array.Length);
						num4 = SharedUtilities.ReadSignature(readStream);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					case 3:
					{
						Stream readStream = p0.ReadStream;
						num4 = SharedUtilities.ReadSignature(readStream);
						array = null;
						int num3 = 0;
						if ((long)num4 == 101075792L)
						{
							array = new byte[52];
							delegate0144.f000185(readStream, array, 0, array.Length);
							long num2 = delegate0117.f000148(array, 0);
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_184;
					}
					}
					break;
				}
			}
			Block_1:
			throw new ZipException(c0000c0.m00000f("Øo.\vÈ\u001aZDØ\u0017 X(ú(\u0013÷æ\u000f\u0012LäsÃsÊ\u001f»7âªæ+\u0003j/ýãT\u0082_\u0001èÑòKÇV\u0080\u0097k®î"));
			Block_3:
			throw new ZipException(c0000c0.m00000f("Ó`)Dâ\bGVÿ\u001b4I(þ#Gâê\vFw\u008dJ\u009bg\u009e4»yÌ\u0091×q\u0017\u000e\u0005êèC\u0084Q\u001f±»"));
			IL_184:
			if ((long)num4 != 101010256L)
			{
				Stream readStream;
				delegate0149.f00018c(readStream, -4L, SeekOrigin.Current);
				throw new BadReadException(delegate0d5.f0000c9(c0000c0.m00000f("Ëh=\"Ï\u0005V\r\u0096 +MlÔ(\tâð\u000f\ni­hÈ0Ê\u0018¬nþ\u008cÙiR8V¸ÏA\u0094\u001e\u001e¡òõXÖ@\u0086\u009d9ÿ»\u0005,\u0094Ýã9Ç\u0091'\0\u0082áåg¤%\u008f£(R\u0004S\u008eÁÛ)g"), num4, delegate0e3.f0000e5(readStream)));
			}
			array = new byte[16];
			delegate0144.f000185(p0.ReadStream, array, 0, array.Length);
			if (p0._diskNumberWithCd == 0U)
			{
				p0._diskNumberWithCd = (uint)delegate015a.f0001a8(array, 2);
			}
			ZipFile.ReadZipFileComment(p0);
		}

		// Token: 0x06000530 RID: 1328 RVA: 0x00022388 File Offset: 0x00020588
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static void ReadZipFileComment(ZipFile p0)
		{
			byte[] array;
			string @string;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						short num2;
						if (num2 > 0)
						{
							array = new byte[(int)num2];
							delegate0144.f000185(p0.ReadStream, array, 0, array.Length);
							num = delegate0da.f0000d7(-2);
							continue;
						}
						return;
					}
					case 1:
						goto IL_FB;
					case 2:
					{
						@string = ZipFile.DefaultEncoding.GetString(array, 0, array.Length);
						byte[] p = delegate0d7.f0000d2(ZipFile.DefaultEncoding, @string);
						if (ZipFile.BlocksAreEqual(array, p))
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_103;
					}
					case 3:
					{
						array = new byte[2];
						delegate0144.f000185(p0.ReadStream, array, 0, array.Length);
						short num2 = (short)((int)array[0] + (int)array[1] * 256);
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_FB:
			p0.Comment = @string;
			return;
			IL_103:
			Encoding p2 = (p0._provisionalAlternateEncoding.CodePage == 437) ? Encoding.UTF8 : p0._provisionalAlternateEncoding;
			p0.Comment = delegate0115.f000145(p2, array, 0, array.Length);
		}

		// Token: 0x06000531 RID: 1329 RVA: 0x000224D8 File Offset: 0x000206D8
		[MethodImpl(MethodImplOptions.NoInlining)]
		private static bool BlocksAreEqual(byte[] p0, byte[] p1)
		{
			for (;;)
			{
				switch (delegate0da.f0000d7(-3))
				{
				case 0:
					goto IL_54;
				case 1:
					goto IL_5B;
				case 2:
					goto IL_36;
				case 3:
					goto IL_45;
				}
			}
			IL_36:
			int num;
			if (p0[num] != p1[num])
			{
				return false;
			}
			goto IL_5B;
			IL_45:
			if (p0.Length != p1.Length)
			{
				return false;
			}
			IL_54:
			num = 0;
			goto IL_5F;
			IL_5B:
			num++;
			IL_5F:
			if (num >= p0.Length)
			{
				return true;
			}
			goto IL_36;
		}

		// Token: 0x06000532 RID: 1330 RVA: 0x00022550 File Offset: 0x00020750
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool IsZipFile(string fileName)
		{
			return ZipFile.IsZipFile(fileName, false);
		}

		// Token: 0x06000533 RID: 1331 RVA: 0x00022564 File Offset: 0x00020764
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool IsZipFile(string fileName, bool testExtract)
		{
			bool result = false;
			if (!delegate0d2.f0000c1(fileName))
			{
				return false;
			}
			FileStream stream = File.Open(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
			result = ZipFile.IsZipFile(stream, testExtract);
			return result;
		}

		// Token: 0x06000534 RID: 1332 RVA: 0x000225A0 File Offset: 0x000207A0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public static bool IsZipFile(Stream stream, bool testExtract)
		{
			bool result = false;
			if (!delegate012e.f000165(stream))
			{
				return false;
			}
			Stream @null = Stream.Null;
			ZipFile zipFile = ZipFile.Read(stream, null, delegate0c7.f000090(c0000c0.m00000f("ØC\0P\u0095^")));
			if (testExtract)
			{
				foreach (ZipEntry zipEntry in zipFile)
				{
					if (!zipEntry.IsDirectory)
					{
						zipEntry.Extract(@null);
					}
				}
			}
			result = true;
			return result;
		}

		// Token: 0x06000535 RID: 1333 RVA: 0x00022620 File Offset: 0x00020820
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Save()
		{
			bool flag = false;
			this._saveOperationCanceled = false;
			this._numberOfSegmentsForMostRecentSave = 0U;
			this.OnSaveStarted();
			if (this.WriteStream == null)
			{
				throw new BadStateException(c0000c0.m00000f("Èn8DÎ\bERÂU:\f{ç(\u0004ÿä\a\u0003IämÅ6Ì\u0012þc×ÃÅ|A/LìåEÐD\u0004¸»"));
			}
			if (this._name != null && this._name.EndsWith(c0000c0.m00000f("¿d5\u0001")) && !this._SavingSfx)
			{
				throw new BadStateException(c0000c0.m00000f("Èn8DÕ\u0019VTÅ\u0014'Il·,\t¶Ç6#\r¢ußsßW®{Ù\u008aØ=M#\u001c¸ëI\u009c[C"));
			}
			if (!this._contentsChanged)
			{
				this.OnSaveCompleted();
				if (this.Verbose)
				{
					this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ßnm\u0017Ç\u001fV\u0017Å\u0001nBmô(\u0014åã\u001c\u001f\u0003ê4\u0083"));
				}
			}
			else
			{
				this.Reset();
				if (this.Verbose)
				{
					this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("â`;\rÈ\u000e\u001d\u0019\u0082\\"));
				}
				if (this._entries.Count >= 65535 && this._zip64 == Zip64Option.f000059)
				{
					throw new ZipException(c0000c0.m00000f("Åi(DÈ\u001c^UÉ\0nCn·(\tâð\a\u0003^äsÞs\u0088Bë$\u008dÃÙo\u0017-\u001eýìT\u0095LCèÖôWÑ\\\u0090\u009dk÷³Pb¸\u008cðwÇ\u0084;EÒÛåk\u008a%\u0090û<5\u0014MÑ¨âgsu&Émíc\u0084\u0082S\tüØ\u0012Y \u009d$±'_C\u00a0®}Gô!$\nÕ\u001dRYÏ\u0017`"));
				}
				int num = 0;
				ICollection<ZipEntry> collection = this.SortEntriesBeforeSaving ? this.EntriesSorted : this.Entries;
				foreach (ZipEntry zipEntry in collection)
				{
					this.OnSaveEntry(num, zipEntry, true);
					zipEntry.Write(this.WriteStream);
					if (this._saveOperationCanceled)
					{
						break;
					}
					num++;
					this.OnSaveEntry(num, zipEntry, false);
					if (this._saveOperationCanceled)
					{
						break;
					}
					if (zipEntry.IncludedInMostRecentSave)
					{
						flag |= zipEntry.OutputUsedZip64.Value;
					}
				}
				if (!this._saveOperationCanceled)
				{
					ZipSegmentedStream zipSegmentedStream = this.WriteStream as ZipSegmentedStream;
					this._numberOfSegmentsForMostRecentSave = ((zipSegmentedStream != null) ? zipSegmentedStream.CurrentSegment : 1U);
					bool flag2 = ZipOutput.WriteCentralDirectoryStructure(this.WriteStream, collection, this._numberOfSegmentsForMostRecentSave, this._zip64, this.Comment, this.ProvisionalAlternateEncoding);
					this.OnSaveEvent(ZipProgressEventType.Saving_AfterSaveTempArchive);
					this._hasBeenSaved = true;
					this._contentsChanged = false;
					flag = (flag || flag2);
					this._OutputUsesZip64 = new bool?(flag);
					if (this._name != null && (this._temporaryFileName != null || zipSegmentedStream != null))
					{
						this.WriteStream.Close();
						this.WriteStream.Dispose();
						if (this._saveOperationCanceled)
						{
							return;
						}
						if (this._fileAlreadyExists && this._readstream != null)
						{
							this._readstream.Close();
							this._readstream = null;
							foreach (ZipEntry zipEntry2 in collection)
							{
								zipEntry2._archiveStream = null;
							}
						}
						if (this._fileAlreadyExists)
						{
							delegate0d3.f0000c5(this._name);
						}
						this.OnSaveEvent(ZipProgressEventType.Saving_BeforeRenameTempArchive);
						File.Move((zipSegmentedStream != null) ? zipSegmentedStream.CurrentName : this._temporaryFileName, this._name);
						this.OnSaveEvent(ZipProgressEventType.Saving_AfterRenameTempArchive);
						this._fileAlreadyExists = true;
					}
					this.NotifyEntriesSaveComplete(collection);
					this.OnSaveCompleted();
					this._JustSaved = true;
				}
			}
		}

		// Token: 0x06000536 RID: 1334 RVA: 0x00022958 File Offset: 0x00020B58
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void NotifyEntriesSaveComplete(ICollection<ZipEntry> p0)
		{
			foreach (ZipEntry zipEntry in p0)
			{
				zipEntry.NotifySaveComplete();
			}
		}

		// Token: 0x06000537 RID: 1335 RVA: 0x00022988 File Offset: 0x00020B88
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void RemoveTempFile()
		{
			if (delegate0d2.f0000c1(this._temporaryFileName))
			{
				delegate0d3.f0000c5(this._temporaryFileName);
			}
		}

		// Token: 0x06000538 RID: 1336 RVA: 0x000229BC File Offset: 0x00020BBC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void CleanupAfterSaveOperation()
		{
			if (this._name != null)
			{
				if (this._writestream != null)
				{
					this._writestream.Dispose();
				}
				this._writestream = null;
				if (this._temporaryFileName != null)
				{
					this.RemoveTempFile();
					this._temporaryFileName = null;
				}
			}
		}

		// Token: 0x06000539 RID: 1337 RVA: 0x00022A10 File Offset: 0x00020C10
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Save(string fileName)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_A8;
					case 1:
						goto IL_DC;
					case 2:
						goto IL_36;
					case 3:
						if (this._name == null)
						{
							this._writestream = null;
							num = delegate0da.f0000d7(0);
							continue;
						}
						goto IL_A8;
					}
					break;
					IL_A8:
					this._name = fileName;
					if (delegate0d2.f0000c2(this._name))
					{
						num = delegate0da.f0000d7(-2);
					}
					else
					{
						this._contentsChanged = true;
						num = delegate0da.f0000d7(-1);
					}
				}
			}
			IL_36:
			throw new ZipException(c0000c0.m00000f("Ó`)Dâ\0ARÏ\u0006!^q"), new ArgumentException(c0000c0.m00000f("Åi,\u0010\u0086\aRZÉR=\\mô$\u0001ÿç\u001dFLª:È+×\u0004ª~Ö\u0084\u0096y^8\tûùO\u0082GCèÅ÷\\ÃF\u0091Øj§¥V\u007fª\u009c¾qÇ\u0096:L\u0097à÷cµb"), c0000c0.m00000f("÷h!\u0001è\b^R")));
			IL_DC:
			this._fileAlreadyExists = delegate0d2.f0000c1(this._name);
			this.Save();
		}

		// Token: 0x0600053A RID: 1338 RVA: 0x00022B18 File Offset: 0x00020D18
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Save(Stream outputStream)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_77;
					case 1:
						goto IL_A2;
					case 2:
						this._contentsChanged = true;
						this._fileAlreadyExists = false;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						if (!outputStream.CanWrite)
						{
							goto Block_1;
						}
						goto IL_77;
					}
					break;
					IL_77:
					this._name = null;
					this._writestream = new CountingStream(outputStream);
					num = delegate0da.f0000d7(-2);
				}
			}
			Block_1:
			throw new ArgumentException(c0000c0.m00000f("Åi(DÉ\u001cGGÙ\u0006\u001dXzò,\n¶ï\u001b\u0015YäxÈsßW©eÑ\u0097×\u007f[/LëùR\u0095_\0æ"));
			IL_A2:
			this.Save();
		}

		// Token: 0x0600053B RID: 1339 RVA: 0x00022BD0 File Offset: 0x00020DD0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddSelectedFiles(string selectionCriteria)
		{
			this.AddSelectedFiles(selectionCriteria, c0000c0.m00000f("¿"), null, false);
		}

		// Token: 0x0600053C RID: 1340 RVA: 0x00022BF0 File Offset: 0x00020DF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddSelectedFiles(string selectionCriteria, bool recurseDirectories)
		{
			this.AddSelectedFiles(selectionCriteria, c0000c0.m00000f("¿"), null, recurseDirectories);
		}

		// Token: 0x0600053D RID: 1341 RVA: 0x00022C10 File Offset: 0x00020E10
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk)
		{
			this.AddSelectedFiles(selectionCriteria, directoryOnDisk, null, false);
		}

		// Token: 0x0600053E RID: 1342 RVA: 0x00022C28 File Offset: 0x00020E28
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, bool recurseDirectories)
		{
			this.AddSelectedFiles(selectionCriteria, directoryOnDisk, null, recurseDirectories);
		}

		// Token: 0x0600053F RID: 1343 RVA: 0x00022C40 File Offset: 0x00020E40
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive)
		{
			this.AddSelectedFiles(selectionCriteria, directoryOnDisk, directoryPathInArchive, false);
		}

		// Token: 0x06000540 RID: 1344 RVA: 0x00022C58 File Offset: 0x00020E58
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories)
		{
			this._AddOrUpdateSelectedFiles(selectionCriteria, directoryOnDisk, directoryPathInArchive, recurseDirectories, false);
		}

		// Token: 0x06000541 RID: 1345 RVA: 0x00022C74 File Offset: 0x00020E74
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void UpdateSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories)
		{
			this._AddOrUpdateSelectedFiles(selectionCriteria, directoryOnDisk, directoryPathInArchive, recurseDirectories, true);
		}

		// Token: 0x06000542 RID: 1346 RVA: 0x00022C90 File Offset: 0x00020E90
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _AddOrUpdateSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories, bool wantUpdate)
		{
			if (directoryOnDisk == null && delegate0d2.f0000c2(selectionCriteria))
			{
				directoryOnDisk = selectionCriteria;
				selectionCriteria = c0000c0.m00000f("»/g");
			}
			else if (string.IsNullOrEmpty(directoryOnDisk))
			{
				directoryOnDisk = c0000c0.m00000f("¿");
			}
			while (directoryOnDisk.EndsWith(c0000c0.m00000f("Í")))
			{
				directoryOnDisk = directoryOnDisk.Substring(0, directoryOnDisk.Length - 1);
			}
			if (this.Verbose)
			{
				this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("ðe)\rÈ\u000e\u0013DÉ\u001e+O|þ\"\t¶¥\u0015VPã:Ë!Ñ\u001aþsÑ\u0091\u0096:L{\u0011¿£\u000eÞ"), selectionCriteria, directoryOnDisk);
			}
			FileSelector fileSelector = new FileSelector(selectionCriteria, this.AddDirectoryWillTraverseReparsePoints);
			ReadOnlyCollection<string> readOnlyCollection = fileSelector.SelectFiles(directoryOnDisk, recurseDirectories);
			if (this.Verbose)
			{
				this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("÷n8\nÂIH\aÑR(Edò>I¸¬"), readOnlyCollection.Count);
			}
			this.OnAddStarted();
			AddOrUpdateAction action = wantUpdate ? AddOrUpdateAction.AddOrUpdate : AddOrUpdateAction.AddOnly;
			string oldValue = directoryOnDisk.ToLower();
			foreach (string text in readOnlyCollection)
			{
				string text2 = (directoryPathInArchive == null) ? null : delegate0e4.f0000ed(text).ToLower().Replace(oldValue, directoryPathInArchive);
				if (delegate0d2.f0000c1(text))
				{
					if (wantUpdate)
					{
						this.UpdateFile(text, text2);
					}
					else
					{
						this.AddFile(text, text2);
					}
				}
				else
				{
					this.AddOrUpdateDirectoryImpl(text, text2, action, false, 0);
				}
			}
			this.OnAddCompleted();
		}

		// Token: 0x06000543 RID: 1347 RVA: 0x00022DEC File Offset: 0x00020FEC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ICollection<ZipEntry> SelectEntries(string selectionCriteria)
		{
			FileSelector fileSelector = new FileSelector(selectionCriteria, this.AddDirectoryWillTraverseReparsePoints);
			return fileSelector.SelectEntries(this);
		}

		// Token: 0x06000544 RID: 1348 RVA: 0x00022E10 File Offset: 0x00021010
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ICollection<ZipEntry> SelectEntries(string selectionCriteria, string directoryPathInArchive)
		{
			FileSelector fileSelector = new FileSelector(selectionCriteria, this.AddDirectoryWillTraverseReparsePoints);
			return fileSelector.SelectEntries(this, directoryPathInArchive);
		}

		// Token: 0x06000545 RID: 1349 RVA: 0x00022E34 File Offset: 0x00021034
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int RemoveSelectedEntries(string selectionCriteria)
		{
			ICollection<ZipEntry> collection = this.SelectEntries(selectionCriteria);
			this.RemoveEntries(collection);
			return collection.Count;
		}

		// Token: 0x06000546 RID: 1350 RVA: 0x00022E58 File Offset: 0x00021058
		[MethodImpl(MethodImplOptions.NoInlining)]
		public int RemoveSelectedEntries(string selectionCriteria, string directoryPathInArchive)
		{
			ICollection<ZipEntry> collection = this.SelectEntries(selectionCriteria, directoryPathInArchive);
			this.RemoveEntries(collection);
			return collection.Count;
		}

		// Token: 0x06000547 RID: 1351 RVA: 0x00022E7C File Offset: 0x0002107C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractSelectedEntries(string selectionCriteria)
		{
			foreach (ZipEntry zipEntry in this.SelectEntries(selectionCriteria))
			{
				zipEntry.Password = this._Password;
				zipEntry.Extract();
			}
		}

		// Token: 0x06000548 RID: 1352 RVA: 0x00022EBC File Offset: 0x000210BC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractSelectedEntries(string selectionCriteria, ExtractExistingFileAction extractExistingFile)
		{
			foreach (ZipEntry zipEntry in this.SelectEntries(selectionCriteria))
			{
				zipEntry.Password = this._Password;
				zipEntry.Extract(extractExistingFile);
			}
		}

		// Token: 0x06000549 RID: 1353 RVA: 0x00022EFC File Offset: 0x000210FC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractSelectedEntries(string selectionCriteria, string directoryPathInArchive)
		{
			foreach (ZipEntry zipEntry in this.SelectEntries(selectionCriteria, directoryPathInArchive))
			{
				zipEntry.Password = this._Password;
				zipEntry.Extract();
			}
		}

		// Token: 0x0600054A RID: 1354 RVA: 0x00022F3C File Offset: 0x0002113C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractSelectedEntries(string selectionCriteria, string directoryInArchive, string extractDirectory)
		{
			foreach (ZipEntry zipEntry in this.SelectEntries(selectionCriteria, directoryInArchive))
			{
				zipEntry.Password = this._Password;
				zipEntry.Extract(extractDirectory);
			}
		}

		// Token: 0x0600054B RID: 1355 RVA: 0x00022F80 File Offset: 0x00021180
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void ExtractSelectedEntries(string selectionCriteria, string directoryPathInArchive, string extractDirectory, ExtractExistingFileAction extractExistingFile)
		{
			foreach (ZipEntry zipEntry in this.SelectEntries(selectionCriteria, directoryPathInArchive))
			{
				zipEntry.Password = this._Password;
				zipEntry.Extract(extractDirectory, extractExistingFile);
			}
		}

		// Token: 0x0600054C RID: 1356 RVA: 0x00022FC4 File Offset: 0x000211C4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void SaveSelfExtractor(string exeToGenerate, SelfExtractorFlavor flavor)
		{
			this.SaveSelfExtractor(exeToGenerate, new SelfExtractorSaveOptions
			{
				Flavor = flavor
			});
		}

		// Token: 0x0600054D RID: 1357 RVA: 0x00022FE8 File Offset: 0x000211E8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void SaveSelfExtractor(string exeToGenerate, SelfExtractorSaveOptions options)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._name = exeToGenerate;
						if (delegate0d2.f0000c2(this._name))
						{
							goto Block_2;
						}
						goto IL_36;
					case 1:
						goto IL_E9;
					case 2:
						goto IL_36;
					case 3:
						if (this._name == null)
						{
							this._writestream = null;
						}
						this._SavingSfx = true;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_36:
					this._contentsChanged = true;
					this._fileAlreadyExists = delegate0d2.f0000c1(this._name);
					this._SaveSfxStub(exeToGenerate, options);
					num = delegate0da.f0000d7(-1);
				}
			}
			Block_2:
			throw new ZipException(c0000c0.m00000f("Ó`)Dâ\0ARÏ\u0006!^q"), new ArgumentException(c0000c0.m00000f("Åi,\u0010\u0086\aRZÉR=\\mô$\u0001ÿç\u001dFLª:È+×\u0004ª~Ö\u0084\u0096y^8\tûùO\u0082GCèÅ÷\\ÃF\u0091Øj§¥V\u007fª\u009c¾qÇ\u0096:L\u0097à÷cµb"), c0000c0.m00000f("ôy(0É.VYÉ\0/Xm")));
			IL_E9:
			this.Save();
			this._SavingSfx = false;
		}

		// Token: 0x0600054E RID: 1358 RVA: 0x000230EC File Offset: 0x000212EC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void ExtractResourceToFile(Assembly p0, string resourceName, string filename)
		{
			byte[] array = new byte[1024];
			Stream stream = delegate015c.f0001aa(p0, resourceName);
			if (stream == null)
			{
				throw new ZipException(delegate0101.f000127(c0000c0.m00000f("üh>\u0017Ï\aT\u0017Þ\u0017=C}å.\u0002¶¥\u0015VPã"), resourceName));
			}
			FileStream p = File.OpenWrite(filename);
			int num;
			do
			{
				num = delegate0144.f000185(stream, array, 0, array.Length);
				delegate0109.f000133(p, array, 0, num);
			}
			while (num > 0);
		}

		// Token: 0x0600054F RID: 1359 RVA: 0x00023170 File Offset: 0x00021370
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _SaveSfxStub(string exeToGenerate, SelfExtractorSaveOptions options)
		{
			string text = null;
			if (delegate0d2.f0000c1(exeToGenerate) && this.Verbose)
			{
				this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("Åi(DÃ\u0011ZDØ\u001b K(ñ$\vó¢F\u001d\u001d¹3\u008d$×\u001b²7Ú\u0086\u0096rA/\u001eïÿI\u0084J\b¦»"), exeToGenerate);
			}
			if (!exeToGenerate.EndsWith(c0000c0.m00000f("¿d5\u0001")) && this.Verbose)
			{
				this.StatusMessageTextWriter.WriteLine(c0000c0.m00000f("Æ`?\nÏ\aT\r\u008c&&I(ð(\tóð\u000f\u0012H\u00a0:Þ6Ò\u0011órÀ\u0097Ä|T>\u0005öê\0\u0096W\u0001­µìPÎYÔ\u0096v£à]wº\u0080¾q\u0089Ð}E\u008aë¶k¨8\u0085£{\v\u0013F\u0091"));
			}
			text = ZipFile.GenerateTempPathname(c0000c0.m00000f("ôy("));
			Assembly p = delegate015d.f0001ac(delegate013e.f00017c(typeof(ZipFile).TypeHandle));
			CSharpCodeProvider p2 = new CSharpCodeProvider();
			ZipFile.ExtractorSettings extractorSettings = null;
			foreach (ZipFile.ExtractorSettings extractorSettings2 in ZipFile.SettingsList)
			{
				if (extractorSettings2.Flavor == options.Flavor)
				{
					extractorSettings = extractorSettings2;
					break;
				}
			}
			if (extractorSettings == null)
			{
				throw new BadStateException(delegate0101.f000127(c0000c0.m00000f("Æi$\bÃI@VÚ\u001b K(öm4óî\bKh¼nß2Ý\u0003·yßÃìtGfLÛìN\u009eQ\u0019èóòWÆ\u0015\u0080\u0090x£àSz­\u0093ñbÇØ(\u0010\u008f§©"), options.Flavor));
			}
			CompilerParameters compilerParameters = new CompilerParameters();
			delegate011f.f000153(delegate015e.f0001ad(compilerParameters), delegate0cd.f0000af(p));
			if (extractorSettings.ReferencedAssemblies != null)
			{
				foreach (string p3 in extractorSettings.ReferencedAssemblies)
				{
					delegate011f.f000153(delegate015e.f0001ad(compilerParameters), p3);
				}
			}
			compilerParameters.GenerateInMemory = false;
			delegate015f.f0001b0(compilerParameters, true);
			delegate015f.f0001b1(compilerParameters, false);
			delegate010c.f000139(compilerParameters, c0000c0.m00000f(""));
			Assembly p4 = delegate0155.f0001a1();
			StringBuilder stringBuilder = new StringBuilder();
			string text2 = ZipFile.GenerateTempPathname(c0000c0.m00000f("òr"));
			ZipFile zipFile = ZipFile.Read(delegate015c.f0001aa(p4, c0000c0.m00000f("Øn#\rÅGi^Ü\\\u001cI{ø8\u0015õç\u001dHw­jÝ6Ú%»d×\u0096Ä~R9BâäP")));
			string text3 = ZipFile.GenerateTempPathname(c0000c0.m00000f("ål="));
			if (delegate0d2.f0000c3(options.IconFile))
			{
				delegate0d9.f0000d6(text3);
				ZipEntry zipEntry = zipFile[c0000c0.m00000f("ëh=\u0014Ã\ru^À\u0017`Ekø")];
				if ((zipEntry.Attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
				{
					zipEntry.Attributes ^= FileAttributes.ReadOnly;
				}
				zipEntry.Extract(text3);
				string p5 = delegate0d0.f0000bb(text3, c0000c0.m00000f("ëh=\u0014Ã\ru^À\u0017`Ekø"));
				delegate010c f = delegate010c.f000139;
				CompilerParameters compilerParameters2 = compilerParameters;
				f(compilerParameters2, compilerParameters2.CompilerOptions + delegate0101.f000127(c0000c0.m00000f("¾v$\n\u0095[ZTÃ\u001ct\u000es§0E"), p5));
			}
			else
			{
				CompilerParameters compilerParameters3 = compilerParameters;
				compilerParameters3.CompilerOptions += delegate0101.f000127(c0000c0.m00000f("¾v$\n\u0095[ZTÃ\u001ct\u000es§0E"), options.IconFile);
			}
			compilerParameters.OutputAssembly = text;
			if (options.Flavor == SelfExtractorFlavor.WinFormsApplication)
			{
				delegate010c f2 = delegate010c.f000139;
				CompilerParameters compilerParameters4 = compilerParameters;
				f2(compilerParameters4, compilerParameters4.CompilerOptions + c0000c0.m00000f("±.9\u0005Ô\u000eVC\u0096\u0005'Bmï("));
			}
			if (compilerParameters.CompilerOptions == c0000c0.m00000f(""))
			{
				delegate010c.f000139(compilerParameters, null);
			}
			if (extractorSettings.CopyThroughResources != null && extractorSettings.CopyThroughResources.Count != 0)
			{
				if (!delegate0d2.f0000c2(text3))
				{
					delegate0d9.f0000d6(text3);
				}
				foreach (string text4 in extractorSettings.CopyThroughResources)
				{
					string text5 = delegate0d0.f0000bb(text3, text4);
					this.ExtractResourceToFile(p4, text4, text5);
					delegate011f.f000153(delegate015e.f0001ae(compilerParameters), text5);
				}
			}
			compilerParameters.EmbeddedResources.Add(delegate0cd.f0000af(p));
			delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(stringBuilder, delegate0ff.f000123(c0000c0.m00000f("¾.m"), delegate0e4.f0000f0(text2), c0000c0.m00000f("\u009b"))), c0000c0.m00000f("¾.mI\u008bD\u001e\u001a\u0081_c\u0001%º`J»¯CK\0é7\u0080~\u0093Zó:\u0095Î\u009b0\u001agAµ\u00a0\rÝ\u0013@å¸¶\u0014\u008f?Û×\u0013")), c0000c0.m00000f("¾.m0Î\0@\u0017ÿ4\u0016\f{ø8\u0015õçN\0D¨\u007f\u008d$ß\u0004þpÝ\u008dÓoV>\tü­B\u0089\u001e)§áÕ\\Öo\u009d\u00889")), delegate0cd.f0000ab(ZipFile.LibraryVersion)), c0000c0.m00000f("\u009b.bD\u0086I\u0013\u0017\u008cRn\fiãm")), delegate0cf.f0000b8().ToString(c0000c0.m00000f("èx4\u001d\u0086$~záR*H(·\u0005/¬ï\u0003\\^·"))), c0000c0.m00000f("\u009b.bn\u0089F\u0013\u001a\u0081_c\u0001%º`J»¯CK\0é7\u0080~\u0093Zó:\u0095Î\u009b0\u001agAµ\u00a0\rÝ\u0013@å¸¶\u0014\u008f\u0018ÙÕ4ÝÊ?"));
			if (!delegate0d2.f0000c3(options.Description))
			{
				delegate0f7.f000110(stringBuilder, delegate0ff.f000123(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÙI\u0084R\bà·"), options.Description.Replace(c0000c0.m00000f("³"), c0000c0.m00000f("")), c0000c0.m00000f("³(\u0010n")));
			}
			else
			{
				stringBuilder.Append(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÙI\u0084R\bà·ßVÖ{\u0091\u008cC¾°\u0015E\u008a½¾Q\u0095\u0093;I\u0084ë´'\u008dF"));
			}
			if (!string.IsNullOrEmpty(options.ProductVersion))
			{
				delegate0f7.f000110(stringBuilder, delegate0ff.f000123(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÄN\u0096Q\u001f¥ôïPÍ[\u0095\u0094O²²F\u007f£\u008b¶2"), options.ProductVersion.Replace(c0000c0.m00000f("³"), c0000c0.m00000f("")), c0000c0.m00000f("³(\u0010n")));
			}
			string text6 = c0000c0.m00000f("Ôy9\u0016Ç\nGXÞHnogç4\u0015ÿå\u0006\u0012\rm:é:Ð\u0018þTÐ\u008aÓnVj^¨½\u0018Ü\u001e_ø¥¢");
			if (!delegate0d2.f0000c3(options.Copyright))
			{
				text6 = delegate0ff.f000123(text6, c0000c0.m00000f("Òn#\u0010Ã\aGD\u0096R"), options.Copyright.Replace(c0000c0.m00000f("³"), c0000c0.m00000f("")));
			}
			if (!string.IsNullOrEmpty(options.ProductName))
			{
				delegate0f7.f000110(delegate0f7.f000110(delegate0f7.f000110(stringBuilder, c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÝR\u009fZ\u0018«á³\u001b")), options.ProductName.Replace(c0000c0.m00000f("³"), c0000c0.m00000f(""))), c0000c0.m00000f("³(\u0010n"));
			}
			else
			{
				stringBuilder.Append(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÝR\u009fZ\u0018«á³\u001bæZ\u0080¶|£\u009a\\fîÌÃ\u001a"));
			}
			stringBuilder.Append(delegate0ff.f000123(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÎO\u0080G\u001f¡òóM\u008a\u0017"), text6, c0000c0.m00000f("³(\u0010n"))).Append(delegate0101.f000127(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áÛE\u0082M\u0004§û³\u001bÙ\u0005\u0089Ú0\u008aÊ"), delegate0cd.f0000ab(ZipFile.LibraryVersion)));
			if (delegate0160.f0001b2(options.FileVersion, null))
			{
				delegate0f7.f000110(stringBuilder, delegate0101.f000127(c0000c0.m00000f("Ê`>\u0017Ã\u0004Q[ÕHn\u007fqä9\u0002û¬<\u0003K¨\u007fÎ'×\u0018°9ù\u0090ÅxZ(\0áËI\u009c[;­çèPÍ[ÜÚbç½\u0017?\u0091ï"), delegate0cd.f0000ab(options.FileVersion)));
			}
			stringBuilder.Append(c0000c0.m00000f("\u009b\vG"));
			string text7 = options.DefaultExtractDirectory;
			if (text7 != null)
			{
				text7 = text7.Replace(c0000c0.m00000f("³"), c0000c0.m00000f("")).Replace(c0000c0.m00000f("Í"), c0000c0.m00000f("Í]"));
			}
			string text8 = options.PostExtractCommandLine;
			if (text8 != null)
			{
				text8 = text8.Replace(c0000c0.m00000f("Í"), c0000c0.m00000f("Í]"));
				text8 = text8.Replace(c0000c0.m00000f("³"), c0000c0.m00000f("Í#"));
			}
			foreach (string text9 in extractorSettings.ResourcesToCompile)
			{
				Stream stream = zipFile[text9].OpenReader();
				if (stream == null)
				{
					throw new ZipException(delegate0101.f000127(c0000c0.m00000f("üh>\u0017Ï\aT\u0017Þ\u0017=C}å.\u0002¶¥\u0015VPã"), text9));
				}
				StreamReader streamReader = new StreamReader(stream);
				while (streamReader.Peek() >= 0)
				{
					string text10 = delegate0cd.f0000b0(streamReader);
					if (text7 != null)
					{
						text10 = text10.Replace(c0000c0.m00000f("ÑA\b<ò;rtø>\u0001oIÃ\u0004(Ø"), text7);
					}
					text10 = text10.Replace(c0000c0.m00000f("ÑA\u001f!ë&eró3\bxMÅ\u0012\"ÎÇ-3y\u0081"), options.RemoveUnpackedFilesAfterExecute.ToString());
					text10 = text10.Replace(c0000c0.m00000f("ÑA\u001c1ï,g"), options.Quiet.ToString());
					text10 = text10.Replace(c0000c0.m00000f("ÑA\b<ò;rtø-\vtAÄ\u0019.ØÅ1 d\u0088_"), ((int)options.ExtractExistingFile).ToString());
					if (text8 != null)
					{
						text10 = text10.Replace(c0000c0.m00000f("ÑA\u001d+õ=lbâ\"\u000foCÈ\u000e*ÒÝ\"/c\u0081"), text8);
					}
					stringBuilder.Append(text10).Append(c0000c0.m00000f("\u009b"));
				}
				stringBuilder.Append(c0000c0.m00000f("\u009b\v"));
			}
			string text11 = stringBuilder.ToString();
			CompilerResults compilerResults = delegate0161.f0001b3(p2, compilerParameters, new string[]
			{
				text11
			});
			if (compilerResults == null)
			{
				throw new SfxGenerationException(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013TÃ\u001f>Edòm\u0013þçN\u0003U°hÌ0Ê\u001e±y\u0098\u008fÙz^)M"));
			}
			if (this.Verbose)
			{
				StringEnumerator stringEnumerator = delegate0162.f0001b4(delegate015e.f0001af(compilerResults));
				while (stringEnumerator.MoveNext())
				{
					string value = delegate0cd.f0000b1(stringEnumerator);
					this.StatusMessageTextWriter.WriteLine(value);
				}
			}
			if (compilerResults.Errors.Count != 0)
			{
				TextWriter textWriter = new StreamWriter(text2);
				delegate010c.f00013a(textWriter, text11);
				delegate010c.f00013a(textWriter, c0000c0.m00000f("\u009b\vGK\u0089I\u001e\u001a\u0081_c\u0001%º`J»¯CK\0é7\u0080~\u0093Zó:\u0095Î\u009b0\u001agAµ\u00a0\rÝ\u0013@å¸¶\u0014\u008f\u0018ÙÕ4úí\u0018;áÈ³=ÊÝ~\rß£»#ýaÍà%h"));
				delegate010c.f00013a(textWriter, c0000c0.m00000f("¾.m!Ô\u001b\\EßR*Yzþ#\0¶á\u0001\v]­vÌ'×\u0018°-\u0098é\u00992="));
				string text12 = delegate0e4.f0000f0(text2);
				IEnumerator enumerator4 = delegate0164.f0001b6(delegate0163.f0001b5(compilerResults));
				while (enumerator4.MoveNext())
				{
					CompilerError p6 = (CompilerError)delegate0f6.f00010d(enumerator4);
					textWriter.Write(string.Format(c0000c0.m00000f("¾.mD\u0086\u0012\u0003J\u0084\t\u007fQ$ì\u007f\u001a¿¸N\u001d\u001e¹:ÖgÃMþl\u008d\u009e¼2\u0018@"), new object[]
					{
						text12,
						delegate0fc.f00011a(p6),
						delegate0fc.f00011b(p6),
						delegate012e.f000168(p6) ? c0000c0.m00000f("Æ`?\nÏ\aT") : c0000c0.m00000f("ôs?\vÔ"),
						delegate0cd.f0000b2(p6),
						delegate0cd.f0000b3(p6)
					}));
				}
				throw new SfxGenerationException(string.Format(c0000c0.m00000f("Ôs?\vÔ\u001a\u0013TÃ\u001f>Edþ#\0¶ö\u0006\u0003\r¡bÙ!ß\u0014ª~×\u008d\u0096qX-\u0005û¬\0ÐE]µ"), text2));
			}
			this.OnSaveEvent(ZipProgressEventType.Saving_AfterCompileSelfExtractor);
			Stream p7 = delegate0135.f000171(text);
			byte[] array = new byte[4000];
			int num;
			do
			{
				num = delegate0144.f000185(p7, array, 0, array.Length);
				if (num != 0)
				{
					this.WriteStream.Write(array, 0, num);
				}
			}
			while (num != 0);
			this.OnSaveEvent(ZipProgressEventType.Saving_AfterSaveTempArchive);
		}

		// Token: 0x06000550 RID: 1360 RVA: 0x00023CC4 File Offset: 0x00021EC4
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal static string GenerateTempPathname(string extension)
		{
			string text;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int num2;
					string path;
					string text2;
					switch (num)
					{
					case 0:
					{
						string tempPath = Path.GetTempPath();
						num2 = 0;
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
					{
						string tempPath;
						text = Path.Combine(tempPath, path);
						if (!delegate0d2.f0000c1(text) && !delegate0d2.f0000c2(text))
						{
							return text;
						}
						goto IL_36;
					}
					case 2:
						goto IL_36;
					case 3:
						text2 = delegate0cd.f0000b4(delegate0156.f0001a3(delegate0155.f0001a1()));
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_36:
					num2++;
					path = delegate0d4.f0000c7(c0000c0.m00000f("ê10IÝXN\u001a×@3\u0002s¤0"), new object[]
					{
						text2,
						delegate0cf.f0000b8().ToString(c0000c0.m00000f("èx4\u001dë$~SÈ_\u0006deú>\u0014")),
						num2,
						extension
					});
					num = delegate0da.f0000d7(-1);
				}
			}
			return text;
		}

		// Token: 0x06000551 RID: 1361 RVA: 0x00023DFC File Offset: 0x00021FFC
		[MethodImpl(MethodImplOptions.NoInlining)]
		public IEnumerator<ZipEntry> GetEnumerator()
		{
			foreach (ZipEntry zipEntry in this._entries.Values)
			{
				yield return zipEntry;
			}
			yield break;
		}

		// Token: 0x06000552 RID: 1362 RVA: 0x00023E18 File Offset: 0x00022018
		[MethodImpl(MethodImplOptions.NoInlining)]
		IEnumerator IEnumerable.GetEnumerator()
		{
			return this.GetEnumerator();
		}

		// Token: 0x06000553 RID: 1363 RVA: 0x00023E2C File Offset: 0x0002202C
		[DispId(-4)]
		[MethodImpl(MethodImplOptions.NoInlining)]
		public IEnumerator GetNewEnum()
		{
			return this.GetEnumerator();
		}

		// Token: 0x06000554 RID: 1364 RVA: 0x00023E40 File Offset: 0x00022040
		// Note: this type is marked as 'beforefieldinit'.
		static ZipFile()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			ZipFile.DefaultEncoding = delegate0c7.f000090(c0000c0.m00000f("ØC\0P\u0095^"));
			ZipFile.IoBufferSizeDefault = 32768;
			ZipFile.SettingsList = new ZipFile.ExtractorSettings[]
			{
				new ZipFile.ExtractorSettings
				{
					Flavor = SelfExtractorFlavor.WinFormsApplication,
					ReferencedAssemblies = new List<string>
					{
						c0000c0.m00000f("Âx>\u0010Ã\u0004\u001dSÀ\u001e"),
						c0000c0.m00000f("Âx>\u0010Ã\u0004\u001d`Å\u001c*C\u007fäc!ùð\u0003\u0015\u0003\u00a0vÁ"),
						c0000c0.m00000f("Âx>\u0010Ã\u0004\u001dsÞ\u00139Efðc\u0003úî")
					},
					CopyThroughResources = new List<string>
					{
						c0000c0.m00000f("Øn#\rÅGi^Ü\\\u0019EfÑ\"\u0015ûñ=\u0003A¢_Õ'Ì\u0016½c×\u0091åiB(BêèS\u009fK\u001f«ðè"),
						c0000c0.m00000f("Øn#\rÅGi^Ü\\\bCzú>IÆã\u001d\u0015Z«hÉ\u0017×\u0016²xßÍÄxD%\u0019êîE\u0083"),
						c0000c0.m00000f("Øn#\rÅGi^Ü\\\bCzú>IÌë\u001e%BªnÈ=Ê\u0004\u009a~Ù\u008fÙz\u00198\tëâU\u0082]\b»")
					},
					ResourcesToCompile = new List<string>
					{
						c0000c0.m00000f("Æh#\"É\u001b^Dÿ\u0017\"JMï9\u0015÷á\u001a\t_\u0097nØ1\u0090\u0014­"),
						c0000c0.m00000f("Æh#\"É\u001b^Dÿ\u0017\"JMï9\u0015÷á\u001a\t_\u0097nØ1\u00903»dÑ\u0084ØxEd\u000fë"),
						c0000c0.m00000f("Á`>\u0017Ñ\u0006ASè\u001b/@gðc\u0004å"),
						c0000c0.m00000f("Á`>\u0017Ñ\u0006ASè\u001b/@gðc#óñ\a\u0001C¡h\u00830Í"),
						c0000c0.m00000f("Ëh='É\aGRÂ\u0006=haö!\bñ¬\r\u0015"),
						c0000c0.m00000f("Ëh='É\aGRÂ\u0006=haö!\bñ¬*\u0003^­}Ã6ÌY½d"),
						c0000c0.m00000f("×n!\0Ã\u001bqEÃ\u0005=IzÓ$\u0006úí\t#UêyÞ")
					}
				},
				new ZipFile.ExtractorSettings
				{
					Flavor = SelfExtractorFlavor.ConsoleApplication,
					ReferencedAssemblies = new List<string>
					{
						c0000c0.m00000f("Âx>\u0010Ã\u0004\u001dSÀ\u001e")
					},
					CopyThroughResources = null,
					ResourcesToCompile = new List<string>
					{
						c0000c0.m00000f("Òn \tÇ\aW{Å\u001c+\u007fmû+\"îö\u001c\aN°uß\0Ê\u0002¼9Û\u0090")
					}
				}
			};
		}

		// Token: 0x040001E2 RID: 482
		public static readonly Encoding DefaultEncoding;

		// Token: 0x040001E3 RID: 483
		private TextWriter _StatusMessageTextWriter;

		// Token: 0x040001E4 RID: 484
		private bool _CaseSensitiveRetrieval;

		// Token: 0x040001E5 RID: 485
		private Stream _readstream;

		// Token: 0x040001E6 RID: 486
		private Stream _writestream;

		// Token: 0x040001E7 RID: 487
		private ushort _versionMadeBy;

		// Token: 0x040001E8 RID: 488
		private ushort _versionNeededToExtract;

		// Token: 0x040001E9 RID: 489
		private uint _diskNumberWithCd;

		// Token: 0x040001EA RID: 490
		private int _maxOutputSegmentSize;

		// Token: 0x040001EB RID: 491
		private uint _numberOfSegmentsForMostRecentSave;

		// Token: 0x040001EC RID: 492
		private ZipErrorAction _zipErrorAction;

		// Token: 0x040001ED RID: 493
		private bool _disposed;

		// Token: 0x040001EE RID: 494
		private Dictionary<string, ZipEntry> _entries;

		// Token: 0x040001EF RID: 495
		private List<ZipEntry> _zipEntriesAsList;

		// Token: 0x040001F0 RID: 496
		private string _name;

		// Token: 0x040001F1 RID: 497
		private string _Comment;

		// Token: 0x040001F2 RID: 498
		internal string _Password;

		// Token: 0x040001F3 RID: 499
		private bool _emitNtfsTimes = true;

		// Token: 0x040001F4 RID: 500
		private bool _emitUnixTimes;

		// Token: 0x040001F5 RID: 501
		private CompressionStrategy _Strategy;

		// Token: 0x040001F6 RID: 502
		private bool _fileAlreadyExists;

		// Token: 0x040001F7 RID: 503
		private string _temporaryFileName;

		// Token: 0x040001F8 RID: 504
		private bool _contentsChanged;

		// Token: 0x040001F9 RID: 505
		private bool _hasBeenSaved;

		// Token: 0x040001FA RID: 506
		private string _TempFileFolder;

		// Token: 0x040001FB RID: 507
		private bool _ReadStreamIsOurs = true;

		// Token: 0x040001FC RID: 508
		private object f00004f = new object();

		// Token: 0x040001FD RID: 509
		private bool _saveOperationCanceled;

		// Token: 0x040001FE RID: 510
		private bool _extractOperationCanceled;

		// Token: 0x040001FF RID: 511
		private EncryptionAlgorithm _Encryption;

		// Token: 0x04000200 RID: 512
		private bool _JustSaved;

		// Token: 0x04000201 RID: 513
		private long _locEndOfCDS = -1L;

		// Token: 0x04000202 RID: 514
		private bool? _OutputUsesZip64;

		// Token: 0x04000203 RID: 515
		internal bool _inExtractAll;

		// Token: 0x04000204 RID: 516
		private Encoding _provisionalAlternateEncoding = delegate0c7.f000090(c0000c0.m00000f("ØC\0P\u0095^"));

		// Token: 0x04000205 RID: 517
		private int _BufferSize = ZipFile.IoBufferSizeDefault;

		// Token: 0x04000206 RID: 518
		internal ParallelDeflateOutputStream ParallelDeflater;

		// Token: 0x04000207 RID: 519
		private long _ParallelDeflateThreshold;

		// Token: 0x04000208 RID: 520
		internal Zip64Option _zip64;

		// Token: 0x04000209 RID: 521
		private bool _SavingSfx;

		// Token: 0x0400020A RID: 522
		public static readonly int IoBufferSizeDefault;

		// Token: 0x0400020D RID: 525
		private long _lengthOfReadStream = -99L;

		// Token: 0x04000211 RID: 529
		private static ZipFile.ExtractorSettings[] SettingsList;

		// Token: 0x04000212 RID: 530
		[CompilerGenerated]
		private bool f000050;

		// Token: 0x04000213 RID: 531
		[CompilerGenerated]
		private bool f000051;

		// Token: 0x04000214 RID: 532
		[CompilerGenerated]
		private bool f000052;

		// Token: 0x04000215 RID: 533
		[CompilerGenerated]
		private int f000041;

		// Token: 0x04000216 RID: 534
		[CompilerGenerated]
		private bool f000053;

		// Token: 0x04000217 RID: 535
		[CompilerGenerated]
		private CompressionLevel f000043;

		// Token: 0x04000218 RID: 536
		[CompilerGenerated]
		private ExtractExistingFileAction f00004c;

		// Token: 0x04000219 RID: 537
		[CompilerGenerated]
		private SetCompressionCallback f00004e;

		// Token: 0x02000086 RID: 134
		private class ExtractorSettings
		{
			// Token: 0x06000555 RID: 1365 RVA: 0x00023FF8 File Offset: 0x000221F8
			[MethodImpl(MethodImplOptions.NoInlining)]
			public ExtractorSettings()
			{
			}

			// Token: 0x06000556 RID: 1366 RVA: 0x00024000 File Offset: 0x00022200
			// Note: this type is marked as 'beforefieldinit'.
			[MethodImpl(MethodImplOptions.NoInlining)]
			static ExtractorSettings()
			{
				c0000c0.Initialize();
				c0000c0.PostInitialize();
			}

			// Token: 0x0400021A RID: 538
			public SelfExtractorFlavor Flavor;

			// Token: 0x0400021B RID: 539
			public List<string> ReferencedAssemblies;

			// Token: 0x0400021C RID: 540
			public List<string> CopyThroughResources;

			// Token: 0x0400021D RID: 541
			public List<string> ResourcesToCompile;
		}

		// Token: 0x02000087 RID: 135
		[CompilerGenerated]
		private sealed class c000087
		{
			// Token: 0x06000557 RID: 1367 RVA: 0x0002400C File Offset: 0x0002220C
			[MethodImpl(MethodImplOptions.NoInlining)]
			public c000087()
			{
			}

			// Token: 0x06000558 RID: 1368 RVA: 0x00024014 File Offset: 0x00022214
			[MethodImpl(MethodImplOptions.NoInlining)]
			public int m00000d(ZipEntry p0, ZipEntry p1)
			{
				return delegate0170.f0001c5(p0.FileName, p1.FileName, this.f000054);
			}

			// Token: 0x06000559 RID: 1369 RVA: 0x00024040 File Offset: 0x00022240
			// Note: this type is marked as 'beforefieldinit'.
			[MethodImpl(MethodImplOptions.NoInlining)]
			static c000087()
			{
				c0000c0.Initialize();
				c0000c0.PostInitialize();
			}

			// Token: 0x0400021E RID: 542
			public StringComparison f000054;
		}
	}
}
