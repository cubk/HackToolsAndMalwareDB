using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Ionic.Zlib
{
	// Token: 0x02000094 RID: 148
	public class ParallelDeflateOutputStream : Stream
	{
		// Token: 0x060005A9 RID: 1449 RVA: 0x00025814 File Offset: 0x00023A14
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ParallelDeflateOutputStream(Stream stream) : this(stream, CompressionLevel.f000073, CompressionStrategy.f000074, false)
		{
		}

		// Token: 0x060005AA RID: 1450 RVA: 0x00025820 File Offset: 0x00023A20
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ParallelDeflateOutputStream(Stream stream, CompressionLevel level) : this(stream, level, CompressionStrategy.f000074, false)
		{
		}

		// Token: 0x060005AB RID: 1451 RVA: 0x0002582C File Offset: 0x00023A2C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ParallelDeflateOutputStream(Stream stream, bool leaveOpen) : this(stream, CompressionLevel.f000073, CompressionStrategy.f000074, leaveOpen)
		{
		}

		// Token: 0x060005AC RID: 1452 RVA: 0x00025838 File Offset: 0x00023A38
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ParallelDeflateOutputStream(Stream stream, CompressionLevel level, bool leaveOpen) : this(stream, CompressionLevel.f000073, CompressionStrategy.f000074, leaveOpen)
		{
		}

		// Token: 0x060005AD RID: 1453 RVA: 0x00025844 File Offset: 0x00023A44
		[MethodImpl(MethodImplOptions.NoInlining)]
		public ParallelDeflateOutputStream(Stream stream, CompressionLevel level, CompressionStrategy strategy, bool leaveOpen)
		{
			this._compressLevel = level;
			this._leaveOpen = leaveOpen;
			this.Strategy = strategy;
			this.BuffersPerCore = 4;
			this._writingDone = new ManualResetEvent(false);
			this._sessionReset = new ManualResetEvent(false);
			this._outStream = stream;
		}

		// Token: 0x17000126 RID: 294
		// (get) Token: 0x060005AE RID: 1454 RVA: 0x000258C0 File Offset: 0x00023AC0
		// (set) Token: 0x060005AF RID: 1455 RVA: 0x000258D8 File Offset: 0x00023AD8
		public CompressionStrategy Strategy { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] private set; }

		// Token: 0x17000127 RID: 295
		// (get) Token: 0x060005B0 RID: 1456 RVA: 0x000258EC File Offset: 0x00023AEC
		// (set) Token: 0x060005B1 RID: 1457 RVA: 0x00025904 File Offset: 0x00023B04
		public int BuffersPerCore { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

		// Token: 0x17000128 RID: 296
		// (get) Token: 0x060005B2 RID: 1458 RVA: 0x00025918 File Offset: 0x00023B18
		// (set) Token: 0x060005B3 RID: 1459 RVA: 0x00025930 File Offset: 0x00023B30
		public int BufferSize
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._bufferSize;
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				for (;;)
				{
					int num = delegate0da.f0000d7(-3);
					for (;;)
					{
						switch (num)
						{
						case 0:
						{
							bool flag = value >= 1024;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						case 1:
							goto IL_91;
						case 2:
						{
							bool flag;
							if (!flag)
							{
								num = delegate0da.f0000d7(-1);
								continue;
							}
							goto IL_97;
						}
						case 3:
							num = delegate0da.f0000d7(0);
							continue;
						}
						break;
					}
				}
				IL_91:
				throw new ArgumentException();
				IL_97:
				this._bufferSize = value;
			}
		}

		// Token: 0x17000129 RID: 297
		// (get) Token: 0x060005B4 RID: 1460 RVA: 0x000259DC File Offset: 0x00023BDC
		public int p000004
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this.f00004b;
			}
		}

		// Token: 0x1700012A RID: 298
		// (get) Token: 0x060005B5 RID: 1461 RVA: 0x000259F4 File Offset: 0x00023BF4
		public long BytesProcessed
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._totalBytesProcessed;
			}
		}

		// Token: 0x060005B6 RID: 1462 RVA: 0x00025A0C File Offset: 0x00023C0C
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _InitializePoolOfWorkItems()
		{
			bool flag;
			int num2;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						goto IL_05;
					case 1:
						goto IL_B5;
					case 2:
						if (!flag)
						{
							goto Block_1;
						}
						goto IL_05;
					case 3:
						this._pool = new List<WorkItem>();
						num2 = 0;
						goto IL_2B;
					}
					break;
					IL_2B:
					flag = (num2 < this.BuffersPerCore * delegate0169.f0001bc());
					num = delegate0da.f0000d7(-2);
					continue;
					IL_05:
					this._pool.Add(new WorkItem(this._bufferSize, this._compressLevel, this.Strategy));
					num2++;
					goto IL_2B;
				}
			}
			Block_1:
			this._pc = this._pool.Count;
			num2 = 0;
			goto IL_CB;
			IL_B5:
			this._pool[num2].index = num2;
			num2++;
			IL_CB:
			flag = (num2 < this._pc);
			if (!flag)
			{
				this._nextToFill = (this._nextToWrite = 0);
				return;
			}
			goto IL_B5;
		}

		// Token: 0x060005B7 RID: 1463 RVA: 0x00025B04 File Offset: 0x00023D04
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _KickoffWriter()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag = ThreadPool.QueueUserWorkItem(new WaitCallback(this._PerpetualWriterMethod));
						num = delegate0da.f0000d7(-2);
						continue;
					}
					case 1:
						goto IL_97;
					case 2:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						return;
					}
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_97:
			throw new Exception(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013RÂ\u0003;I}òm\u0010äë\u001a\u0003_änÅ!Û\u0016º9"));
		}

		// Token: 0x060005B8 RID: 1464 RVA: 0x00025BB8 File Offset: 0x00023DB8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Write(byte[] buffer, int offset, int count)
		{
			if (this._isClosed)
			{
				throw new NotSupportedException();
			}
			if (this._pendingException != null)
			{
				throw this._pendingException;
			}
			if (count != 0)
			{
				if (!this._firstWriteDone)
				{
					this._InitializePoolOfWorkItems();
					this._KickoffWriter();
					this._sessionReset.Set();
					this._firstWriteDone = true;
				}
				for (;;)
				{
					int index = this._nextToFill % this._pc;
					WorkItem workItem = this._pool[index];
					delegate0e6.f0000f4(workItem);
					if (workItem.status == 0 || workItem.status == 6 || workItem.status == 1)
					{
						workItem.status = 1;
						int num = (workItem.buffer.Length - workItem.inputBytesAvailable > count) ? count : (workItem.buffer.Length - workItem.inputBytesAvailable);
						delegate0fe.f000121(buffer, offset, workItem.buffer, workItem.inputBytesAvailable, num);
						count -= num;
						offset += num;
						workItem.inputBytesAvailable += num;
						if (workItem.inputBytesAvailable == workItem.buffer.Length)
						{
							workItem.status = 2;
							this._nextToFill++;
							if (!delegate016a.f0001be(new WaitCallback(this._DeflateOne), workItem))
							{
								break;
							}
						}
					}
					else
					{
						int num2 = 0;
						while (workItem.status != 0 && workItem.status != 6 && workItem.status != 1)
						{
							num2++;
							delegate0e6.f0000f7(workItem);
							delegate016b.f0001bf(workItem);
							if (workItem.status == 0 || workItem.status == 6 || workItem.status == 1)
							{
							}
						}
					}
					if (count <= 0)
					{
						goto Block_14;
					}
				}
				throw new Exception(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013RÂ\u0003;I}òm\u0010ùð\u0005\u000fY¡w"));
				Block_14:;
			}
		}

		// Token: 0x060005B9 RID: 1465 RVA: 0x00025DF0 File Offset: 0x00023FF0
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Flush()
		{
			this._Flush(false);
		}

		// Token: 0x060005BA RID: 1466 RVA: 0x00025E04 File Offset: 0x00024004
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _Flush(bool lastInput)
		{
			if (this._isClosed)
			{
				throw new NotSupportedException();
			}
			WorkItem workItem = this._pool[this._nextToFill % this._pc];
			delegate0e6.f0000f4(workItem);
			if (workItem.status == 1)
			{
				workItem.status = 2;
				this._nextToFill++;
				if (lastInput)
				{
					this._noMoreInputForThisSegment = true;
				}
				if (!ThreadPool.QueueUserWorkItem(new WaitCallback(this._DeflateOne), workItem))
				{
					throw new Exception(c0000c0.m00000f("Ò`#\nÉ\u001d\u0013RÂ\u0003;I}òm\u0010ùð\u0005\u000fY¡w"));
				}
			}
			else if (lastInput)
			{
				this._noMoreInputForThisSegment = true;
			}
		}

		// Token: 0x060005BB RID: 1467 RVA: 0x00025EC8 File Offset: 0x000240C8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void Close()
		{
			if (!this._isClosed)
			{
				this._Flush(true);
				WorkItem p = this._pool[this._nextToFill % this._pc];
				delegate0e6.f0000f4(p);
				delegate0e6.f0000f8(p);
				this._writingDone.WaitOne();
				if (!this._leaveOpen)
				{
					this._outStream.Close();
				}
				this._isClosed = true;
			}
		}

		// Token: 0x060005BC RID: 1468 RVA: 0x00025F48 File Offset: 0x00024148
		[MethodImpl(MethodImplOptions.NoInlining)]
		public new void Dispose()
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this._isDisposed = true;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_8D;
					case 2:
						this._pool = null;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_8D:
			this._sessionReset.Set();
			this.Dispose(true);
		}

		// Token: 0x060005BD RID: 1469 RVA: 0x00025FF8 File Offset: 0x000241F8
		[MethodImpl(MethodImplOptions.NoInlining)]
		protected override void Dispose(bool disposeManagedResources)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
					{
						bool flag;
						if (!flag)
						{
							num = delegate0da.f0000d7(-2);
							continue;
						}
						return;
					}
					case 1:
						goto IL_95;
					case 2:
						this._writingDone.Close();
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
					{
						bool flag = !disposeManagedResources;
						num = delegate0da.f0000d7(0);
						continue;
					}
					}
					break;
				}
			}
			IL_95:
			this._sessionReset.Close();
		}

		// Token: 0x060005BE RID: 1470 RVA: 0x000260A8 File Offset: 0x000242A8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public void Reset(Stream stream)
		{
			if (this._firstWriteDone)
			{
				if (this._noMoreInputForThisSegment)
				{
					this._writingDone.WaitOne();
					foreach (WorkItem workItem in this._pool)
					{
						workItem.status = 0;
					}
					this._noMoreInputForThisSegment = false;
					this._nextToFill = (this._nextToWrite = 0);
					this._totalBytesProcessed = 0L;
					this.f00004b = 0;
					this._isClosed = false;
					this._writingDone.Reset();
				}
				this._outStream = stream;
				this._sessionReset.Set();
			}
		}

		// Token: 0x060005BF RID: 1471 RVA: 0x00026164 File Offset: 0x00024364
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _PerpetualWriterMethod(object state)
		{
			ZlibCodec zlibCodec;
			for (;;)
			{
				this._sessionReset.WaitOne();
				if (this._isDisposed)
				{
					break;
				}
				this._sessionReset.Reset();
				CRC32 crc = new CRC32();
				for (;;)
				{
					IL_35:
					WorkItem workItem = this._pool[this._nextToWrite % this._pc];
					delegate0e6.f0000f4(workItem);
					if (this._noMoreInputForThisSegment)
					{
					}
					while (workItem.status != 4)
					{
						int num = 0;
						while (workItem.status != 4)
						{
							if (this._noMoreInputForThisSegment && this._nextToWrite == this._nextToFill)
							{
								break;
							}
							num++;
							delegate0e6.f0000f7(workItem);
							delegate016b.f0001bf(workItem);
							if (workItem.status == 4)
							{
							}
						}
						if (this._noMoreInputForThisSegment && this._nextToWrite == this._nextToFill)
						{
							IL_EA:
							if (this._noMoreInputForThisSegment)
							{
							}
							if (this._noMoreInputForThisSegment && this._nextToWrite == this._nextToFill)
							{
								goto Block_7;
							}
							goto IL_35;
						}
					}
					workItem.status = 5;
					this._outStream.Write(workItem.compressed, 0, workItem.compressedBytesAvailable);
					crc.Combine(workItem.crc, workItem.inputBytesAvailable);
					this._totalBytesProcessed += (long)workItem.inputBytesAvailable;
					this._nextToWrite++;
					workItem.inputBytesAvailable = 0;
					workItem.status = 6;
					delegate0e6.f0000f7(workItem);
					goto IL_EA;
				}
				Block_7:
				byte[] array = new byte[128];
				zlibCodec = new ZlibCodec();
				int num2 = zlibCodec.InitializeDeflate(this._compressLevel, false);
				zlibCodec.InputBuffer = null;
				zlibCodec.NextIn = 0;
				zlibCodec.AvailableBytesIn = 0;
				zlibCodec.OutputBuffer = array;
				zlibCodec.NextOut = 0;
				zlibCodec.AvailableBytesOut = array.Length;
				num2 = zlibCodec.Deflate(FlushType.Finish);
				if (num2 != 1 && num2 != 0)
				{
					goto Block_9;
				}
				if (array.Length - zlibCodec.AvailableBytesOut > 0)
				{
					this._outStream.Write(array, 0, array.Length - zlibCodec.AvailableBytesOut);
				}
				zlibCodec.EndDeflate();
				this.f00004b = crc.Crc32Result;
				this._writingDone.Set();
			}
			return;
			Block_9:
			throw new Exception(delegate0d0.f0000bc(c0000c0.m00000f("õd+\bÇ\u001dZYËHn"), zlibCodec.Message));
		}

		// Token: 0x060005C0 RID: 1472 RVA: 0x00026450 File Offset: 0x00024650
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void _DeflateOne(object p0)
		{
			WorkItem workItem = (WorkItem)p0;
			int index = workItem.index;
			delegate0e6.f0000f4(workItem);
			if (workItem.status != 2)
			{
				throw new InvalidOperationException();
			}
			CRC32 crc = new CRC32();
			crc.SlurpBlock(workItem.buffer, 0, workItem.inputBytesAvailable);
			this.DeflateOneSegment(workItem);
			workItem.status = 4;
			workItem.crc = crc.Crc32Result;
			delegate0e6.f0000f7(workItem);
		}

		// Token: 0x060005C1 RID: 1473 RVA: 0x000264DC File Offset: 0x000246DC
		[MethodImpl(MethodImplOptions.NoInlining)]
		private bool DeflateOneSegment(WorkItem workitem)
		{
			ZlibCodec compressor;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						compressor.NextIn = 0;
						compressor.AvailableBytesIn = workitem.inputBytesAvailable;
						compressor.NextOut = 0;
						compressor.AvailableBytesOut = workitem.compressed.Length;
						goto IL_CA;
					case 1:
						goto IL_E2;
					case 2:
						compressor.Deflate(FlushType.None);
						if (compressor.AvailableBytesIn <= 0 && compressor.AvailableBytesOut != 0)
						{
							num = delegate0da.f0000d7(-1);
							continue;
						}
						goto IL_CA;
					case 3:
						compressor = workitem.compressor;
						compressor.ResetDeflate();
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
					IL_CA:
					num = delegate0da.f0000d7(-2);
				}
			}
			IL_E2:
			int num2 = compressor.Deflate(FlushType.Sync);
			workitem.compressedBytesAvailable = (int)compressor.TotalBytesOut;
			return true;
		}

		// Token: 0x060005C2 RID: 1474 RVA: 0x000265E4 File Offset: 0x000247E4
		[Conditional("Trace")]
		[MethodImpl(MethodImplOptions.NoInlining)]
		private void TraceOutput(ParallelDeflateOutputStream.TraceBits bits, string format, params object[] varParams)
		{
			if ((bits & this._DesiredTrace) != ParallelDeflateOutputStream.TraceBits.None)
			{
				delegate0e6.f0000f4(this._outputLock);
				int num = delegate0fc.f000118(delegate010f.f00013e());
				delegate0146.f000188(num % 8 + ConsoleColor.DarkGray);
				delegate0147.f000189(c0000c0.m00000f("ê1wT\u0096YN\u0017ü6\u0001\u007f("), num);
				delegate0138.f000175(format, varParams);
				delegate0148.f00018b();
			}
		}

		// Token: 0x1700012B RID: 299
		// (get) Token: 0x060005C3 RID: 1475 RVA: 0x0002666C File Offset: 0x0002486C
		public override bool CanSeek
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x1700012C RID: 300
		// (get) Token: 0x060005C4 RID: 1476 RVA: 0x0002667C File Offset: 0x0002487C
		public override bool CanRead
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return false;
			}
		}

		// Token: 0x1700012D RID: 301
		// (get) Token: 0x060005C5 RID: 1477 RVA: 0x0002668C File Offset: 0x0002488C
		public override bool CanWrite
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				return this._outStream.CanWrite;
			}
		}

		// Token: 0x1700012E RID: 302
		// (get) Token: 0x060005C6 RID: 1478 RVA: 0x000266A8 File Offset: 0x000248A8
		public override long Length
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x1700012F RID: 303
		// (get) Token: 0x060005C7 RID: 1479 RVA: 0x000266BC File Offset: 0x000248BC
		// (set) Token: 0x060005C8 RID: 1480 RVA: 0x000266D0 File Offset: 0x000248D0
		public override long Position
		{
			[MethodImpl(MethodImplOptions.NoInlining)]
			get
			{
				throw new NotImplementedException();
			}
			[MethodImpl(MethodImplOptions.NoInlining)]
			set
			{
				throw new NotImplementedException();
			}
		}

		// Token: 0x060005C9 RID: 1481 RVA: 0x000266E4 File Offset: 0x000248E4
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override int Read(byte[] buffer, int offset, int count)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005CA RID: 1482 RVA: 0x000266F8 File Offset: 0x000248F8
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005CB RID: 1483 RVA: 0x0002670C File Offset: 0x0002490C
		[MethodImpl(MethodImplOptions.NoInlining)]
		public override void SetLength(long value)
		{
			throw new NotImplementedException();
		}

		// Token: 0x060005CC RID: 1484 RVA: 0x00026720 File Offset: 0x00024920
		// Note: this type is marked as 'beforefieldinit'.
		static ParallelDeflateOutputStream()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
			ParallelDeflateOutputStream.IO_BUFFER_SIZE_DEFAULT = 65536;
		}

		// Token: 0x04000256 RID: 598
		private static readonly int IO_BUFFER_SIZE_DEFAULT;

		// Token: 0x04000257 RID: 599
		private List<WorkItem> _pool;

		// Token: 0x04000258 RID: 600
		private bool _leaveOpen;

		// Token: 0x04000259 RID: 601
		private Stream _outStream;

		// Token: 0x0400025A RID: 602
		private int _nextToFill;

		// Token: 0x0400025B RID: 603
		private int _nextToWrite;

		// Token: 0x0400025C RID: 604
		private int _bufferSize = ParallelDeflateOutputStream.IO_BUFFER_SIZE_DEFAULT;

		// Token: 0x0400025D RID: 605
		private ManualResetEvent _writingDone;

		// Token: 0x0400025E RID: 606
		private ManualResetEvent _sessionReset;

		// Token: 0x0400025F RID: 607
		private bool _noMoreInputForThisSegment;

		// Token: 0x04000260 RID: 608
		private object _outputLock = new object();

		// Token: 0x04000261 RID: 609
		private bool _isClosed;

		// Token: 0x04000262 RID: 610
		private bool _isDisposed;

		// Token: 0x04000263 RID: 611
		private bool _firstWriteDone;

		// Token: 0x04000264 RID: 612
		private int _pc;

		// Token: 0x04000265 RID: 613
		private int f00004b;

		// Token: 0x04000266 RID: 614
		private long _totalBytesProcessed;

		// Token: 0x04000267 RID: 615
		private CompressionLevel _compressLevel;

		// Token: 0x04000268 RID: 616
		private volatile Exception _pendingException;

		// Token: 0x04000269 RID: 617
		private object _eLock = new object();

		// Token: 0x0400026A RID: 618
		private ParallelDeflateOutputStream.TraceBits _DesiredTrace = ParallelDeflateOutputStream.TraceBits.Lifecycle | ParallelDeflateOutputStream.TraceBits.Session | ParallelDeflateOutputStream.TraceBits.Synch | ParallelDeflateOutputStream.TraceBits.WriterThread;

		// Token: 0x0400026B RID: 619
		[CompilerGenerated]
		private CompressionStrategy f000042;

		// Token: 0x0400026C RID: 620
		[CompilerGenerated]
		private int f000068;

		// Token: 0x02000095 RID: 149
		[Flags]
		private enum TraceBits
		{
			// Token: 0x0400026E RID: 622
			None = 0,
			// Token: 0x0400026F RID: 623
			Write = 1,
			// Token: 0x04000270 RID: 624
			WriteBegin = 2,
			// Token: 0x04000271 RID: 625
			WriteDone = 4,
			// Token: 0x04000272 RID: 626
			WriteWait = 8,
			// Token: 0x04000273 RID: 627
			Flush = 16,
			// Token: 0x04000274 RID: 628
			Compress = 32,
			// Token: 0x04000275 RID: 629
			Fill = 64,
			// Token: 0x04000276 RID: 630
			Lifecycle = 128,
			// Token: 0x04000277 RID: 631
			Session = 256,
			// Token: 0x04000278 RID: 632
			Synch = 512,
			// Token: 0x04000279 RID: 633
			WriterThread = 1024
		}
	}
}
