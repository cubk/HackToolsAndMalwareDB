using System;
using System.Runtime.CompilerServices;

namespace Ionic.Zlib
{
	// Token: 0x020000A2 RID: 162
	internal sealed class InflateCodes
	{
		// Token: 0x06000646 RID: 1606 RVA: 0x0002D604 File Offset: 0x0002B804
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal InflateCodes()
		{
		}

		// Token: 0x06000647 RID: 1607 RVA: 0x0002D614 File Offset: 0x0002B814
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal void Init(int p0, int p1, int[] p2, int tl_index, int[] p4, int td_index)
		{
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.lbits = (byte)p0;
						this.dbits = (byte)p1;
						num = delegate0da.f0000d7(-2);
						continue;
					case 1:
						goto IL_A5;
					case 2:
						this.ltree = p2;
						this.ltree_index = tl_index;
						num = delegate0da.f0000d7(-1);
						continue;
					case 3:
						this.mode = 0;
						num = delegate0da.f0000d7(0);
						continue;
					}
					break;
				}
			}
			IL_A5:
			this.dtree = p4;
			this.dtree_index = td_index;
			this.tree = null;
		}

		// Token: 0x06000648 RID: 1608 RVA: 0x0002D6E0 File Offset: 0x0002B8E0
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int Process(InflateBlocks blocks, int p1)
		{
			bool flag;
			int num2;
			int num3;
			int num4;
			int num5;
			int num6;
			ZlibCodec codec;
			int num7;
			int result;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					switch (num)
					{
					case 0:
						this.mode = 7;
						goto IL_2F5;
					case 1:
						if (!flag)
						{
							num2 = 0;
							num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
						}
						flag = (num3 != 0);
						if (flag)
						{
							goto IL_B41;
						}
						blocks.writeAt = num2;
						p1 = blocks.Flush(p1);
						num2 = blocks.writeAt;
						num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
						flag = (num2 != blocks.end || blocks.readAt == 0);
						if (!flag)
						{
							num2 = 0;
							num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
						}
						flag = (num3 != 0);
						if (!flag)
						{
							goto Block_44;
						}
						goto IL_B41;
					case 2:
						goto IL_36;
					case 3:
						num4 = 0;
						num5 = 0;
						num6 = 0;
						codec = blocks._codec;
						num6 = codec.NextIn;
						num7 = codec.AvailableBytesIn;
						num4 = blocks.bitb;
						num5 = blocks.bitk;
						num2 = blocks.writeAt;
						num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
						goto IL_2F5;
					}
					break;
					int num11;
					for (;;)
					{
						IL_2F5:
						flag = true;
						int num8;
						switch (this.mode)
						{
						case 0:
							flag = (num3 < 258 || num7 < 10);
							if (!flag)
							{
								blocks.bitb = num4;
								blocks.bitk = num5;
								codec.AvailableBytesIn = num7;
								codec.TotalBytesIn += (long)(num6 - codec.NextIn);
								codec.NextIn = num6;
								blocks.writeAt = num2;
								p1 = this.InflateFast((int)this.lbits, (int)this.dbits, this.ltree, this.ltree_index, this.dtree, this.dtree_index, blocks, codec);
								num6 = codec.NextIn;
								num7 = codec.AvailableBytesIn;
								num4 = blocks.bitb;
								num5 = blocks.bitk;
								num2 = blocks.writeAt;
								num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
								flag = (p1 == 0);
								if (!flag)
								{
									this.mode = ((p1 == 1) ? 7 : 9);
									continue;
								}
							}
							this.need = (int)this.lbits;
							this.tree = this.ltree;
							this.tree_index = this.ltree_index;
							this.mode = 1;
							goto IL_554;
						case 1:
							goto IL_554;
						case 2:
							num8 = this.bitsToGet;
							for (;;)
							{
								flag = (num5 < num8);
								if (!flag)
								{
									break;
								}
								flag = (num7 == 0);
								if (flag)
								{
									goto IL_811;
								}
								p1 = 0;
								num7--;
								num4 |= (int)(codec.InputBuffer[num6++] & byte.MaxValue) << num5;
								num5 += 8;
							}
							this.len += (num4 & InternalInflateConstants.InflateMask[num8]);
							num4 >>= num8;
							num5 -= num8;
							this.need = (int)this.dbits;
							this.tree = this.dtree;
							this.tree_index = this.dtree_index;
							this.mode = 3;
							goto IL_804;
						case 3:
							goto IL_804;
						case 4:
							num8 = this.bitsToGet;
							for (;;)
							{
								flag = (num5 < num8);
								if (!flag)
								{
									break;
								}
								flag = (num7 == 0);
								if (flag)
								{
									goto IL_C6;
								}
								p1 = 0;
								num7--;
								num4 |= (int)(codec.InputBuffer[num6++] & byte.MaxValue) << num5;
								num5 += 8;
							}
							this.dist += (num4 & InternalInflateConstants.InflateMask[num8]);
							num4 >>= num8;
							num5 -= num8;
							this.mode = 5;
							goto IL_B6;
						case 5:
							goto IL_B6;
						case 6:
							goto IL_37C;
						case 7:
							goto IL_B6B;
						case 8:
							goto IL_C33;
						case 9:
							goto IL_C7F;
						}
						goto Block_16;
						IL_B6:
						int num9 = num2 - this.dist;
						for (;;)
						{
							flag = (num9 < 0);
							if (!flag)
							{
								break;
							}
							num9 += blocks.end;
						}
						for (;;)
						{
							flag = (this.len != 0);
							if (!flag)
							{
								break;
							}
							flag = (num3 != 0);
							if (!flag)
							{
								flag = (num2 != blocks.end || blocks.readAt == 0);
								if (!flag)
								{
									num2 = 0;
									num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
								}
								flag = (num3 != 0);
								if (!flag)
								{
									blocks.writeAt = num2;
									p1 = blocks.Flush(p1);
									num2 = blocks.writeAt;
									num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
									flag = (num2 != blocks.end || blocks.readAt == 0);
									if (!flag)
									{
										num2 = 0;
										num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
									}
									flag = (num3 != 0);
									if (!flag)
									{
										goto Block_13;
									}
								}
							}
							blocks.window[num2++] = blocks.window[num9++];
							num3--;
							flag = (num9 != blocks.end);
							if (!flag)
							{
								num9 = 0;
							}
							this.len--;
						}
						this.mode = 0;
						continue;
						IL_554:
						num8 = this.need;
						for (;;)
						{
							flag = (num5 < num8);
							if (!flag)
							{
								break;
							}
							flag = (num7 == 0);
							if (flag)
							{
								goto IL_611;
							}
							p1 = 0;
							num7--;
							num4 |= (int)(codec.InputBuffer[num6++] & byte.MaxValue) << num5;
							num5 += 8;
						}
						int num10 = (this.tree_index + (num4 & InternalInflateConstants.InflateMask[num8])) * 3;
						num4 >>= this.tree[num10 + 1];
						num5 -= this.tree[num10 + 1];
						num11 = this.tree[num10];
						flag = (num11 != 0);
						if (!flag)
						{
							this.lit = this.tree[num10 + 2];
							this.mode = 6;
							continue;
						}
						flag = ((num11 & 16) == 0);
						if (!flag)
						{
							this.bitsToGet = (num11 & 15);
							this.len = this.tree[num10 + 2];
							this.mode = 2;
							continue;
						}
						flag = ((num11 & 64) != 0);
						if (!flag)
						{
							this.need = num11;
							this.tree_index = num10 / 3 + this.tree[num10 + 2];
							continue;
						}
						goto IL_6CA;
						IL_804:
						num8 = this.need;
						for (;;)
						{
							flag = (num5 < num8);
							if (!flag)
							{
								break;
							}
							flag = (num7 == 0);
							if (flag)
							{
								goto IL_915;
							}
							p1 = 0;
							num7--;
							num4 |= (int)(codec.InputBuffer[num6++] & byte.MaxValue) << num5;
							num5 += 8;
						}
						num10 = (this.tree_index + (num4 & InternalInflateConstants.InflateMask[num8])) * 3;
						num4 >>= this.tree[num10 + 1];
						num5 -= this.tree[num10 + 1];
						num11 = this.tree[num10];
						flag = ((num11 & 16) == 0);
						if (!flag)
						{
							this.bitsToGet = (num11 & 15);
							this.dist = this.tree[num10 + 2];
							this.mode = 4;
						}
						else
						{
							flag = ((num11 & 64) != 0);
							if (flag)
							{
								goto IL_995;
							}
							this.need = num11;
							this.tree_index = num10 / 3 + this.tree[num10 + 2];
						}
					}
					IL_37C:
					flag = (num3 != 0);
					if (!flag)
					{
						flag = (num2 != blocks.end || blocks.readAt == 0);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_B41;
					IL_6CA:
					flag = ((num11 & 32) == 0);
					if (!flag)
					{
						num = delegate0da.f0000d7(0);
						continue;
					}
					goto IL_700;
					IL_995:
					this.mode = 9;
					codec.Message = c0000c0.m00000f("øo;\u0005Ê\0W\u0017È\u001b=Xiù.\u0002¶á\u0001\u0002H");
					p1 = -3;
					blocks.bitb = num4;
					blocks.bitk = num5;
					codec.AvailableBytesIn = num7;
					codec.TotalBytesIn += (long)(num6 - codec.NextIn);
					codec.NextIn = num6;
					blocks.writeAt = num2;
					result = blocks.Flush(p1);
					num = delegate0da.f0000d7(-2);
					continue;
					IL_B41:
					p1 = 0;
					blocks.window[num2++] = (byte)this.lit;
					num3--;
					this.mode = 0;
					goto IL_2F5;
				}
			}
			IL_36:
			return result;
			IL_C6:
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			Block_13:
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			Block_16:
			p1 = -2;
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			IL_611:
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			IL_700:
			this.mode = 9;
			codec.Message = c0000c0.m00000f("øo;\u0005Ê\0W\u0017À\u001b:Izö!Húç\0\u0001Y¬:Î<Ú\u0012");
			p1 = -3;
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			IL_811:
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			IL_915:
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			Block_44:
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			IL_B6B:
			flag = (num5 <= 7);
			if (!flag)
			{
				num5 -= 8;
				num7++;
				num6--;
			}
			blocks.writeAt = num2;
			p1 = blocks.Flush(p1);
			num2 = blocks.writeAt;
			num3 = ((num2 < blocks.readAt) ? (blocks.readAt - num2 - 1) : (blocks.end - num2));
			flag = (blocks.readAt == blocks.writeAt);
			if (!flag)
			{
				blocks.bitb = num4;
				blocks.bitk = num5;
				codec.AvailableBytesIn = num7;
				codec.TotalBytesIn += (long)(num6 - codec.NextIn);
				codec.NextIn = num6;
				blocks.writeAt = num2;
				return blocks.Flush(p1);
			}
			this.mode = 8;
			IL_C33:
			p1 = 1;
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			return blocks.Flush(p1);
			IL_C7F:
			p1 = -3;
			blocks.bitb = num4;
			blocks.bitk = num5;
			codec.AvailableBytesIn = num7;
			codec.TotalBytesIn += (long)(num6 - codec.NextIn);
			codec.NextIn = num6;
			blocks.writeAt = num2;
			result = blocks.Flush(p1);
			return result;
		}

		// Token: 0x06000649 RID: 1609 RVA: 0x0002E3B8 File Offset: 0x0002C5B8
		[MethodImpl(MethodImplOptions.NoInlining)]
		internal int InflateFast(int p0, int p1, int[] p2, int tl_index, int[] p4, int td_index, InflateBlocks p6, ZlibCodec p7)
		{
			int num2;
			int num3;
			bool flag;
			int num4;
			int num5;
			int num6;
			int num10;
			int num11;
			for (;;)
			{
				int num = delegate0da.f0000d7(-3);
				for (;;)
				{
					int[] array;
					int num8;
					int num9;
					int num12;
					int num13;
					switch (num)
					{
					case 0:
					{
						for (;;)
						{
							flag = (num2 < num3);
							if (!flag)
							{
								break;
							}
							num4--;
							num5 |= (int)(p7.InputBuffer[num6++] & byte.MaxValue) << num2;
							num2 += 8;
						}
						int num7 = array[num8 + 2] + (num5 & InternalInflateConstants.InflateMask[num3]);
						num5 >>= num3;
						num2 -= num3;
						num9 -= num10;
						flag = (num11 < num7);
						if (!flag)
						{
							num12 = num11 - num7;
							flag = (num11 - num12 <= 0 || 2 <= num11 - num12);
							if (!flag)
							{
								p6.window[num11++] = p6.window[num12++];
								p6.window[num11++] = p6.window[num12++];
								num10 -= 2;
								goto IL_43;
							}
							delegate0fe.f000121(p6.window, num12, p6.window, num11, 2);
							num11 += 2;
							num12 += 2;
							num10 -= 2;
							goto IL_43;
						}
						else
						{
							num12 = num11 - num7;
							do
							{
								num12 += p6.end;
								flag = (num12 < 0);
							}
							while (flag);
							num3 = p6.end - num12;
							flag = (num10 <= num3);
							if (flag)
							{
								goto IL_43;
							}
							num10 -= num3;
							flag = (num11 - num12 <= 0 || num3 <= num11 - num12);
							if (!flag)
							{
								do
								{
									p6.window[num11++] = p6.window[num12++];
									flag = (--num3 != 0);
								}
								while (flag);
								goto IL_40;
							}
							delegate0fe.f000121(p6.window, num12, p6.window, num11, num3);
							num11 += num3;
							num = delegate0da.f0000d7(-2);
							continue;
						}
						break;
					}
					case 1:
						if (!flag)
						{
							num5 >>= array[num8 + 1];
							num2 -= array[num8 + 1];
							p6.window[num11++] = (byte)array[num8 + 2];
							num9--;
							goto IL_752;
						}
						flag = true;
						goto IL_314;
					case 2:
						num12 += num3;
						num3 = 0;
						goto IL_40;
					case 3:
					{
						num6 = p7.NextIn;
						num4 = p7.AvailableBytesIn;
						num5 = p6.bitb;
						num2 = p6.bitk;
						num11 = p6.writeAt;
						num9 = ((num11 < p6.readAt) ? (p6.readAt - num11 - 1) : (p6.end - num11));
						num13 = InternalInflateConstants.InflateMask[p0];
						int num14 = InternalInflateConstants.InflateMask[p1];
						goto IL_29D;
					}
					}
					break;
					for (;;)
					{
						IL_29D:
						flag = (num2 < 20);
						if (!flag)
						{
							break;
						}
						num4--;
						num5 |= (int)(p7.InputBuffer[num6++] & byte.MaxValue) << num2;
						num2 += 8;
					}
					int num15 = num5 & num13;
					array = p2;
					int num16 = tl_index;
					num8 = (num16 + num15) * 3;
					flag = ((num3 = array[num8]) != 0);
					if (!flag)
					{
						num5 >>= array[num8 + 1];
						num2 -= array[num8 + 1];
						p6.window[num11++] = (byte)array[num8 + 2];
						num9--;
						goto IL_752;
					}
					IL_314:
					num5 >>= array[num8 + 1];
					num2 -= array[num8 + 1];
					flag = ((num3 & 16) == 0);
					if (!flag)
					{
						num3 &= 15;
						num10 = array[num8 + 2] + (num5 & InternalInflateConstants.InflateMask[num3]);
						num5 >>= num3;
						num2 -= num3;
						for (;;)
						{
							flag = (num2 < 15);
							if (!flag)
							{
								break;
							}
							num4--;
							num5 |= (int)(p7.InputBuffer[num6++] & byte.MaxValue) << num2;
							num2 += 8;
						}
						int num14;
						num15 = (num5 & num14);
						array = p4;
						num16 = td_index;
						num8 = (num16 + num15) * 3;
						num3 = array[num8];
						for (;;)
						{
							num5 >>= array[num8 + 1];
							num2 -= array[num8 + 1];
							flag = ((num3 & 16) == 0);
							if (!flag)
							{
								break;
							}
							flag = ((num3 & 64) != 0);
							if (flag)
							{
								goto IL_11D;
							}
							num15 += array[num8 + 2];
							num15 += (num5 & InternalInflateConstants.InflateMask[num3]);
							num8 = (num16 + num15) * 3;
							num3 = array[num8];
							flag = true;
						}
						num3 &= 15;
						num = delegate0da.f0000d7(0);
						continue;
					}
					flag = ((num3 & 64) != 0);
					if (!flag)
					{
						num15 += array[num8 + 2];
						num15 += (num5 & InternalInflateConstants.InflateMask[num3]);
						num8 = (num16 + num15) * 3;
						flag = ((num3 = array[num8]) != 0);
						num = delegate0da.f0000d7(-1);
						continue;
					}
					goto IL_635;
					IL_752:
					flag = (num9 >= 258 && num4 >= 10);
					if (!flag)
					{
						goto Block_25;
					}
					goto IL_29D;
					IL_43:
					flag = (num11 - num12 <= 0 || num10 <= num11 - num12);
					if (!flag)
					{
						do
						{
							p6.window[num11++] = p6.window[num12++];
							flag = (--num10 != 0);
						}
						while (flag);
						goto IL_752;
					}
					delegate0fe.f000121(p6.window, num12, p6.window, num11, num10);
					num11 += num10;
					num12 += num10;
					num10 = 0;
					goto IL_752;
					IL_40:
					num12 = 0;
					goto IL_43;
				}
			}
			IL_11D:
			p7.Message = c0000c0.m00000f("øo;\u0005Ê\0W\u0017È\u001b=Xiù.\u0002¶á\u0001\u0002H");
			num10 = p7.AvailableBytesIn - num4;
			num10 = ((num2 >> 3 < num10) ? (num2 >> 3) : num10);
			num4 += num10;
			num6 -= num10;
			num2 -= num10 << 3;
			p6.bitb = num5;
			p6.bitk = num2;
			p7.AvailableBytesIn = num4;
			p7.TotalBytesIn += (long)(num6 - p7.NextIn);
			p7.NextIn = num6;
			p6.writeAt = num11;
			return -3;
			IL_635:
			flag = ((num3 & 32) == 0);
			if (!flag)
			{
				num10 = p7.AvailableBytesIn - num4;
				num10 = ((num2 >> 3 < num10) ? (num2 >> 3) : num10);
				num4 += num10;
				num6 -= num10;
				num2 -= num10 << 3;
				p6.bitb = num5;
				p6.bitk = num2;
				p7.AvailableBytesIn = num4;
				p7.TotalBytesIn += (long)(num6 - p7.NextIn);
				p7.NextIn = num6;
				p6.writeAt = num11;
				return 1;
			}
			p7.Message = c0000c0.m00000f("øo;\u0005Ê\0W\u0017À\u001b:Izö!Húç\0\u0001Y¬:Î<Ú\u0012");
			num10 = p7.AvailableBytesIn - num4;
			num10 = ((num2 >> 3 < num10) ? (num2 >> 3) : num10);
			num4 += num10;
			num6 -= num10;
			num2 -= num10 << 3;
			p6.bitb = num5;
			p6.bitk = num2;
			p7.AvailableBytesIn = num4;
			p7.TotalBytesIn += (long)(num6 - p7.NextIn);
			p7.NextIn = num6;
			p6.writeAt = num11;
			return -3;
			Block_25:
			num10 = p7.AvailableBytesIn - num4;
			num10 = ((num2 >> 3 < num10) ? (num2 >> 3) : num10);
			num4 += num10;
			num6 -= num10;
			num2 -= num10 << 3;
			p6.bitb = num5;
			p6.bitk = num2;
			p7.AvailableBytesIn = num4;
			p7.TotalBytesIn += (long)(num6 - p7.NextIn);
			p7.NextIn = num6;
			p6.writeAt = num11;
			return 0;
		}

		// Token: 0x0600064A RID: 1610 RVA: 0x0002EBB8 File Offset: 0x0002CDB8
		// Note: this type is marked as 'beforefieldinit'.
		[MethodImpl(MethodImplOptions.NoInlining)]
		static InflateCodes()
		{
			c0000c0.Initialize();
			c0000c0.PostInitialize();
		}

		// Token: 0x04000312 RID: 786
		private const int START = 0;

		// Token: 0x04000313 RID: 787
		private const int LEN = 1;

		// Token: 0x04000314 RID: 788
		private const int LENEXT = 2;

		// Token: 0x04000315 RID: 789
		private const int DIST = 3;

		// Token: 0x04000316 RID: 790
		private const int DISTEXT = 4;

		// Token: 0x04000317 RID: 791
		private const int COPY = 5;

		// Token: 0x04000318 RID: 792
		private const int LIT = 6;

		// Token: 0x04000319 RID: 793
		private const int WASH = 7;

		// Token: 0x0400031A RID: 794
		private const int END = 8;

		// Token: 0x0400031B RID: 795
		private const int BADCODE = 9;

		// Token: 0x0400031C RID: 796
		internal int mode;

		// Token: 0x0400031D RID: 797
		internal int len;

		// Token: 0x0400031E RID: 798
		internal int[] tree;

		// Token: 0x0400031F RID: 799
		internal int tree_index = 0;

		// Token: 0x04000320 RID: 800
		internal int need;

		// Token: 0x04000321 RID: 801
		internal int lit;

		// Token: 0x04000322 RID: 802
		internal int bitsToGet;

		// Token: 0x04000323 RID: 803
		internal int dist;

		// Token: 0x04000324 RID: 804
		internal byte lbits;

		// Token: 0x04000325 RID: 805
		internal byte dbits;

		// Token: 0x04000326 RID: 806
		internal int[] ltree;

		// Token: 0x04000327 RID: 807
		internal int ltree_index;

		// Token: 0x04000328 RID: 808
		internal int[] dtree;

		// Token: 0x04000329 RID: 809
		internal int dtree_index;
	}
}
